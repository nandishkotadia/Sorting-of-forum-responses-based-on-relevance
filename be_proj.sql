-- phpMyAdmin SQL Dump
-- version 4.2.7.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Apr 04, 2015 at 06:01 AM
-- Server version: 5.6.20
-- PHP Version: 5.5.15

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `be_proj`
--

-- --------------------------------------------------------

--
-- Table structure for table `question`
--

CREATE TABLE IF NOT EXISTS `question` (
`q_id` int(11) NOT NULL,
  `quest` longtext NOT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=208 ;

--
-- Dumping data for table `question`
--

INSERT INTO `question` (`q_id`, `quest`) VALUES
(5, 'The group or resource is not in the correct state to perform the requested operation error?'),
(7, 'What code analysis tools do you use for your Java projects? [closed]'),
(8, 'Set Collection for mutable objects in Java'),
(101, 'What are the differences between a HashMap and a Hashtable in Java?'),
(102, 'What are CSS, JavaScript and HTML in web design?'),
(103, 'I lost my printer CD Hp Deskjet 1050 J410 i can not install printer to my computer i need it badly.?'),
(104, 'What is a plugin?'),
(105, 'What is linux and unix?'),
(106, 'What is the use of java?'),
(107, 'What is the different between the Xml and Html'),
(201, 'Difference between method overloading and overriding in java? [closed]'),
(202, 'How do I compare strings in Java?'),
(203, 'Java String.equals versus == [duplicate]'),
(204, 'Is it wrong to use Deprecated methods or classes in Java?'),
(205, 'In Java, what''s the difference between public, default, protected, and private?'),
(206, 'What are the differences between struct and class in C++?'),
(207, 'What is the difference between String and StringBuffer in Java?');

-- --------------------------------------------------------

--
-- Table structure for table `response`
--

CREATE TABLE IF NOT EXISTS `response` (
`r_id` int(11) NOT NULL,
  `q_id` int(11) NOT NULL,
  `resp` longtext NOT NULL,
  `resp_disp` longtext NOT NULL,
  `classify` int(11) NOT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=695 ;

--
-- Dumping data for table `response`
--

INSERT INTO `response` (`r_id`, `q_id`, `resp`, `resp_disp`, `classify`) VALUES
(459, 203, '  Use the string.equals(String other) function to compare strings, not the == operator.  The function checks the actual contents of the string, the == operator checks whether the references to the objects are equal.  Note that string constants are usually interned such that two constants with the same value can actually be compared with ==, but its better not to rely on that.  if (usuario.equals(datos[0])) {     ... }   NB: the compare is done on usuario because thats guaranteed non-null in your code, although you should still check that youve actually got some tokens in the datos array otherwise youll get an array-out-of-bounds exception.     ', '<div class=###post-text### itemprop=###text###>  <p>Use the <a href=###http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-###><code>string.equals(String other)</code></a> function to compare strings, not the <code>==</code> operator.</p>  <p>The function checks the actual contents of the string, the <code>==</code> operator checks whether the references to the objects are equal.  Note that string constants are usually ###interned### such that two constants with the same value can actually be compared with <code>==</code>, but it&&&s better not to rely on that.</p>  <pre><code>if (usuario.equals(datos[0])) {     ... } </code></pre>  <p>NB: the compare is done on &&&usuario&&& because that&&&s guaranteed non-null in your code, although you should still check that you&&&ve actually got some tokens in the <code>datos</code> array otherwise you&&&ll get an array-out-of-bounds exception.</p>     </div>', 1),
(460, 203, '  Meet Jorman  Jorman is a successful businessman and has 2 houses.     But others dont know that.  Is it the same Jorman?  When you ask neighbours from either Madison or Burke streets, this is the only thing they can say:    Using the residence alone, its tough to confirm that its the same Jorman. Since theyre 2 different addresses, its just natural to assume that those are 2 different persons.  Thats how the operator == behaves. So it will say that datos[0]==usuario is false, because it only compares the addresses.  An Investigator to the Rescue  What if we sent an investigator? We know that its the same Jorman, but we need to prove it. Our detective will look closely at all physical aspects. With thorough inquiry, the agent will be able to conclude whether its the same person or not. Lets see it happen in Java terms.  Heres the source code of Strings equals() method:    It compares the Strings character by character, in order to come to a conclusion that they are indeed equal.  Thats how the String equals method behaves. So datos[0].equals(usuario) will return true, because it performs a logical comparison.     ', '<div class=###post-text### itemprop=###text###>  <h2>Meet Jorman</h2>  <p>Jorman is a successful businessman and has 2 houses. </p>  <p><img src=###http://i.stack.imgur.com/xLcfG.png### alt=###enter image description here###></p>  <p>But others don&&&t know that.</p>  <h2>Is it the same Jorman?</h2>  <p>When you ask neighbours from either Madison or Burke streets, this is the only thing they can say:</p>  <p><img src=###http://i.stack.imgur.com/ZjMlG.png### alt=###enter image description here###></p>  <p>Using the residence alone, it&&&s tough to confirm that it&&&s the same Jorman. Since they&&&re 2 different addresses, it&&&s just natural to assume that those are 2 different persons.</p>  <p><strong>That&&&s how the operator <code>==</code> behaves.</strong> So it will say that <code>datos[0]==usuario</code> is false, because it only <em>compares the addresses</em>.</p>  <h2>An Investigator to the Rescue</h2>  <p>What if we sent an investigator? We know that it&&&s the same Jorman, but we need to prove it. Our detective will look closely at all physical aspects. With thorough inquiry, the agent will be able to conclude whether it&&&s the same person or not. Let&&&s see it happen in Java terms.</p>  <p>Here&&&s the source code of String&&&s <code>equals()</code> method:</p>  <p><img src=###http://i.stack.imgur.com/6MYZy.png### alt=###enter image description here###></p>  <p>It compares the Strings character by character, in order to come to a conclusion that they are indeed equal.</p>  <p><strong>That&&&s how the String <code>equals</code> method behaves.</strong> So <code>datos[0].equals(usuario)</code> will return true, because it performs a <em>logical comparison</em>.</p>     </div>', 0),
(461, 203, '  Its good to notice that in some cases use of == operator can lead to the expected result, because the way how java handles strings - string literals are interned  (see String.intern()) during compilation - so when you write for example hello world in two classes and compare those strings with == you could get result: true, which is expected according to specification; when you compare same strings (if they have same value) when the first one is string literal (ie. defined through i am string literal) and second is constructed during runtime ie. with new keyword like new String(i am string literal), the == (equality) operator returns false, because both of them are different instances of the String class.   Only right way is using .equals() -> datos[0].equals(usuario). == says only if two objects are the same instance of object (ie. have same memory address)  Update: 01.04.2013 I updated this post due comments below which are somehow right. Originally I declared that interning (String.intern) is side effect of JVM optimization. Although it certainly save memory resources (which was what i meant by optimization) it is mainly feature of language     ', '<div class=###post-text### itemprop=###text###>  <p>It&&&s good to notice that <strong>in some cases use of ###==### operator can lead to the expected result, because the way how java handles strings</strong> - string literals are interned  (see <code>String.intern()</code>) during compilation - so when you write for example <code>###hello world###</code> in two classes and compare those strings with ###==### you could get result: true, which is expected according to <a href=###http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.5###>specification</a>; when you compare same strings (if they have same value) when the first one is string literal (ie. defined through <code>###i am string literal###</code>) and second is constructed during runtime ie. with ###new### keyword like <code>new String(###i am string literal###)</code>, the <code>==</code> (equality) operator returns false, because both of them are different instances of the <code>String</code> class. </p>  <p><strong>Only right way is using <code>.equals()</code> -> <code>datos[0].equals(usuario)</code>.</strong> <code>==</code> says only if two objects are the same instance of object (ie. have same memory address)</p>  <p><strong>Update</strong>: 01.04.2013 I updated this post due comments below which are somehow right. Originally I declared that interning (String.intern) is side effect of JVM optimization. Although it certainly save memory resources (which was what i meant by ###optimization###) it is mainly feature of language</p>     </div>', 0),
(462, 203, '  Instead of  datos[0] == usuario   use   datos[0].equals(usuario)   == compares the reference of the variable where .equals() compares the values which is what you want.     ', '<div class=###post-text### itemprop=###text###>  <p>Instead of</p>  <pre><code>datos[0] == usuario </code></pre>  <p>use </p>  <pre><code>datos[0].equals(usuario) </code></pre>  <p><code>==</code> compares the reference of the variable where <code>.equals()</code> compares the values which is what you want.</p>     </div>', 1),
(463, 203, '  equals() function is a method of Object class which should be overridden by programmer. String class overrides it to check if two strings are equal i.e. in content and not reference.   == operator checks if the references of both the objects are the same. Consider the programs  String abc = Awesome ; String xyz =  abc;  if(abc == xyz)      System.out.println(Refers to same string);   Here the abc and xyz, both refer to same string Awesome. Hence the expression (abc == xyz) is true.  String abc = Hello World; String xyz = Hello World;  if(abc == xyz)     System.out.println(Refers to same string); else     System.out.println(Refers to different strings);  if(abc.equals(xyz))      System.out.prinln(Contents of both strings are same); else      System.out.prinln(Contents of strings are different);   Here abc and xyz are two different strings with the same content Hello World. Hence here the expression (abc == xyz) is false where as (abc.equals(xyz)) is true.  Hope you understood the difference between == and .equals()   Thanks.     ', '<div class=###post-text### itemprop=###text###>  <p>equals() function is a method of Object class which should be overridden by programmer. String class overrides it to check if two strings are equal i.e. in content and not reference. </p>  <p>== operator checks if the references of both the objects are the same. Consider the programs</p>  <pre><code>String abc = ###Awesome### ; String xyz =  abc;  if(abc == xyz)      System.out.println(###Refers to same string###); </code></pre>  <p>Here the abc and xyz, both refer to same string ###Awesome###. Hence the expression (abc == xyz) is true.</p>  <pre><code>String abc = ###Hello World###; String xyz = ###Hello World###;  if(abc == xyz)     System.out.println(###Refers to same string###); else     System.out.println(###Refers to different strings###);  if(abc.equals(xyz))      System.out.prinln(###Contents of both strings are same###); else      System.out.prinln(###Contents of strings are different###); </code></pre>  <p>Here abc and xyz are two different strings with the same content ###Hello World###. Hence here the expression (abc == xyz) is false where as (abc.equals(xyz)) is true.</p>  <p>Hope you understood the difference between == and .equals() </p>  <p>Thanks.</p>     </div>', 0),
(464, 203, '  == tests for reference equality.  .equals() tests for value equality.  Consequently, if you actually want to test whether two strings have the same value you should use .equals() (except in a few situations where you can guarantee that two strings with the same value will be represented by the same object eg: String interning).  == is for testing whether two strings are the same object.  // These two have the same value new String(test).equals(test) ==&gt; true   // ... but they are not the same object new String(test) == test ==&gt; false   // ... neither are these new String(test) == new String(test) ==&gt; false   // ... but these are because literals are interned by  // the compiler and thus refer to the same object test == test ==&gt; true   // concatenation of string literals happens at compile time resulting in same objects test == te + st  ==&gt; true  // but .substring() is invoked at runtime, generating distinct objects test == !test.substring(1) ==&gt; false   It is important to note that == is much cheaper than equals() (a single pointer comparision instead of a loop), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. However, these situations are rare.     ', '<div class=###post-text### itemprop=###text###>  <p>== tests for reference equality.</p>  <p>.equals() tests for value equality.</p>  <p>Consequently, if you actually want to test whether two strings have the same value you should use .equals() (except in a few situations where you can guarantee that two strings with the same value will be represented by the same object eg: String interning).</p>  <p>== is for testing whether two strings are the same object.</p>  <pre><code>// These two have the same value new String(###test###).equals(###test###) ==&gt; true   // ... but they are not the same object new String(###test###) == ###test### ==&gt; false   // ... neither are these new String(###test###) == new String(###test###) ==&gt; false   // ... but these are because literals are interned by  // the compiler and thus refer to the same object ###test### == ###test### ==&gt; true   // concatenation of string literals happens at compile time resulting in same objects ###test### == ###te### + ###st###  ==&gt; true  // but .substring() is invoked at runtime, generating distinct objects ###test### == ###!test###.substring(1) ==&gt; false </code></pre>  <p>It is important to note that == is much cheaper than equals() (a single pointer comparision instead of a loop), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. However, these situations are rare.</p>     </div>', 0),
(465, 203, '  It will also work if you call intern() on the string before inserting it into the array. Interned strings are reference-equal (==) if and only if the are value-equal (equals().)  public static void main (String... aArguments) throws IOException {  String usuario = Jorman; String password = 14988611;  String strDatos=Jorman 14988611; StringTokenizer tokens=new StringTokenizer(strDatos,  ); int nDatos=tokens.countTokens(); String[] datos=new String[nDatos]; int i=0;  while(tokens.hasMoreTokens()) {     String str=tokens.nextToken();     datos[i]= str.intern();                 i++; }  //System.out.println (usuario);  if(datos[0]==usuario) {        System.out.println (WORKING);     }      ', '<div class=###post-text### itemprop=###text###>  <p>It will also work if you call <code>intern()</code> on the string before inserting it into the array. Interned strings are reference-equal (<code>==</code>) if and only if the are value-equal (<code>equals()</code>.)</p>  <pre><code>public static void main (String... aArguments) throws IOException {  String usuario = ###Jorman###; String password = ###14988611###;  String strDatos=###Jorman 14988611###; StringTokenizer tokens=new StringTokenizer(strDatos, ### ###); int nDatos=tokens.countTokens(); String[] datos=new String[nDatos]; int i=0;  while(tokens.hasMoreTokens()) {     String str=tokens.nextToken();     datos[i]= str.intern();                 i++; }  //System.out.println (usuario);  if(datos[0]==usuario) {        System.out.println (###WORKING###);     } </code></pre>     </div>', 1),
(466, 203, '  Lets analyze the following Java, to understand the identity and equality of Strings:  public static void testEquality(){     String str1 = Hello world.;     String str2 = Hello world.;      if (str1 == str2)         System.out.print(str1 == str2\n);     else         System.out.print(str1 != str2\n);      if(str1.equals(str2))         System.out.print(str1 equals to str2\n);     else         System.out.print(str1 doesnt equal to str2\n);      String str3 = new String(Hello world.);     String str4 = new String(Hello world.);      if (str3 == str4)         System.out.print(str3 == str4\n);     else         System.out.print(str3 != str4\n);      if(str3.equals(str4))         System.out.print(str3 equals to str4\n);     else         System.out.print(str3 doesnt equal to str4\n); }   When the first line of code String str1 = Hello world. executes, a string Hello world. is created, and the variable str1 refers to it. Another string Hello world. will not be created again when the next line of code executes because of optimization. The variable str2 also refers to the existing Hello world..  The operator == checks identity of two objects (whether two variables refer to same object). Since str1 and str2 refer to same string in memory, they are identical to each other. The method equals checks equality of two objects (whether two objects have same content). Of course, the content of str1 and str2 are same.  When code String str3 = new String(Hello world.) executes, a new instance of string with content Hello world. is created, and it is referred to by the variable str3. And then another instance of string with content Hello world. is created again, and referred to by str4. Since str3 and str4 refer to two different instances, they are not identical, but their content are same.  Therefore, the output contains four lines:  Str1 == str2  Str1 equals str2  Str3! = str4  Str3 equals str4     ', '<div class=###post-text### itemprop=###text###>  <p>Let&&&s analyze the following Java, to understand the identity and equality of Strings:</p>  <pre><code>public static void testEquality(){     String str1 = ###Hello world.###;     String str2 = ###Hello world.###;      if (str1 == str2)         System.out.print(###str1 == str2\n###);     else         System.out.print(###str1 != str2\n###);      if(str1.equals(str2))         System.out.print(###str1 equals to str2\n###);     else         System.out.print(###str1 doesn&&&t equal to str2\n###);      String str3 = new String(###Hello world.###);     String str4 = new String(###Hello world.###);      if (str3 == str4)         System.out.print(###str3 == str4\n###);     else         System.out.print(###str3 != str4\n###);      if(str3.equals(str4))         System.out.print(###str3 equals to str4\n###);     else         System.out.print(###str3 doesn&&&t equal to str4\n###); } </code></pre>  <p>When the first line of code String str1 = ###Hello world.### executes, a string Hello world.### is created, and the variable str1 refers to it. Another string Hello world.### will not be created again when the next line of code executes because of optimization. The variable str2 also refers to the existing Hello world.###.</p>  <p>The operator == checks identity of two objects (whether two variables refer to same object). Since str1 and str2 refer to same string in memory, they are identical to each other. The method equals checks equality of two objects (whether two objects have same content). Of course, the content of str1 and str2 are same.</p>  <p>When code String str3 = new String(###Hello world.###) executes, a new instance of string with content Hello world.### is created, and it is referred to by the variable str3. And then another instance of string with content Hello world.### is created again, and referred to by str4. Since str3 and str4 refer to two different instances, they are not identical, but their content are same.</p>  <p>Therefore, the output contains four lines:</p>  <p>Str1 == str2</p>  <p>Str1 equals str2</p>  <p>Str3! = str4</p>  <p>Str3 equals str4</p>     </div>', 0),
(467, 203, '  == operator check if the two references point to the same object or not. .equals() check for the actual string content(value).   Note that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.  Case1) String s1 = StackOverflow; String s2 = StackOverflow; s1 == s1;      //true s1.equals(s2); //true Reason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool. Case2) String s1 = new String(StackOverflow); String s2 = new String(StackOverflow); s1 == s1;      //false s1.equals(s2); //true Reason: If you create String object using new keyword separate space is allocated to it on heap.      ', '<div class=###post-text### itemprop=###text###>  <pre><code>== operator check if the two references point to the same object or not. .equals() check for the actual string content(value). </code></pre>  <p>Note that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.</p>  <pre><code>Case1) String s1 = ###StackOverflow###; String s2 = ###StackOverflow###; s1 == s1;      //true s1.equals(s2); //true Reason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool. Case2) String s1 = new String(###StackOverflow###); String s2 = new String(###StackOverflow###); s1 == s1;      //false s1.equals(s2); //true Reason: If you create String object using new keyword separate space is allocated to it on heap. </code></pre>     </div>', 1),
(468, 203, '  You should use string equals to compare two strings for equality, not operator == which just compares the references.     ', '<div class=###post-text### itemprop=###text###>  <p>You should use <a href=###http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#equals(java.lang.Object)### rel=###nofollow###>string equals</a> to compare two strings for equality, not operator == which just compares the references.</p>     </div>', 0),
(469, 203, '  The == operator is a simple comparison of values.\r\n For object references the (values) are the (references). So x == y returns true if x and y reference the same object.     ', '<div class=###post-text### itemprop=###text###>  <p>The == operator is a simple comparison of values.<br> For object references the (values) are the (references). So x == y returns true if x and y reference the same object.</p>     </div>', 0),
(470, 203, '  @Melkhiah66 You can use equals method instead of == method to check the equality. If you use intern() then it checks whether the object is in pool if present then returns equal else unequal. equals method internally uses hashcode and gets you the required result. </p>  <pre><code>public class Demo {   public static void main(String[] args)   {               String str1 = Jorman 14988611;     String str2 = new StringBuffer(Jorman).append( 14988611).toString();     String str3 = str2.intern();     System.out.println(str1 == str2  + (str1 == str2));           //gives false     System.out.println(str1 == str3  + (str1 == str3));           //gives true     System.out.println(str1 equals str2  + (str1.equals(str2)));  //gives true     System.out.println(str1 equals str3  + (str1.equals(str3)));  //gives true   } } </pre>  </code>     ', '<div class=###post-text### itemprop=###text###>  <p>@Melkhiah66 You can use equals method instead of &&&==&&& method to check the equality. If you use intern() then it checks whether the object is in pool if present then returns equal else unequal. equals method internally uses hashcode and gets you the required result. <code></p>  <pre><code>public class Demo {   public static void main(String[] args)   {               String str1 = ###Jorman 14988611###;     String str2 = new StringBuffer(###Jorman###).append(### 14988611###).toString();     String str3 = str2.intern();     System.out.println(###str1 == str2 ### + (str1 == str2));           //gives false     System.out.println(###str1 == str3 ### + (str1 == str3));           //gives true     System.out.println(###str1 equals str2 ### + (str1.equals(str2)));  //gives true     System.out.println(###str1 equals str3 ### + (str1.equals(str3)));  //gives true   } } </code></pre>  <p></code></p>     </div>', 1),
(471, 203, '  == operator compares the reference of an object in java. You can use strings equals method .  String s = Test; if(s.equals(Test)) {     System.out.println(Equal); }      ', '<div class=###post-text### itemprop=###text###>  <p><code>==</code> operator compares the reference of an object in java. You can use string&&&s <code>equals</code> method .</p>  <pre><code>String s = ###Test###; if(s.equals(###Test###)) {     System.out.println(###Equal###); } </code></pre>     </div>', 1),
(472, 203, '  If You are going to compare any assigned value of the string ie)primitive string, Both == and .equals will work, but for the new string object you should use only .equals, here == will not work  Example:  String a = name;  String b = name;   if(a == b)  and (a.equals(b)) will return true.  but  String a = new String(a);   in this case if(a == b) will return false  so its better to use .equals operator....     ', '<div class=###post-text### itemprop=###text###>  <p>If You are going to compare any assigned value of the string ie)primitive string, Both ###==### and .equals will work, but for the new string object you should use only .equals, here ###==### will not work</p>  <p>Example:</p>  <pre><code>String a = ###name###;  String b = ###name###; </code></pre>  <p><code>if(a == b)</code>  and <code>(a.equals(b))</code> will return true.</p>  <p>but</p>  <pre><code>String a = new String(###a###); </code></pre>  <p>in this case <code>if(a == b)</code> will return <code>false</code></p>  <p>so its better to use <code>.equals</code> operator....</p>     </div>', 0),
(473, 203, '  I know this is an old question but heres how I look at it (I find very useful):    Technical explanations  In Java, all variables are either primitive types or references.  (If you need to know what a reference is: Object variables are just pointers to objects. So with Object something = ..., something is really an address in memory (a number).)  == compares the exact values. So it compares if the primitive values are the same, or if the references (addresses) are the same. Thats why == often doesnt work on Strings; Strings are objects, and doing == on two string variables just compares if the address is same in memory, as others have pointed out. .equals() calls the comparison method of objects, which will compare the actual objects pointed by the references. In the case of Strings, it compares each character to see if theyre equal.    The interesting part:  So why does == sometimes return true for Strings? Note that Strings are immutable. In your code, if you do  String foo = hi; String bar = hi;   Since strings are immutable (when you call .trim() or something, it produces a new string, not modifying the original object pointed to in memory), you dont really need two different String(hi) objects. If the compiler is smart, the bytecode will read to only generate one String(hi) object. So if you do   if (foo == bar) ...   right after, theyre pointing to the same object, and will return true. But you rarely intend this. Instead, youre asking for user input, which is creating new strings at different parts of memory, etc. etc.  Note: If you do something like baz = new String(bar) the compiler may still figure out theyre the same thing. But the main point is when the compiler sees literal strings, it can easily optimize same strings.  I dont know how it works in runtime, but I assume the JVM doesnt keep a list of live strings and check if a same string exists. (eg if you read a line of input twice, and the user enters the same input twice, it wont check if the second input string is the same as the first, and point them to the same memory). Itd save a bit of heap memory, but its so negligible the overhead isnt worth it. Again, the point is its easy for the compiler to optimize literal strings.  There you have it... a gritty explanation for == vs. .equals() and why it seems random.     ', '<div class=###post-text### itemprop=###text###>  <p>I know this is an old question but here&&&s how I look at it (I find very useful):</p>  <hr>  <p><strong>Technical explanations</strong></p>  <p>In Java, all variables are either <strong>primitive types</strong> or <strong>references</strong>.</p>  <p>(If you need to know what a reference is: ###Object variables### are just <em>pointers to objects.</em> So with <code>Object something = ...</code>, something is really an address in memory (a number).)</p>  <p><code>==</code> compares the exact values. So it compares if the primitive values are the same, or if the references (addresses) are the same. That&&&s why <code>==</code> often doesn&&&t work on Strings; Strings are objects, and doing <code>==</code> on two string variables just compares if the address is same in memory, as others have pointed out. <code>.equals()</code> calls the comparison method of objects, which will compare the actual objects pointed by the references. In the case of Strings, it compares each character to see if they&&&re equal.</p>  <hr>  <p><strong>The interesting part</strong>:</p>  <p>So why does <code>==</code> sometimes return true for Strings? Note that Strings are immutable. In your code, if you do</p>  <pre><code>String foo = ###hi###; String bar = ###hi###; </code></pre>  <p>Since strings are immutable (when you call <code>.trim()</code> or something, it produces a new string, not modifying the original object pointed to in memory), you don&&&t really need two different <code>String(###hi###)</code> objects. If the compiler is smart, the bytecode will read to only generate one <code>String(###hi###)</code> object. So if you do </p>  <pre><code>if (foo == bar) ... </code></pre>  <p>right after, they&&&re pointing to the same object, and will return true. But you rarely intend this. Instead, you&&&re asking for user input, which is creating new strings at different parts of memory, etc. etc.</p>  <p><strong>Note</strong>: If you do something like <code>baz = new String(bar)</code> the compiler may still figure out they&&&re the same thing. But the main point is when the compiler sees literal strings, it can easily optimize same strings.</p>  <p>I don&&&t know how it works in runtime, but I assume the JVM doesn&&&t keep a list of ###live strings### and check if a same string exists. (eg if you read a line of input twice, and the user enters the same input twice, it won&&&t check if the second input string is the same as the first, and point them to the same memory). It&&&d save a bit of heap memory, but it&&&s so negligible the overhead isn&&&t worth it. Again, the point is it&&&s easy for the compiler to optimize literal strings.</p>  <p>There you have it... a gritty explanation for <code>==</code> vs. <code>.equals()</code> and why it seems random.</p>     </div>', 0),
(474, 203, '  Generally .equals are used for string comparision   == for integr comparision &amp; to check if the object is null     ', '<div class=###post-text### itemprop=###text###>  <p>Generally .equals are used for string comparision </p>  <p>== for integr comparision &amp; to check if the object is null</p>     </div>', 0),
(475, 203, '  Use Split rather than tokenizer,it will surely provide u exact output for E.g:  string name=Harry; string salary=25000; string namsal=Harry 25000; string[] s=namsal.split( ); for(int i=0;i&lt;s.length;i++) { System.out.println(s[i]); } if(s[0].equals(Harry)) { System.out.println(Task Complete); }   After this I am sure you will get better results.....     ', '<div class=###post-text### itemprop=###text###>  <p>Use Split rather than tokenizer,it will surely provide u exact output for E.g:</p>  <pre><code>string name=###Harry###; string salary=###25000###; string namsal=###Harry 25000###; string[] s=namsal.split(### ###); for(int i=0;i&lt;s.length;i++) { System.out.println(s[i]); } if(s[0].equals(###Harry###)) { System.out.println(###Task Complete###); } </code></pre>  <p>After this I am sure you will get better results.....</p>     </div>', 0),
(476, 203, '  The .equals() will check if the two strings have the same value and return the boolean value where as the == operator checks to see if the two strings are the same object.     ', '<div class=###post-text### itemprop=###text###>  <p>The <code>.equals()</code> will check if the two strings have the same value and return the <code>boolean</code> value where as the <code>==</code> operator checks to see if the two strings are the same object.</p>     </div>', 0),
(477, 203, '  Someone said on a post higher up that  == is used for int and for checking nulls. It may also be used to check for Boolean operations and char types.  Be very careful though and double check that you are using a char and not a String. for example       String strType = a;     char charType = a;   for strings you would then check This would be correct      if(strType.equals(a)         do something   but       if(charType.equals(a)         do something else   would be incorrect, you would need to do the following      if(charType == a)          do something else      ', '<div class=###post-text### itemprop=###text###>  <p>Someone said on a post higher up that  == is used for int and for checking nulls. It may also be used to check for Boolean operations and char types.</p>  <p>Be very careful though and double check that you are using a char and not a String. for example </p>  <pre><code>    String strType = ###a###;     char charType = &&&a&&&; </code></pre>  <p>for strings you would then check This would be correct</p>  <pre><code>    if(strType.equals(###a###)         do something </code></pre>  <p>but </p>  <pre><code>    if(charType.equals(&&&a&&&)         do something else </code></pre>  <p>would be incorrect, you would need to do the following</p>  <pre><code>    if(charType == &&&a&&&)          do something else </code></pre>     </div>', 0),
(478, 203, '  a==b Compares references, not values. The use of == with object references is generally limited to the following: Comparing to see if a reference is null. Comparing two enum values. This works because there is only one object for each enum constant. You want to know if two references are to the same object  a.equals(b)  Compares values for equality. Because this method is defined in the Object class, from which all other classes are derived, its automatically defined for every class. However, it doesnt perform an intelligent comparison for most classes unless the class overrides it. It has been defined in a meaningful way for most Java core classes. If its not defined for a (user) class, it behaves the same as ==.     ', '<div class=###post-text### itemprop=###text###>  <p>a==b Compares references, not values. The use of == with object references is generally limited to the following: Comparing to see if a reference is null. Comparing two enum values. This works because there is only one object for each enum constant. You want to know if two references are to the same object</p>  <p>###a###.equals(###b###)</p>  <p>Compares values for equality. Because this method is defined in the Object class, from which all other classes are derived, it&&&s automatically defined for every class. However, it doesn&&&t perform an intelligent comparison for most classes unless the class overrides it. It has been defined in a meaningful way for most Java core classes. If it&&&s not defined for a (user) class, it behaves the same as ==.</p>     </div>', 0),
(482, 5, 'Hello, \n\nI am trying to boost my router range by using my notebook as a repeater. \nSince I only have only 1 wireless adapter on my notebook, maybe this is the reason I am getting this error, though I know this can be achieved and from what I read on this site people have managed it. \nI am running window 7 x64 and have a HP dv6 pavilion 2100 notebook with a broadcom wireless adapter. \nEach time I try to start the server I get the following error: \nThe group or resource is not in the correct state to perform the requested operation\nPlease advise! \n\nThank you\n', 'Hello, \n\nI am trying to boost my router range by using my notebook as a repeater. \nSince I only have only 1 wireless adapter on my notebook, maybe this is the reason I am getting this error, though I know this can be achieved and from what I read on this site people have managed it. \nI am running window 7 x64 and have a HP dv6 pavilion 2100 notebook with a broadcom wireless adapter. \nEach time I try to start the server I get the following error: \nThe group or resource is not in the correct state to perform the requested operation\nPlease advise! \n\nThank you\n', 0),
(483, 5, 'i just downloaded virtual router but when i clicked on start virtual router i got the same error message, any help?', 'i just downloaded virtual router but when i clicked on start virtual router i got the same error message, any help?', 0),
(484, 5, 'Helle,\r\n\r\ni''m using an DELL Presision M4700 with Windows 7 Prof x64. Have the same problem. Service is running but after start getting the given error.\r\n\r\n(Using actual version 1.0, downloaded today)\r\n\r\nThank''s', 'Helle,\r\n\r\ni''m using an DELL Presision M4700 with Windows 7 Prof x64. Have the same problem. Service is running but after start getting the given error.\r\n\r\n(Using actual version 1.0, downloaded today)\r\n\r\nThank''s', 0),
(485, 5, 'Hey,\r\n\r\nI found the reason I was having this problem.\r\nThe Microsoft Virtual WiFi Miniport Adapter wasn''t working.\r\nTo make sure it''s working do the following:\r\n1) Open an elevated Command Prompt window\r\n2) type: \r\nnetsh wlan set hostednetwork mode=allow', 'Hey,\r\n\r\nI found the reason I was having this problem.\r\nThe Microsoft Virtual WiFi Miniport Adapter wasn''t working.\r\nTo make sure it''s working do the following:\r\n1) Open an elevated Command Prompt window\r\n2) type: \r\nnetsh wlan set hostednetwork mode=allow', 1),
(488, 5, 'After trying the command line bit above it still didn''t work. Check in device manager under network adapters and make sure the Virtual Miniport adapter is enabled. This fixed the problem for me after a reboot and then it worked.', 'After trying the command line bit above it still didn''t work. Check in device manager under network adapters and make sure the Virtual Miniport adapter is enabled. This fixed the problem for me after a reboot and then it worked.', 1),
(489, 5, 'Here''s a Hotfix available from Microsoft for a common cause of this problem on Windows 7 and Windows Server 2008 R2: \r\nhttp://support.microsoft.com/kb/2496820 \r\n\r\nIf the hotfix doesn''t work, or you aren''t using Windows 7 or 2008 R2, then you could try some of the suggestions at the following link: \r\nhttp://superuser.com/questions/373861/how-can-i-start-hostednetwork-on-windows-7', 'Here''s a Hotfix available from Microsoft for a common cause of this problem on Windows 7 and Windows Server 2008 R2: \r\nhttp://support.microsoft.com/kb/2496820 \r\n\r\nIf the hotfix doesn''t work, or you aren''t using Windows 7 or 2008 R2, then you could try some of the suggestions at the following link: \r\nhttp://superuser.com/questions/373861/how-can-i-start-hostednetwork-on-windows-7', 0),
(492, 5, 'It was quite the headache until I found YMatrix''s suggestion, which did the trick for me. I''m on Win8. EDIT:It would be convenient if the command was integrated into Virtual Router.\r\nhey! follow mine...look below', 'It was quite the headache until I found YMatrix''s suggestion, which did the trick for me. I''m on Win8. EDIT:It would be convenient if the command was integrated into Virtual Router.\r\nhey! follow mine...look below', 0),
(493, 5, 'hey read my thread below', 'hey read my thread below', 0),
(494, 5, 'I have found way to solve this problem. Read here --> http://learnh0w.blogspot.com/2013/04/virtual-router-problems.html#more . 100% work for window 7. Other window i don''t sure. Just try it.', 'I have found way to solve this problem. Read here --> http://learnh0w.blogspot.com/2013/04/virtual-router-problems.html#more . 100% work for window 7. Other window i don''t sure. Just try it.', 0),
(495, 5, 'thanks to YMatrix, your solution worked. Am on Win 8, HP G62 with Ralink wifi chip', 'thanks to YMatrix, your solution worked. Am on Win 8, HP G62 with Ralink wifi chip', 0),
(496, 5, 'Solution video : \r\nhttp://www.youtube.com/watch?v=kr5nKTqa1vk', 'Solution video : \r\nhttp://www.youtube.com/watch?v=kr5nKTqa1vk', 0),
(497, 5, 'run following command using cmd with admin previledge\r\n\r\nnetsh wlan set hostednetwork mode=allow', 'run following command using cmd with admin previledge\r\n\r\nnetsh wlan set hostednetwork mode=allow', 1),
(498, 5, '__Hello Virtual WIFI users. Heres the TRUE solution and I hope this would work\r\nand if it works please follow my little favor. (My pc is windows 7)\r\n__\r\nStep 1: Click Open Network and Sharing Center on the connection status area.\r\n\r\nStep 2: Click Change Adapter Setting (hint: at the left side).\r\n\r\nStep 3: Find the Maryfi Connection.\r\n\r\nStep 4: Right click it and click Enable.\r\n\r\n\r\nSo simple, so my favor is...\r\n\r\nfollow me on Instagram,Facebook,Kik\r\nInstagram: www.instagram.com/wenxiewenz\r\nKik: wenxiewenz\r\nFacebook: www.facebook.com/wenxie.wenz\r\n\r\n\r\nThank You hope it Help.\r\nrun following command using cmd with admin previledge \r\n\r\nnetsh wlan set hostednetwork mode=allow', '__Hello Virtual WIFI users. Heres the TRUE solution and I hope this would work\r\nand if it works please follow my little favor. (My pc is windows 7)\r\n__\r\nStep 1: Click Open Network and Sharing Center on the connection status area.\r\n\r\nStep 2: Click Change Adapter Setting (hint: at the left side).\r\n\r\nStep 3: Find the Maryfi Connection.\r\n\r\nStep 4: Right click it and click Enable.\r\n\r\n\r\nSo simple, so my favor is...\r\n\r\nfollow me on Instagram,Facebook,Kik\r\nInstagram: www.instagram.com/wenxiewenz\r\nKik: wenxiewenz\r\nFacebook: www.facebook.com/wenxie.wenz\r\n\r\n\r\nThank You hope it Help.\r\nrun following command using cmd with admin previledge \r\n\r\nnetsh wlan set hostednetwork mode=allow', 1),
(499, 5, 'I am getting same error message.. any Help..tried Hotfix but it is not working. \r\n\r\nSEO Blog \r\nAndroid Blog', 'I am getting same error message.. any Help..tried Hotfix but it is not working. \r\n\r\nSEO Blog \r\nAndroid Blog', 0),
(500, 5, 'The group or resource is not in the correct state to perform the requested operation \r\n\r\n\r\nhttps://www.youtube.com/watch?v=MXzgZGM4LpI&index=3&list=PLKo21v9PcApqMszngW0to64UvPzwJG6UT', 'The group or resource is not in the correct state to perform the requested operation \r\n\r\n\r\nhttps://www.youtube.com/watch?v=MXzgZGM4LpI&index=3&list=PLKo21v9PcApqMszngW0to64UvPzwJG6UT', 0),
(502, 5, 'YMatrix pls help...Still I am not able to use Virtual Router pls help. I am not using genuine windows so is it because of that ? I f I purchase original windows 7 then do u think problem may be solved? \r\n\r\nThnkx', 'YMatrix pls help...Still I am not able to use Virtual Router pls help. I am not using genuine windows so is it because of that ? I f I purchase original windows 7 then do u think problem may be solved? \r\n\r\nThnkx', 0),
(503, 5, 'i found this out by trying to allow it through my winpatrol pro (because i thought that it might be blocking the VR from working some way..) but it told me that the VR isn''t compatible using 64bit systems... so there''s my problem.. it needs to be fixed to allow 64 bit versions of Windows. \r\n:\\ \r\nnone of the above helped me. most i already knew of and tried previously before here. lol. \r\ni have windows 8.2 64bit btw', 'i found this out by trying to allow it through my winpatrol pro (because i thought that it might be blocking the VR from working some way..) but it told me that the VR isn''t compatible using 64bit systems... so there''s my problem.. it needs to be fixed to allow 64 bit versions of Windows. \r\n:\\ \r\nnone of the above helped me. most i already knew of and tried previously before here. lol. \r\ni have windows 8.2 64bit btw', 1),
(506, 5, 'I''ve run Computer management->Network adapters->uninstall appropriate adapter->scan for hw changes to get it back again \r\nand this helped', 'I''ve run Computer management->Network adapters->uninstall appropriate adapter->scan for hw changes to get it back again \r\nand this helped', 0),
(507, 5, 'This fixed it for me: \r\nInstall the hotfix \r\nhttp://support.microsoft.com/kb/2496820 \r\nOpen command prompt with root permissions \r\ntype netsh wlan set hostednetwork mode=allow \r\nreboot computer \r\ngo to device manager then network adapters \r\ndisable the one that says Microsoft virtual router or something like that \r\nenable it \r\nthen start the router.', 'This fixed it for me: \r\nInstall the hotfix \r\nhttp://support.microsoft.com/kb/2496820 \r\nOpen command prompt with root permissions \r\ntype netsh wlan set hostednetwork mode=allow \r\nreboot computer \r\ngo to device manager then network adapters \r\ndisable the one that says Microsoft virtual router or something like that \r\nenable it \r\nthen start the router.', 1),
(508, 5, 'This solved it for me. \r\n\r\nOpen control panel \r\nSearch "Device manager" \r\nPress view, then select view hidden divices \r\ngo to network adapters, \r\nright click: Microsoft Hosted Network Virtual Adapter \r\nPress enable.', 'This solved it for me. \r\n\r\nOpen control panel \r\nSearch "Device manager" \r\nPress view, then select view hidden divices \r\ngo to network adapters, \r\nright click: Microsoft Hosted Network Virtual Adapter \r\nPress enable.', 1),
(521, 203, 'hello', 'hello', 0),
(522, 207, '  String is used to manipulate character strings that cannot be changed (read-only and immutable).   StringBuffer is used to represent characters that can be modified.  Performance wise, StringBuffer is faster when performing concatenations. This is because when you concatenate a String, you are creating a new object (internally) every time since String is immutable.  You can also use StringBuilder which is similar to StringBuffer except it is not synchronized. The maximum size for either of these is Integer.MAX_VALUE (231 - 1 = 2,147,483,647) or maximum heap size divided by 2 (see how many characters can a Java string have?). More information here.     ', '<div class=###post-text### itemprop=###text###>  <p><code>String</code> is used to manipulate character strings that cannot be changed (read-only and immutable). </p>  <p><code>StringBuffer</code> is used to represent characters that can be modified.</p>  <p>Performance wise, <code>StringBuffer</code> is faster when performing concatenations. This is because when you concatenate a <code>String</code>, you are creating a new object (internally) every time since <code>String</code> is immutable.</p>  <p>You can also use <code>StringBuilder</code> which is similar to <code>StringBuffer</code> except it is not synchronized. The maximum size for either of these is <code>Integer.MAX_VALUE</code> (2<sup>31</sup> - 1 = 2,147,483,647) or maximum heap size divided by 2 (see <a href=###http://stackoverflow.com/questions/1179983/how-many-characters-can-a-java-string-have###>how many characters can a Java string have?</a>). More information <a href=###http://kaioa.com/node/59###>here</a>.</p>     </div>', 1),
(523, 207, '  A String is immutable, i.e. when its created, it can never change.  A StringBuffer (or its non-synchronized cousin StringBuilder) is used when you need to construct a string piece by piece without the performance overhead of constructing lots of little Strings along the way.  The maximum length for both is Integer.MAX_VALUE, because they are stored internally as arrays, and Java arrays only have an int for their length pseudo-field.  The performance improvement between Strings and StringBuffers for multiple concatenation is quite significant. If you run the following test code, you will see the difference. On my ancient laptop with Java 6, I get these results:   Concat with String took: 1781ms Concat with StringBuffer took: 0ms   public class Concat {     public static String concatWithString()     {         String t = Cat;         for (int i=0; i&lt;10000; i++)         {             t = t + Dog;         }         return t;     }     public static String concatWithStringBuffer()     {         StringBuffer sb = new StringBuffer(Cat);         for (int i=0; i&lt;10000; i++)         {             sb.append(Dog);         }         return sb.toString();     }     public static void main(String[] args)     {         long start = System.currentTimeMillis();         concatWithString();         System.out.println(Concat with String took:  + (System.currentTimeMillis() - start) + ms);         start = System.currentTimeMillis();         concatWithStringBuffer();         System.out.println(Concat with StringBuffer took:  + (System.currentTimeMillis() - start) + ms);     } }      ', '<div class=###post-text### itemprop=###text###>  <p>A <code>String</code> is immutable, i.e. when it&&&s created, it can never change.</p>  <p>A <code>StringBuffer</code> (or its non-synchronized cousin <code>StringBuilder</code>) is used when you need to construct a string piece by piece without the performance overhead of constructing lots of little <code>String</code>s along the way.</p>  <p>The maximum length for both is Integer.MAX_VALUE, because they are stored internally as arrays, and Java arrays only have an <code>int</code> for their length pseudo-field.</p>  <p>The performance improvement between <code>String</code>s and <code>StringBuffer</code>s for multiple concatenation is quite significant. If you run the following test code, you will see the difference. On my ancient laptop with Java 6, I get these results:</p>  <pre> Concat with String took: 1781ms Concat with StringBuffer took: 0ms </pre>  <pre><code>public class Concat {     public static String concatWithString()     {         String t = ###Cat###;         for (int i=0; i&lt;10000; i++)         {             t = t + ###Dog###;         }         return t;     }     public static String concatWithStringBuffer()     {         StringBuffer sb = new StringBuffer(###Cat###);         for (int i=0; i&lt;10000; i++)         {             sb.append(###Dog###);         }         return sb.toString();     }     public static void main(String[] args)     {         long start = System.currentTimeMillis();         concatWithString();         System.out.println(###Concat with String took: ### + (System.currentTimeMillis() - start) + ###ms###);         start = System.currentTimeMillis();         concatWithStringBuffer();         System.out.println(###Concat with StringBuffer took: ### + (System.currentTimeMillis() - start) + ###ms###);     } } </code></pre>     </div>', 0);
INSERT INTO `response` (`r_id`, `q_id`, `resp`, `resp_disp`, `classify`) VALUES
(524, 207, '  String                                          StringBuffer  Immutable                                       Mutable String s=new String(karthik);                StringBuffer sb=new StringBuffer(karthik) s.concat(reddy);                             sb.append(reddy); System.out.println(s);                         System.out.println(sb); O/P:karthik                                    O/P:karthikreddy  ---&gt;once we created a String object            ----&gt;once we created a StringBuffer object we cant perform any changes in the existing  we can perform any changes in the existing object.If we are trying to perform any        object.It is nothing but mutablity of  changes with those changes a new object       of a StrongBuffer object will be created.It is nothing but Immutability of a String object  Use String---&gt;If you require immutabilty Use StringBuffer----&gt;If you require mutable + threadsafety Use StringBuilder---&gt;If you require mutable + with out threadsafety  String s=new String(karthik); ---&gt;here 2 objects will be created one is heap and the other is in stringconstantpool(scp) and s is always pointing to heap object  String s=karthik;  ---&gt;In this case only one object will be created in scp and s is always pointing to that object only      ', '<div class=###post-text### itemprop=###text###>  <pre><code>String                                          StringBuffer  Immutable                                       Mutable String s=new String(###karthik###);                StringBuffer sb=new StringBuffer(###karthik###) s.concat(###reddy###);                             sb.append(###reddy###); System.out.println(s);                         System.out.println(sb); O/P:karthik                                    O/P:karthikreddy  ---&gt;once we created a String object            ----&gt;once we created a StringBuffer object we can&&&t perform any changes in the existing  we can perform any changes in the existing object.If we are trying to perform any        object.It is nothing but mutablity of  changes with those changes a new object       of a StrongBuffer object will be created.It is nothing but Immutability of a String object  Use String---&gt;If you require immutabilty Use StringBuffer----&gt;If you require mutable + threadsafety Use StringBuilder---&gt;If you require mutable + with out threadsafety  String s=new String(###karthik###); ---&gt;here 2 objects will be created one is heap and the other is in stringconstantpool(scp) and s is always pointing to heap object  String s=###karthik###;  ---&gt;In this case only one object will be created in scp and s is always pointing to that object only </code></pre>     </div>', 0),
(525, 207, '  String is an immutable class. This means that once you instantiate an instance of a string like so:  String str1 = hello;   The object in memory cannot be altered. Instead you will have to create a new instance, copy the old String and append whatever else as in this example:  String str1 = hello; str1 = str1 +  world!;   What is really happening hear is that we are NOT updating the existing str1 object... we are reallocating new memory all together, copying the hello data and appending  world! to the end, then settings the str1 reference to point to this new memory. So it really looks more like this under the hood:  String str1 = hello; String str2 = str1 +  world!; str1 = str2;   So it follows that this copy + paste and move stuff around in memory process can be very expensive if done repitively especially recursively.  When you are in that situation of having to do things over and over utilize StringBuilder. It is mutable and can append strings to the end of the current one because its back by an [growing array] (not 100% if that is the actual data structure, could be a list).     ', '<div class=###post-text### itemprop=###text###>  <p>String is an immutable class. This means that once you instantiate an instance of a string like so:</p>  <pre><code>String str1 = ###hello###; </code></pre>  <p>The object in memory cannot be altered. Instead you will have to create a new instance, copy the old String and append whatever else as in this example:</p>  <pre><code>String str1 = ###hello###; str1 = str1 + ### world!###; </code></pre>  <p>What is really happening hear is that we are NOT updating the existing str1 object... we are reallocating new memory all together, copying the ###hello### data and appending ### world!### to the end, then settings the str1 reference to point to this new memory. So it really looks more like this under the hood:</p>  <pre><code>String str1 = ###hello###; String str2 = str1 + ### world!###; str1 = str2; </code></pre>  <p>So it follows that this ###copy + paste and move stuff around in memory### process can be very expensive if done repitively especially recursively.</p>  <p>When you are in that situation of having to do things over and over utilize StringBuilder. It is mutable and can append strings to the end of the current one because it&&&s back by an [growing array] (not 100% if that is the actual data structure, could be a list).</p>     </div>', 0),
(526, 207, '  From the API:     A thread-safe, mutable sequence of characters. A string buffer is like a String, but can be modified. At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls.       ', '<div class=###post-text### itemprop=###text###>  <p>From the <a href=###http://download.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html### rel=###nofollow###>API:</a></p>  <blockquote>   <p>A thread-safe, mutable sequence of characters. A string buffer is like a String, but can be modified. At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls. </p> </blockquote>     </div>', 0),
(527, 207, '  A StringBuffer is used to create a single string from many strings, e.g. when you want to append parts of a String in a loop.  You should use a StringBuilder instead of a StringBuffer when you have only a single Thread accessing the StringBuffer, since the StringBuilder is not synchronized and thus faster.  AFAIK there is no upper limit for String size in Java as a language, but the JVMs probably have an upper limit.     ', '<div class=###post-text### itemprop=###text###>  <p>A StringBuffer is used to create a single string from many strings, e.g. when you want to append parts of a String in a loop.</p>  <p>You should use a StringBuilder instead of a StringBuffer when you have only a single Thread accessing the StringBuffer, since the StringBuilder is not synchronized and thus faster.</p>  <p>AFAIK there is no upper limit for String size in Java as a language, but the JVMs probably have an upper limit.</p>     </div>', 1),
(528, 207, '  A StringBuffer or its younger and faster brother StringBuilder is preferred whenever youre going do to a lot of string concatenations in flavor of  string += newString;   or equivalently  string = string + newString;   because the above constructs implicitly creates new string everytime which will be a huge performance and drop. A StringBuffer / StringBuilder is under the hoods best to be compared with a dynamically expansible List&lt;Character&gt;.     ', '<div class=###post-text### itemprop=###text###>  <p>A <code>StringBuffer</code> or its younger and faster brother <a href=###http://java.sun.com/javase/6/docs/api/java/lang/StringBuilder.html### rel=###nofollow###><code>StringBuilder</code></a> is preferred whenever you&&&re going do to a lot of string concatenations in flavor of</p>  <pre><code>string += newString; </code></pre>  <p>or equivalently</p>  <pre><code>string = string + newString; </code></pre>  <p>because the above constructs implicitly creates <strong>new</strong> string everytime which will be a huge performance and drop. A <code>StringBuffer</code> / <code>StringBuilder</code> is under the hoods best to be compared with a dynamically expansible <code>List&lt;Character&gt;</code>.</p>     </div>', 1),
(529, 207, '  A String is an immutable character array.  A StringBuffer is a mutable character array. Often converted back to String when done mutating.  Since both are an array, the maximum size for both is equal to the maximum size of an integer, which is 2^31-1 (see JavaDoc, also check out the JavaDoc for both String and StringBuffer).This is because the .length argument of an array is a primitive int. (See Arrays).     ', '<div class=###post-text### itemprop=###text###>  <p>A <code>String</code> is an immutable character array.</p>  <p>A <code>StringBuffer</code> is a mutable character array. Often converted back to <code>String</code> when done mutating.</p>  <p>Since both are an array, the maximum size for both is equal to the maximum size of an integer, which is 2^31-1 (see <a href=###http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Integer.html#MAX_VALUE### rel=###nofollow###>JavaDoc</a>, also check out the JavaDoc for both <code>String</code> and <code>StringBuffer</code>).This is because the <code>.length</code> argument of an array is a primitive <code>int</code>. (See <a href=###http://java.sun.com/docs/books/jls/second_edition/html/arrays.doc.html### rel=###nofollow###>Arrays</a>).</p>     </div>', 1),
(530, 207, '  I found interest answer for compare performance String vs StringBuffer by Reggie Hutcherso Source: http://www.javaworld.com/javaworld/jw-03-2000/jw-0324-javaperf.html  Java provides the StringBuffer and String classes, and the String class is used to manipulate character strings that cannot be changed. Simply stated, objects of type String are read only and immutable. The StringBuffer class is used to represent characters that can be modified.  The significant performance difference between these two classes is that StringBuffer is faster than String when performing simple concatenations. In String manipulation code, character strings are routinely concatenated. Using the String class, concatenations are typically performed as follows:   String str = new String (Stanford  );  str += Lost!!;   If you were to use StringBuffer to perform the same concatenation, you would need code that looks like this:   StringBuffer str = new StringBuffer (Stanford );  str.append(Lost!!);   Developers usually assume that the first example above is more efficient because they think that the second example, which uses the append method for concatenation, is more costly than the first example, which uses the + operator to concatenate two String objects.  The + operator appears innocent, but the code generated produces some surprises. Using a StringBuffer for concatenation can in fact produce code that is significantly faster than using a String. To discover why this is the case, we must examine the generated bytecode from our two examples. The bytecode for the example using String looks like this:  0 new #7 &lt;Class java.lang.String&gt; 3 dup  4 ldc #2 &lt;String Stanford &gt; 6 invokespecial #12 &lt;Method java.lang.String(java.lang.String)&gt; 9 astore_1 10 new #8 &lt;Class java.lang.StringBuffer&gt; 13 dup 14 aload_1 15 invokestatic #23 &lt;Method java.lang.String valueOf(java.lang.Object)&gt; 18 invokespecial #13 &lt;Method java.lang.StringBuffer(java.lang.String)&gt; 21 ldc #1 &lt;String Lost!!&gt; 23 invokevirtual #15 &lt;Method java.lang.StringBuffer append(java.lang.String)&gt; 26 invokevirtual #22 &lt;Method java.lang.String toString()&gt; 29 astore_1   The bytecode at locations 0 through 9 is executed for the first line of code, namely:   String str = new String(Stanford );   Then, the bytecode at location 10 through 29 is executed for the concatenation:   str += Lost!!;   Things get interesting here. The bytecode generated for the concatenation creates a StringBuffer object, then invokes its append method: the temporary StringBuffer object is created at location 10, and its append method is called at location 23. Because the String class is immutable, a StringBuffer must be used for concatenation.  After the concatenation is performed on the StringBuffer object, it must be converted back into a String. This is done with the call to the toString method at location 26. This method creates a new String object from the temporary StringBuffer object. The creation of this temporary StringBuffer object and its subsequent conversion back into a String object are very expensive.  In summary, the two lines of code above result in the creation of three objects:   A String object at location 0 A StringBuffer object at location 10 A String object at location 26   Now, lets look at the bytecode generated for the example using StringBuffer:  0 new #8 &lt;Class java.lang.StringBuffer&gt; 3 dup 4 ldc #2 &lt;String Stanford &gt; 6 invokespecial #13 &lt;Method java.lang.StringBuffer(java.lang.String)&gt; 9 astore_1 10 aload_1  11 ldc #1 &lt;String Lost!!&gt; 13 invokevirtual #15 &lt;Method java.lang.StringBuffer append(java.lang.String)&gt; 16 pop   The bytecode at locations 0 to 9 is executed for the first line of code:   StringBuffer str = new StringBuffer(Stanford );   The bytecode at location 10 to 16 is then executed for the concatenation:   str.append(Lost!!);   Notice that, as is the case in the first example, this code invokes the append method of a StringBuffer object. Unlike the first example, however, there is no need to create a temporary StringBuffer and then convert it into a String object. This code creates only one object, the StringBuffer, at location 0.  In conclusion, StringBuffer concatenation is significantly faster than String concatenation. Obviously, StringBuffers should be used in this type of operation when possible. If the functionality of the String class is desired, consider using a StringBuffer for concatenation and then performing one conversion to String.     ', '<div class=###post-text### itemprop=###text###>  <p>I found interest answer for compare performance String vs StringBuffer by Reggie Hutcherso <strong>Source</strong>: <a href=###http://www.javaworld.com/javaworld/jw-03-2000/jw-0324-javaperf.html### rel=###nofollow###>http://www.javaworld.com/javaworld/jw-03-2000/jw-0324-javaperf.html</a></p>  <p>Java provides the StringBuffer and String classes, and the String class is used to manipulate character strings that cannot be changed. Simply stated, objects of type String are read only and immutable. The StringBuffer class is used to represent characters that can be modified.</p>  <p>The significant performance difference between these two classes is that StringBuffer is faster than String when performing simple concatenations. In String manipulation code, character strings are routinely concatenated. Using the String class, concatenations are typically performed as follows:</p>  <pre><code> String str = new String (###Stanford  ###);  str += ###Lost!!###; </code></pre>  <p>If you were to use StringBuffer to perform the same concatenation, you would need code that looks like this:</p>  <pre><code> StringBuffer str = new StringBuffer (###Stanford ###);  str.append(###Lost!!###); </code></pre>  <p>Developers usually assume that the first example above is more efficient because they think that the second example, which uses the append method for concatenation, is more costly than the first example, which uses the + operator to concatenate two String objects.</p>  <p>The + operator appears innocent, but the code generated produces some surprises. Using a StringBuffer for concatenation can in fact produce code that is significantly faster than using a String. To discover why this is the case, we must examine the generated bytecode from our two examples. The bytecode for the example using String looks like this:</p>  <pre><code>0 new #7 &lt;Class java.lang.String&gt; 3 dup  4 ldc #2 &lt;String ###Stanford ###&gt; 6 invokespecial #12 &lt;Method java.lang.String(java.lang.String)&gt; 9 astore_1 10 new #8 &lt;Class java.lang.StringBuffer&gt; 13 dup 14 aload_1 15 invokestatic #23 &lt;Method java.lang.String valueOf(java.lang.Object)&gt; 18 invokespecial #13 &lt;Method java.lang.StringBuffer(java.lang.String)&gt; 21 ldc #1 &lt;String ###Lost!!###&gt; 23 invokevirtual #15 &lt;Method java.lang.StringBuffer append(java.lang.String)&gt; 26 invokevirtual #22 &lt;Method java.lang.String toString()&gt; 29 astore_1 </code></pre>  <p>The bytecode at locations 0 through 9 is executed for the first line of code, namely:</p>  <pre><code> String str = new String(###Stanford ###); </code></pre>  <p>Then, the bytecode at location 10 through 29 is executed for the concatenation:</p>  <pre><code> str += ###Lost!!###; </code></pre>  <p>Things get interesting here. The bytecode generated for the concatenation creates a StringBuffer object, then invokes its append method: the temporary StringBuffer object is created at location 10, and its append method is called at location 23. Because the String class is immutable, a StringBuffer must be used for concatenation.</p>  <p>After the concatenation is performed on the StringBuffer object, it must be converted back into a String. This is done with the call to the toString method at location 26. This method creates a new String object from the temporary StringBuffer object. The creation of this temporary StringBuffer object and its subsequent conversion back into a String object are very expensive.</p>  <p>In summary, the two lines of code above result in the creation of three objects:</p>  <ol> <li>A String object at location 0</li> <li>A StringBuffer object at location 10</li> <li>A String object at location 26</li> </ol>  <p>Now, let&&&s look at the bytecode generated for the example using StringBuffer:</p>  <pre><code>0 new #8 &lt;Class java.lang.StringBuffer&gt; 3 dup 4 ldc #2 &lt;String ###Stanford ###&gt; 6 invokespecial #13 &lt;Method java.lang.StringBuffer(java.lang.String)&gt; 9 astore_1 10 aload_1  11 ldc #1 &lt;String ###Lost!!###&gt; 13 invokevirtual #15 &lt;Method java.lang.StringBuffer append(java.lang.String)&gt; 16 pop </code></pre>  <p>The bytecode at locations 0 to 9 is executed for the first line of code:</p>  <pre><code> StringBuffer str = new StringBuffer(###Stanford ###); </code></pre>  <p>The bytecode at location 10 to 16 is then executed for the concatenation:</p>  <pre><code> str.append(###Lost!!###); </code></pre>  <p>Notice that, as is the case in the first example, this code invokes the append method of a StringBuffer object. Unlike the first example, however, there is no need to create a temporary StringBuffer and then convert it into a String object. This code creates only one object, the StringBuffer, at location 0.</p>  <p>In conclusion, StringBuffer concatenation is significantly faster than String concatenation. Obviously, StringBuffers should be used in this type of operation when possible. If the functionality of the String class is desired, consider using a StringBuffer for concatenation and then performing one conversion to String.</p>     </div>', 0),
(531, 207, '  String is immutable, meaning that when you perform an operation on a String you are really creating a whole new String.  StringBuffer is mutable, and you can append to it as well as reset its length to 0.  In practice, the compiler seems to use StringBuffer during String concatenation for performance reasons.     ', '<div class=###post-text### itemprop=###text###>  <p>String is immutable, meaning that when you perform an operation on a String you are really creating a whole new String.</p>  <p><a href=###http://download.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html### rel=###nofollow###>StringBuffer</a> is mutable, and you can append to it as well as reset its length to 0.</p>  <p>In practice, the compiler seems to use StringBuffer during String concatenation <a href=###http://intgat.tigress.co.uk/rmy/jopt/opt7.html### rel=###nofollow###>for performance reasons</a>.</p>     </div>', 1),
(532, 207, '  String is immutable.    Why? Check here.  StringBuffer is not. It is thread safe.    Further questions like when to use which and other concepts can be figured out following this.  Hope this helps.     ', '<div class=###post-text### itemprop=###text###>  <pre><code>String is immutable.  </code></pre>  <p>Why? Check <a href=###http://www.acquireandinspire.org/2013/01/why-is-string-made-immutable.html### rel=###nofollow###>here</a>.</p>  <pre><code>StringBuffer is not. It is thread safe.  </code></pre>  <p>Further questions like when to use which and other concepts can be figured out following <a href=###http://www.acquireandinspire.org/2013/01/string-string-builder-string-buffer.html### rel=###nofollow###>this</a>.</p>  <p>Hope this helps.</p>     </div>', 0),
(533, 207, '  While I understand that this is not a major differentiating factor, I noticed today that StringBuffer(and StringBuilder) provides some interesting methods that String doesnt.   reverse() setCharAt()      ', '<div class=###post-text### itemprop=###text###>  <p>While I understand that this is not a major differentiating factor, I noticed today that StringBuffer(and StringBuilder) provides some interesting methods that String doesn&&&t.</p>  <ul> <li>reverse()</li> <li>setCharAt()</li> </ul>     </div>', 0),
(534, 207, 'hello', 'hello', 0),
(535, 207, 'While I understand that this is not a major differentiating factor, I noticed today that StringBuffer(and StringBuilder) provides some interesting methods that String doesn&&&t.  reverse() setCharAt()', 'While I understand that this is not a major differentiating factor, I noticed today that StringBuffer(and StringBuilder) provides some interesting methods that String doesn&&&t.  reverse() setCharAt()', 0),
(536, 201, '  Definition - Method overloading deals with the notion of having two or more methods(functions) in the same class with the same name but different arguments.  While Method overriding means having two methods with the same arguments, but different implementation. One of them would exist in the Parent class (Base Class) while another will be in the derived class(Child Class).@Override annotation is required for this. See comments below.     ', '<div class=###post-text### itemprop=###text###>  <p>Definition - Method <strong>overloading</strong> deals with the notion of having two or more methods(functions) in the same class with the same name but different arguments.</p>  <p>While Method <strong>overriding</strong> means having two methods with the same arguments, but different implementation. One of them would exist in the Parent class (Base Class) while another will be in the derived class(Child Class).<strike>@Override annotation is required for this.</strike> See comments below.</p>     </div>', 1),
(537, 201, '  Method overriding is when a child class redefines the same method as a parent class, with the same parameters. For example, the standard Java class java.util.LinkedHashSet extends java.util.HashSet. The method add() is overridden in LinkedHashSet. If you have a variable that is of type HashSet, and you call its add() method, it will call the appropriate implementation of add(), based on whether it is a HashSet or a LinkedHashSet. This is called polymorphism.   Method overloading is defining several methods in the same class, that accept different numbers and types of parameters. In this case, the actual method called is decided at compile-time, based on the number and types of arguments. For instance, the method System.out.println() is overloaded, so that you can pass ints as well as Strings, and it will call a different version of the method.     ', '<div class=###post-text### itemprop=###text###>  <p><strong>Method overriding</strong> is when a child class redefines the same method as a parent class, with the same parameters. <em>For example</em>, the standard Java class <code>java.util.LinkedHashSet</code> extends <code>java.util.HashSet</code>. The method <code>add()</code> is overridden in <code>LinkedHashSet</code>. If you have a variable that is of type <code>HashSet</code>, and you call its <code>add()</code> method, it will call the appropriate implementation of <code>add()</code>, based on whether it is a <code>HashSet</code> or a <code>LinkedHashSet</code>. This is called polymorphism. </p>  <p><strong>Method overloading</strong> is defining several methods in the same class, that accept different numbers and types of parameters. In this case, the actual method called is decided at compile-time, based on the number and types of arguments. <em>For instance</em>, the method <code>System.out.println()</code> is overloaded, so that you can pass ints as well as Strings, and it will call a different version of the method.</p>     </div>', 1),
(538, 207, 'hey', 'hey', 1),
(539, 203, 'hey', 'hey', 0),
(540, 203, 'nandy', 'nandy', 0),
(544, 101, 'There are several differences between HashMap and Hashtable in Java:\r\n\r\nHashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.\r\n\r\nHashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.\r\n\r\nOne of HashMap''s subclasses is LinkedHashMap, so in the event that you''d want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn''t be as easy if you were using Hashtable.\r\n\r\nSince synchronization is not an issue for you, I''d recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.', 'There are several differences between HashMap and Hashtable in Java:\r\n\r\nHashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.\r\n\r\nHashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.\r\n\r\nOne of HashMap''s subclasses is LinkedHashMap, so in the event that you''d want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn''t be as easy if you were using Hashtable.\r\n\r\nSince synchronization is not an issue for you, I''d recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.', 1),
(545, 101, 'Note, that a lot of the answers state that Hashtable is synchronised. In practice this buys you very little. The synchronization is on the accessor / mutator methods will stop two threads adding or removing from the map concurrently, but in the real world you will often need additional synchronisation.\r\n\r\nA very common idiom is to "check then put" - i.e. look for an entry in the Map, and add it if it does not already exist. This is not in any way an atomic operation whether you use Hashtable or HashMap.\r\n\r\nAn equivalently synchronised HashMap can be obtained by:\r\n\r\nCollections.synchronizedMap(myMap);\r\nBut to correctly implement this logic you need additional synchronisation of the form:\r\n\r\nsynchronized(myMap) {\r\n    if (!myMap.containsKey("tomato"))\r\n        myMap.put("tomato", "red");\r\n}\r\nEven iterating over a Hashtable''s entries (or a HashMap obtained by Collections.synchronizedMap) is not thread safe unless you also guard the Map from being modified through additional synchronization.\r\n\r\nImplementations of the ConcurrentMap interface (for example ConcurrentHashMap) solve some of this by including thread safe check-then-act semantics such as:\r\n\r\nConcurrentMap.putIfAbsent(key, value);', 'Note, that a lot of the answers state that Hashtable is synchronised. In practice this buys you very little. The synchronization is on the accessor / mutator methods will stop two threads adding or removing from the map concurrently, but in the real world you will often need additional synchronisation.\r\n\r\nA very common idiom is to "check then put" - i.e. look for an entry in the Map, and add it if it does not already exist. This is not in any way an atomic operation whether you use Hashtable or HashMap.\r\n\r\nAn equivalently synchronised HashMap can be obtained by:\r\n\r\nCollections.synchronizedMap(myMap);\r\nBut to correctly implement this logic you need additional synchronisation of the form:\r\n\r\nsynchronized(myMap) {\r\n    if (!myMap.containsKey("tomato"))\r\n        myMap.put("tomato", "red");\r\n}\r\nEven iterating over a Hashtable''s entries (or a HashMap obtained by Collections.synchronizedMap) is not thread safe unless you also guard the Map from being modified through additional synchronization.\r\n\r\nImplementations of the ConcurrentMap interface (for example ConcurrentHashMap) solve some of this by including thread safe check-then-act semantics such as:\r\n\r\nConcurrentMap.putIfAbsent(key, value);', 0),
(546, 101, 'No one''s mentioned the fact that Hashtable is not part of the Java Collections Framework - it just provides a similar API. Also, Hashtable is considered legacy code. There''s nothing about Hashtable that can''t be done using HashMap or derivations of HashMap, so for new code, I don''t see any justification for going back to Hashtable.', 'No one''s mentioned the fact that Hashtable is not part of the Java Collections Framework - it just provides a similar API. Also, Hashtable is considered legacy code. There''s nothing about Hashtable that can''t be done using HashMap or derivations of HashMap, so for new code, I don''t see any justification for going back to Hashtable.', 1),
(547, 101, 'This question is often asked in interview to check whether candidate understands correct usage of collection classes and is aware of alternative solutions available.\r\n\r\nThe HashMap class is roughly equivalent to Hashtable, except that it is non synchronized and permits nulls. (HashMap allows null values as key and value whereas Hashtable doesn''t allow nulls).\r\nHashMap does not guarantee that the order of the map will remain constant over time.\r\nHashMap is non synchronized whereas Hashtable is synchronized.\r\nIterator in the HashMap is fail-safe while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally by adding or removing any element except Iterator''s own remove() method. But this is not a guaranteed behavior and will be done by JVM on best effort.\r\nNote on Some Important Terms\r\n\r\nSynchronized means only one thread can modify a hash table at one point of time. Basically, it means that any thread before performing an update on a hashtable will have to acquire a lock on the object while others will wait for lock to be released.\r\nFail-safe is relevant from the context of iterators. If an iterator has been created on a collection object and some other thread tries to modify the collection object "structurally", a concurrent modification exception will be thrown. It is possible for other threads though to invoke "set" method since it doesn''t modify the collection "structurally". However, if prior to calling "set", the collection has been modified structurally, "IllegalArgumentException" will be thrown.\r\nStructurally modification means deleting or inserting element which could effectively change the structure of map.\r\nHashMap can be synchronized by\r\n\r\nMap m = Collections.synchronizeMap(hashMap);\r\n\r\nMap provides Collection views instead of direct support for iteration via Enumeration objects. Collection views greatly enhance the expressiveness of the interface, as discussed later in this section. Map allows you to iterate over keys, values, or key-value pairs; Hashtable does not provide the third option. Map provides a safe way to remove entries in the midst of iteration; Hashtable did not. Finally, Map fixes a minor deficiency in the Hashtable interface. Hashtable has a method called contains, which returns true if the Hashtable contains a given value. Given its name, you''d expect this method to return true if the Hashtable contained a given key, because the key is the primary access mechanism for a Hashtable. The Map interface eliminates this source of confusion by renaming the method containsValue. Also, this improves the interface''s consistency — containsValue parallels containsKey.\r\n\r\nThe Map Interface\r\n', 'This question is often asked in interview to check whether candidate understands correct usage of collection classes and is aware of alternative solutions available.\r\n\r\nThe HashMap class is roughly equivalent to Hashtable, except that it is non synchronized and permits nulls. (HashMap allows null values as key and value whereas Hashtable doesn''t allow nulls).\r\nHashMap does not guarantee that the order of the map will remain constant over time.\r\nHashMap is non synchronized whereas Hashtable is synchronized.\r\nIterator in the HashMap is fail-safe while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally by adding or removing any element except Iterator''s own remove() method. But this is not a guaranteed behavior and will be done by JVM on best effort.\r\nNote on Some Important Terms\r\n\r\nSynchronized means only one thread can modify a hash table at one point of time. Basically, it means that any thread before performing an update on a hashtable will have to acquire a lock on the object while others will wait for lock to be released.\r\nFail-safe is relevant from the context of iterators. If an iterator has been created on a collection object and some other thread tries to modify the collection object "structurally", a concurrent modification exception will be thrown. It is possible for other threads though to invoke "set" method since it doesn''t modify the collection "structurally". However, if prior to calling "set", the collection has been modified structurally, "IllegalArgumentException" will be thrown.\r\nStructurally modification means deleting or inserting element which could effectively change the structure of map.\r\nHashMap can be synchronized by\r\n\r\nMap m = Collections.synchronizeMap(hashMap);\r\n\r\nMap provides Collection views instead of direct support for iteration via Enumeration objects. Collection views greatly enhance the expressiveness of the interface, as discussed later in this section. Map allows you to iterate over keys, values, or key-value pairs; Hashtable does not provide the third option. Map provides a safe way to remove entries in the midst of iteration; Hashtable did not. Finally, Map fixes a minor deficiency in the Hashtable interface. Hashtable has a method called contains, which returns true if the Hashtable contains a given value. Given its name, you''d expect this method to return true if the Hashtable contained a given key, because the key is the primary access mechanism for a Hashtable. The Map interface eliminates this source of confusion by renaming the method containsValue. Also, this improves the interface''s consistency — containsValue parallels containsKey.\r\n\r\nThe Map Interface\r\n', 1),
(548, 101, 'Beside all the other important aspects already mentioned here, Collections API (e.g. Map interface) is being modified all the time to conform to the "latest and greatest" additions to Java spec.\n\nFor example, compare Java 5 Map iterating:\n\nfor (Elem elem : map.keys()) {\n  elem.doSth();\n}\nversus the old Hashtable approach:\n\nfor (Enumeration en = htable.keys(); en.hasMoreElements(); ) {\n  Elem elem = (Elem) en.nextElement();\n  elem.doSth();\n}\nIn Java 1.8 we are also promised to be able to construct and access HashMaps like in good old scripting languages:\n\nMap<String,Integer> map = { "orange" : 12, "apples" : 15 };\nmap["apples"];\nUpdate: No, they won''t land in 1.8... :(\n\nAre Project Coin''s collection enhancements going to be in JDK8?', 'Beside all the other important aspects already mentioned here, Collections API (e.g. Map interface) is being modified all the time to conform to the "latest and greatest" additions to Java spec.\n\nFor example, compare Java 5 Map iterating:\n\nfor (Elem elem : map.keys()) {\n  elem.doSth();\n}\nversus the old Hashtable approach:\n\nfor (Enumeration en = htable.keys(); en.hasMoreElements(); ) {\n  Elem elem = (Elem) en.nextElement();\n  elem.doSth();\n}\nIn Java 1.8 we are also promised to be able to construct and access HashMaps like in good old scripting languages:\n\nMap<String,Integer> map = { "orange" : 12, "apples" : 15 };\nmap["apples"];\nUpdate: No, they won''t land in 1.8... :(\n\nAre Project Coin''s collection enhancements going to be in JDK8?', 0),
(549, 101, 'In addition to what izb said, HashMap allows null values, whereas the Hashtable does not.\r\n\r\nAlso note that Hashtable extends the Dictionary class, which as the Javadocs state, is obsolete and has been replaced by the Map interface.\r\n', 'In addition to what izb said, HashMap allows null values, whereas the Hashtable does not.\r\n\r\nAlso note that Hashtable extends the Dictionary class, which as the Javadocs state, is obsolete and has been replaced by the Map interface.\r\n', 1),
(550, 101, 'Take a look at this chart. It provides comparisons between different data structures along with HashMap and Hashtable. The comparison is precise, clear and easy to understand.\r\n\r\nJava Collection Matrix\r\n', 'Take a look at this chart. It provides comparisons between different data structures along with HashMap and Hashtable. The comparison is precise, clear and easy to understand.\r\n\r\nJava Collection Matrix\r\n', 1),
(551, 101, 'Hashtable is similar to the HashMap and has a similar interface. It is recommended that you use HashMap, unless you require support for legacy applications or you need synchronisation, as the Hashtables methods are synchronised. So in your case as you are not multi-threading, HashMaps are your best bet.', 'Hashtable is similar to the HashMap and has a similar interface. It is recommended that you use HashMap, unless you require support for legacy applications or you need synchronisation, as the Hashtables methods are synchronised. So in your case as you are not multi-threading, HashMaps are your best bet.', 1),
(552, 101, 'Another key difference between hashtable and hashmap is that Iterator in the HashMap is fail-fast while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally by adding or removing any element except Iterator''s own remove() method. But this is not a guaranteed behavior and will be done by JVM on best effort."\r\n\r\nMy source: http://javarevisited.blogspot.com/2010/10/difference-between-hashmap-and.html', 'Another key difference between hashtable and hashmap is that Iterator in the HashMap is fail-fast while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally by adding or removing any element except Iterator''s own remove() method. But this is not a guaranteed behavior and will be done by JVM on best effort."\r\n\r\nMy source: http://javarevisited.blogspot.com/2010/10/difference-between-hashmap-and.html', 1),
(553, 101, 'HashTable is synchronized, if you are using it in a single thread you can use HashMap, which is an unsynchronized version. Unsynchronized objects are often a little more performant. By the way if multiple threads access a HashMap concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. Youn can wrap a unsynchronized map in a synchronized one using :\r\n\r\nMap m = Collections.synchronizedMap(new HashMap(...));\r\nHashTable can only contain non-null object as a key or as a value. HashMap can contain one null key and null values.\r\n\r\nThe iterators returned by Map are fail-fast, if the map is structurally modified at any time after the iterator is created, in any way except through the iterator''s own remove method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Whereas the Enumerations returned by Hashtable''s keys and elements methods are not fail-fast.\r\n\r\nHashTable and HashMap are member of the Java Collections Framework (since Java 2 platform v1.2, HashTable was retrofitted to implement the Map interface).\r\n\r\nHashTable is considered legacy code, the documentation advise to use ConcurrentHashMap in place of Hashtable if a thread-safe highly-concurrent implementation is desired.\r\n\r\nHashMap doesn''t guarantee the order in which elements are returned. For HashTable I guess it''s the same but I''m not entirely sure, I don''t find ressource that clearly state that.', 'HashTable is synchronized, if you are using it in a single thread you can use HashMap, which is an unsynchronized version. Unsynchronized objects are often a little more performant. By the way if multiple threads access a HashMap concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. Youn can wrap a unsynchronized map in a synchronized one using :\r\n\r\nMap m = Collections.synchronizedMap(new HashMap(...));\r\nHashTable can only contain non-null object as a key or as a value. HashMap can contain one null key and null values.\r\n\r\nThe iterators returned by Map are fail-fast, if the map is structurally modified at any time after the iterator is created, in any way except through the iterator''s own remove method, the iterator will throw a ConcurrentModificationException. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Whereas the Enumerations returned by Hashtable''s keys and elements methods are not fail-fast.\r\n\r\nHashTable and HashMap are member of the Java Collections Framework (since Java 2 platform v1.2, HashTable was retrofitted to implement the Map interface).\r\n\r\nHashTable is considered legacy code, the documentation advise to use ConcurrentHashMap in place of Hashtable if a thread-safe highly-concurrent implementation is desired.\r\n\r\nHashMap doesn''t guarantee the order in which elements are returned. For HashTable I guess it''s the same but I''m not entirely sure, I don''t find ressource that clearly state that.', 1),
(554, 101, 'Hashtable is synchronized, whereas HashMap isn''t. That makes Hashtable slower than Hashmap.\r\n\r\nFor non-threaded apps, use HashMap since they are otherwise the same in terms of functionality.', 'Hashtable is synchronized, whereas HashMap isn''t. That makes Hashtable slower than Hashmap.\r\n\r\nFor non-threaded apps, use HashMap since they are otherwise the same in terms of functionality.', 1),
(555, 101, 'HashMap and Hashtable have significant algorithmic differences as well. No one has mentioned this before so that''s why I am bringing it up. HashMap will construct a hash table with power of two size, increase it dynamically such that you have at most about eight elements (collisions) in any bucket and will stir the elements very well for general element types. However, the Hashtable implementation provides better and finer control over the hashing if you know what you are doing, namely you can fix the table size using e.g. the closest prime number to your values domain size and this will result in better performance than HashMap i.e. less collisions for some cases.\r\n\r\nSeparate from the obvious differences discussed extensively in this question, I see the Hashtable as a "manual drive" car where you have better control over the hashing and the HashMap as the "automatic drive" counterpart that will generally perform well.', 'HashMap and Hashtable have significant algorithmic differences as well. No one has mentioned this before so that''s why I am bringing it up. HashMap will construct a hash table with power of two size, increase it dynamically such that you have at most about eight elements (collisions) in any bucket and will stir the elements very well for general element types. However, the Hashtable implementation provides better and finer control over the hashing if you know what you are doing, namely you can fix the table size using e.g. the closest prime number to your values domain size and this will result in better performance than HashMap i.e. less collisions for some cases.\r\n\r\nSeparate from the obvious differences discussed extensively in this question, I see the Hashtable as a "manual drive" car where you have better control over the hashing and the HashMap as the "automatic drive" counterpart that will generally perform well.', 1),
(556, 101, 'Based on the info here, I''d recommend going with HashMap. I think the biggest advantage is that Java will prevent you from modifying it while you are iterating over it, unless you do it through the iterator.', 'Based on the info here, I''d recommend going with HashMap. I think the biggest advantage is that Java will prevent you from modifying it while you are iterating over it, unless you do it through the iterator.', 0),
(557, 101, 'For threaded apps, you can often get away with ConcurrentHashMap- depends on your performance requirements.', 'For threaded apps, you can often get away with ConcurrentHashMap- depends on your performance requirements.', 0),
(558, 101, '1)Hashtable is synchronized whereas hashmap is not. 2)Another difference is that iterator in the HashMap is fail-safe while the enumerator for the Hashtable isn''t. If you change the map while iterating, you''ll know.\r\n\r\n3)HashMap permits null values in it, while Hashtable doesn''t', '1)Hashtable is synchronized whereas hashmap is not. 2)Another difference is that iterator in the HashMap is fail-safe while the enumerator for the Hashtable isn''t. If you change the map while iterating, you''ll know.\r\n\r\n3)HashMap permits null values in it, while Hashtable doesn''t', 1),
(559, 102, 'So pretend you''re building a house. The first thing you would need is to create a frame for the house - the doors, the windows, the rooms, the hallways, etc. That''s basically what HTML does - it sets up the site. HTML is also used whenever you write a page or post on your website - it''s the language you primarily use to type in. \r\n\r\nGoing back to the same analogy, whenever you paint a room in your house or add a piece of furniture or decor, that relates to CSS. CSS changes the colors, fonts, etc of the site and makes it more elegant. \r\n\r\nJavaScript doesn''t have quite as big of a role as CSS or HTML in web design (the majority of websites tend to use something called PHP instead of JavaScript), but if you do use JavaScript it''s probably to make clickable elements on your site.', 'So pretend you''re building a house. The first thing you would need is to create a frame for the house - the doors, the windows, the rooms, the hallways, etc. That''s basically what HTML does - it sets up the site. HTML is also used whenever you write a page or post on your website - it''s the language you primarily use to type in. \r\n\r\nGoing back to the same analogy, whenever you paint a room in your house or add a piece of furniture or decor, that relates to CSS. CSS changes the colors, fonts, etc of the site and makes it more elegant. \r\n\r\nJavaScript doesn''t have quite as big of a role as CSS or HTML in web design (the majority of websites tend to use something called PHP instead of JavaScript), but if you do use JavaScript it''s probably to make clickable elements on your site.', 1),
(560, 102, 'CSS stands for Cascading Style Sheets, and is used in programming to allow a set of similar pages to look the same and with the same format. HTML is the basic programming language used to code and design homepages and things like that. In Google Chrome, if you right click something and then click on ''inspect element'' it will actually display the HTML coding of that specific page and specific item. I don''t know about JavaScript, but there are many books availible to learn what it is and how to code it such as ''JavaScript for dummies''. I hope this was helpful.\r\n', 'CSS stands for Cascading Style Sheets, and is used in programming to allow a set of similar pages to look the same and with the same format. HTML is the basic programming language used to code and design homepages and things like that. In Google Chrome, if you right click something and then click on ''inspect element'' it will actually display the HTML coding of that specific page and specific item. I don''t know about JavaScript, but there are many books availible to learn what it is and how to code it such as ''JavaScript for dummies''. I hope this was helpful.\r\n', 1),
(561, 102, 'CSS and HTML is more of a blend of what it should have started with, but CSS was quite late on the scene before prior versions of HTML was tainted with visual design tags. \r\n\r\nConsider CSS/JavaScript/HTML interacts this way: HTML describes and organizes the data, CSS injects and represents the data visually, JavaScript provides the programming to the entire app.', 'CSS and HTML is more of a blend of what it should have started with, but CSS was quite late on the scene before prior versions of HTML was tainted with visual design tags. \r\n\r\nConsider CSS/JavaScript/HTML interacts this way: HTML describes and organizes the data, CSS injects and represents the data visually, JavaScript provides the programming to the entire app.', 1);
INSERT INTO `response` (`r_id`, `q_id`, `resp`, `resp_disp`, `classify`) VALUES
(562, 102, 'It is just as they sad, you do some code in html, where you make a webpage, than use css to make your page look very nice and at the end make some interactive animations like slides with javascript.. \r\nYou can find a lot of tutorials on youtube about this.. It''s very interesting', 'It is just as they sad, you do some code in html, where you make a webpage, than use css to make your page look very nice and at the end make some interactive animations like slides with javascript.. \r\nYou can find a lot of tutorials on youtube about this.. It''s very interesting', 0),
(563, 102, 'Java Script doesn''t have quite as big of a role as CSS or HTML in web design (the majority of websites tend to use something called PHP instead of JavaScript), but if you do use JavaScript it''s probably to make clickable elements on your site', 'Java Script doesn''t have quite as big of a role as CSS or HTML in web design (the majority of websites tend to use something called PHP instead of JavaScript), but if you do use JavaScript it''s probably to make clickable elements on your site', 1),
(564, 102, 'Html is hyper text markup language is used to form the basic structure of web page , were as CSS is Cascading Style sheet which consist of style format specification structure used in html like height, width, color etc. \r\n\r\nJavascript is a programming language.', 'Html is hyper text markup language is used to form the basic structure of web page , were as CSS is Cascading Style sheet which consist of style format specification structure used in html like height, width, color etc. \r\n\r\nJavascript is a programming language.', 1),
(565, 102, 'Cascading Style Sheets (CSS) is a style sheet language used for describing the look and formatting of a document written in a markup language. \r\n\r\nJavaScript is the programming language of HTML and the Web. Programming makes computers do what you want them to do. This tutorial will teach you JavaScript from basic to advanced. \r\n\r\n\r\nHTML is the language that describes the structure and the semantic content of a web document. Content within a web page is tagged with HTML elements such as <img> , <title> , <p> , <div> , <picture> , and so forth. These elements form the building blocks of a website.', 'Cascading Style Sheets (CSS) is a style sheet language used for describing the look and formatting of a document written in a markup language. \r\n\r\nJavaScript is the programming language of HTML and the Web. Programming makes computers do what you want them to do. This tutorial will teach you JavaScript from basic to advanced. \r\n\r\n\r\nHTML is the language that describes the structure and the semantic content of a web document. Content within a web page is tagged with HTML elements such as <img> , <title> , <p> , <div> , <picture> , and so forth. These elements form the building blocks of a website.', 1),
(566, 102, 'Html is the code usually used to design text boxes button combo boxes ECt css colors them or adds effects to them while JavaScript is a code used to have each one have some effct', 'Html is the code usually used to design text boxes button combo boxes ECt css colors them or adds effects to them while JavaScript is a code used to have each one have some effct', 1),
(567, 102, 'its very easy, in general its a three different of web developing languages. html is basically what the web contain the text the links the , the CSS is the Style Sheet, it place everything in the order you want, also colors fonts and backgrounds. the java script make the website more interactive.\r\n', 'its very easy, in general its a three different of web developing languages. html is basically what the web contain the text the links the , the CSS is the Style Sheet, it place everything in the order you want, also colors fonts and backgrounds. the java script make the website more interactive.\r\n', 0),
(568, 102, 'HTML: you put tags to create the structure of the webpage. IE: <h1>My Title</h1> \r\nCSS: you put style on the HTML tags. IE: h1 { font-size: 30px; } \r\nJavascript: You program a webpage to have some behabiour. IE: document.getElementByTagName(''h1'').addEv... function() { alert(''hello world'')})', 'HTML: you put tags to create the structure of the webpage. IE: <h1>My Title</h1> \r\nCSS: you put style on the HTML tags. IE: h1 { font-size: 30px; } \r\nJavascript: You program a webpage to have some behabiour. IE: document.getElementByTagName(''h1'').addEv... function() { alert(''hello world'')})', 0),
(569, 102, 'These are basic languages used in website designing.', 'These are basic languages used in website designing.', 0),
(570, 102, 'Tools for web designing . . .', 'Tools for web designing . . .', 0),
(571, 102, 'These are formation tools for web designing . . .', 'These are formation tools for web designing . . .', 0),
(572, 102, 'Make the effort of visiting w3schools.com and read about all of them. \r\nYou will learn more than you can do here.', 'Make the effort of visiting w3schools.com and read about all of them. \r\nYou will learn more than you can do here.', 0),
(573, 103, 'you download your printer Driver. Hp Deskjet 1050 J410 you can install printer driver for your computer. \r\nThan you can use easily your printer. Thank you.\r\n', 'you download your printer Driver. Hp Deskjet 1050 J410 you can install printer driver for your computer. \r\nThan you can use easily your printer. Thank you.\r\n', 0),
(574, 103, 'Do not hurry software/CD to install your printer into your Laptop. Just go control panel you click printers/devices and select Add Printer.Then if you connect to a network you provide IP address of the Printer. If local connections required you install your printer directly with the actual printer cable from computer to printer as manual method.\r\n', 'Do not hurry software/CD to install your printer into your Laptop. Just go control panel you click printers/devices and select Add Printer.Then if you connect to a network you provide IP address of the Printer. If local connections required you install your printer directly with the actual printer cable from computer to printer as manual method.\r\n', 1),
(575, 103, 'Just download the installation program from HP''s website. It''s probably a newer version than what was on the CD, anyway, so why do you want to bother with the CD?\r\n', 'Just download the installation program from HP''s website. It''s probably a newer version than what was on the CD, anyway, so why do you want to bother with the CD?\r\n', 1),
(576, 103, 'Here''s the HP link that should help. Be sure to save the file and make a copy on a CD or flash drive in case you need to re-install the driver again. \r\n\r\nhttp://support.hp.com/us-en/drivers/', 'Here''s the HP link that should help. Be sure to save the file and make a copy on a CD or flash drive in case you need to re-install the driver again. \r\n\r\nhttp://support.hp.com/us-en/drivers/', 1),
(577, 103, 'You can get the files straight from HP''s website in a bundled form. You don''t need the CD.\r\n', 'You can get the files straight from HP''s website in a bundled form. You don''t need the CD.\r\n', 0),
(578, 103, 'Get the Download from HP web site!\r\n', 'Get the Download from HP web site!\r\n', 0),
(579, 103, 'Download the driver from Hp''s website.....\r\n', 'Download the driver from Hp''s website.....\r\n', 1),
(580, 103, 'Best option download online\r\n', 'Best option download online\r\n', 0),
(581, 103, 'you should be able to download the latest drivers from the HP website, you have the make and model so there shouldn''t be an issue?\r\n', 'you should be able to download the latest drivers from the HP website, you have the make and model so there shouldn''t be an issue?\r\n', 1),
(582, 103, 'You can download this driver software from internet.\r\n', 'You can download this driver software from internet.\r\n', 0),
(583, 103, 'print it on a USB and go to bestbuy', 'print it on a USB and go to bestbuy', 0),
(584, 103, 'Did you get it working///????', 'Did you get it working///????', 0),
(585, 103, 'i also, what to do', 'i also, what to do', 0),
(586, 103, 'select your operating system and download the software\r\nSource(s):\r\nhttp://support.hp.com/us-en/product/HP-D...', 'select your operating system and download the software\r\nSource(s):\r\nhttp://support.hp.com/us-en/product/HP-D...', 0),
(587, 103, 'You can download this driver software from internet.', 'You can download this driver software from internet.', 0),
(588, 206, 'You forget the tricky 2nd difference between classes and structs.\r\n\r\nQuoth the standard (11.2.2):\r\n\r\nIn absence of an access-specifier for a base class, public is assumed when the derived class is declared struct and private is assumed when the class is declared class.\r\nAnd just for completeness'' sake, the more widely known difference between class and struct is defined in (11.2):\r\n\r\nMember of a class defined with the keyword class are private by default. Members of a class defined with the keywords struct or union are public by default.', 'You forget the tricky 2nd difference between classes and structs.\r\n\r\nQuoth the standard (11.2.2):\r\n\r\nIn absence of an access-specifier for a base class, public is assumed when the derived class is declared struct and private is assumed when the class is declared class.\r\nAnd just for completeness'' sake, the more widely known difference between class and struct is defined in (11.2):\r\n\r\nMember of a class defined with the keyword class are private by default. Members of a class defined with the keywords struct or union are public by default.', 1),
(589, 206, 'What''s the difference between the keywords struct and class?\r\n\r\nThe members and base classes of a struct are public by default, while in class, they default to private. Note: you should make your base classes explicitly public, private, or protected, rather than relying on the defaults.\r\n\r\nStruct and class are otherwise functionally equivalent.\r\n\r\nOK, enough of that squeaky clean techno talk. Emotionally, most developers make a strong distinction between a class and a struct. A struct simply feels like an open pile of bits with very little in the way of encapsulation or functionality. A class feels like a living and responsible member of society with intelligent services, a strong encapsulation barrier, and a well defined interface. Since that''s the connotation most people already have, you should probably use the struct keyword if you have a class that has very few methods and has public data (such things do exist in well designed systems!), but otherwise you should probably use the class keyword.', 'What''s the difference between the keywords struct and class?\r\n\r\nThe members and base classes of a struct are public by default, while in class, they default to private. Note: you should make your base classes explicitly public, private, or protected, rather than relying on the defaults.\r\n\r\nStruct and class are otherwise functionally equivalent.\r\n\r\nOK, enough of that squeaky clean techno talk. Emotionally, most developers make a strong distinction between a class and a struct. A struct simply feels like an open pile of bits with very little in the way of encapsulation or functionality. A class feels like a living and responsible member of society with intelligent services, a strong encapsulation barrier, and a well defined interface. Since that''s the connotation most people already have, you should probably use the struct keyword if you have a class that has very few methods and has public data (such things do exist in well designed systems!), but otherwise you should probably use the class keyword.', 1),
(590, 206, 'Here is a good explanation: http://carcino.gen.nz/tech/cpp/struct_vs_class.php', 'Here is a good explanation: http://carcino.gen.nz/tech/cpp/struct_vs_class.php', 0),
(591, 206, 'It''s worth remembering C++''s origins in, and compatibility with, C.\r\n\r\nC has structs, it has no concept of encapsulation, so everything is public.\r\n\r\nBeing public by default is generally considered a bad idea when taking an object-oriented approach, so in making a form of C that is natively conducive to OOP (you can do OO in C, but it won''t help you) which was the idea in C++ (originally "C With Classes"), it makes sense to make members private by default.\r\n\r\nOn the other hand, if Stroustrup had changed the semantics of struct so that its members where private by default, it would have broken compatibility (it is no longer as often true as the standards diverged, but all valid C programs were also valid C++ programs, which had a big effect on giving C++ a foothold).\r\n\r\nSo a new keyword, class was introduced to be exactly like a struct, but private by default.\r\n\r\nIf C++ had come from scratch, with no history, then it would probably have only one such keyword. It also probably wouldn''t have made the impact it made.\r\n\r\nIn general, people will tend to use struct when they are doing something like how structs are used in C; public members, no constructor (as long as it isn''t in a union, you can have constructors in structs, just like with classes, but people tend not to), no virtual methods, etc. Since languages are as much to communicate with people reading the code as to instruct machines (or else we''d stick with assembly and raw VM opcodes) it''s a good idea to stick with that.', 'It''s worth remembering C++''s origins in, and compatibility with, C.\r\n\r\nC has structs, it has no concept of encapsulation, so everything is public.\r\n\r\nBeing public by default is generally considered a bad idea when taking an object-oriented approach, so in making a form of C that is natively conducive to OOP (you can do OO in C, but it won''t help you) which was the idea in C++ (originally "C With Classes"), it makes sense to make members private by default.\r\n\r\nOn the other hand, if Stroustrup had changed the semantics of struct so that its members where private by default, it would have broken compatibility (it is no longer as often true as the standards diverged, but all valid C programs were also valid C++ programs, which had a big effect on giving C++ a foothold).\r\n\r\nSo a new keyword, class was introduced to be exactly like a struct, but private by default.\r\n\r\nIf C++ had come from scratch, with no history, then it would probably have only one such keyword. It also probably wouldn''t have made the impact it made.\r\n\r\nIn general, people will tend to use struct when they are doing something like how structs are used in C; public members, no constructor (as long as it isn''t in a union, you can have constructors in structs, just like with classes, but people tend not to), no virtual methods, etc. Since languages are as much to communicate with people reading the code as to instruct machines (or else we''d stick with assembly and raw VM opcodes) it''s a good idea to stick with that.', 0),
(592, 206, 'Class'' members are private by default. Struct''s members are public by default. Besides that there are no other differences.', 'Class'' members are private by default. Struct''s members are public by default. Besides that there are no other differences.', 1),
(593, 206, 'According to Stroustrup in the C++ Programming Language:\r\n\r\nWhich style you use depends on circumstances and taste. I usually prefer to use struct for classes that have all data public. I think of such classes as "not quite proper types, just data structures."\r\nFunctionally, there is no difference other than the public / private', 'According to Stroustrup in the C++ Programming Language:\r\n\r\nWhich style you use depends on circumstances and taste. I usually prefer to use struct for classes that have all data public. I think of such classes as "not quite proper types, just data structures."\r\nFunctionally, there is no difference other than the public / private', 1),
(594, 206, 'STRUCT is a type of Abstract Data Type that divides up a given chunk of memory according to the structure specification. Structs are particularly useful in file serialization/deserialization as the structure can often be written to the file verbatim. (i.e. Obtain a pointer to the struct, use the SIZE macro to compute the number of bytes to copy, then move the data in or out of the struct.)\r\n\r\nClasses are a different type of abstract data type that attempt to ensure information hiding. Internally, there can be a variety of machinations, methods, temp variables, state variables. etc. that are all used to present a consistent API to any code which wishes to use the class.\r\n\r\nIn effect, structs are about data, classes are about code.\r\n\r\nHowever, you do need to understand that these are merely abstractions. It''s perfectly possible to create structs that look a lot like classes and classes that look a lot like structs. In fact, the earliest C++ compilers were merely pre-compilers that translates C++ code to C. Thus these abstractions are a benefit to logical thinking, not necessarily an asset to the computer itself.\r\n\r\nBeyond the fact that each is a different type of abstraction, Classes provide solutions to the C code naming puzzle. Since you can''t have more than one function exposed with the same name, developers used to follow a pattern of _(). e.g. mathlibextreme_max(). By grouping APIs into classes, similar functions (here we call them "methods") can be grouped together and protected from the naming of methods in other classes. This allows the programmer to organize his code better and increase code reuse. In theory, at least.', 'STRUCT is a type of Abstract Data Type that divides up a given chunk of memory according to the structure specification. Structs are particularly useful in file serialization/deserialization as the structure can often be written to the file verbatim. (i.e. Obtain a pointer to the struct, use the SIZE macro to compute the number of bytes to copy, then move the data in or out of the struct.)\r\n\r\nClasses are a different type of abstract data type that attempt to ensure information hiding. Internally, there can be a variety of machinations, methods, temp variables, state variables. etc. that are all used to present a consistent API to any code which wishes to use the class.\r\n\r\nIn effect, structs are about data, classes are about code.\r\n\r\nHowever, you do need to understand that these are merely abstractions. It''s perfectly possible to create structs that look a lot like classes and classes that look a lot like structs. In fact, the earliest C++ compilers were merely pre-compilers that translates C++ code to C. Thus these abstractions are a benefit to logical thinking, not necessarily an asset to the computer itself.\r\n\r\nBeyond the fact that each is a different type of abstraction, Classes provide solutions to the C code naming puzzle. Since you can''t have more than one function exposed with the same name, developers used to follow a pattern of _(). e.g. mathlibextreme_max(). By grouping APIs into classes, similar functions (here we call them "methods") can be grouped together and protected from the naming of methods in other classes. This allows the programmer to organize his code better and increase code reuse. In theory, at least.', 1),
(595, 206, 'The only other difference is the default inheritance of classes and structs, which, unsurprisingly, is private and public respectively', 'The only other difference is the default inheritance of classes and structs, which, unsurprisingly, is private and public respectively', 1),
(596, 206, 'One other thing to note, if you updated a legacy app that had structs to use classes you might run into the following issue:\r\n\r\nOld code has structs, code was cleaned up and these changed to classes. A virtual function or two was then added to the new updated class.\r\n\r\nWhen virtual functions are in classes then internally the compiler will add extra pointer to the class data to point to the functions.\r\n\r\nHow this would break old legacy code is if in the old code somewhere the struct was cleared using memfill to clear it all to zeros, this would stomp the extra pointer data as well.', 'One other thing to note, if you updated a legacy app that had structs to use classes you might run into the following issue:\r\n\r\nOld code has structs, code was cleaned up and these changed to classes. A virtual function or two was then added to the new updated class.\r\n\r\nWhen virtual functions are in classes then internally the compiler will add extra pointer to the class data to point to the functions.\r\n\r\nHow this would break old legacy code is if in the old code somewhere the struct was cleared using memfill to clear it all to zeros, this would stomp the extra pointer data as well.', 1),
(597, 206, '. In classes all the members by default are private but in structure members are public by default.\r\n\r\nThere is no term like constructor and destructor for structs, but for class compiler creates default if you don''t provide.\r\n\r\nSizeof empty structure is 0 Bytes wer as Sizeof empty class is 1 Byte The struct default access type is public. A struct should typically be used for grouping data.\r\n\r\nThe class default access type is private, and the default mode for inheritance is private. A class should be used for grouping data and methods that operate on that data.\r\n\r\nIn short, the convention is to use struct when the purpose is to group data, and use classes when we require data abstraction and, perhaps inheritance.\r\n\r\nIn C++ structures and classes are passed by value, unless explicitly de-referenced. In other languages classes and structures may have distinct semantics - ie. objects (instances of classes) may be passed by reference and structures may be passed by value. Note: There are comments associated with this question. See the discussion page to add to the conversation.', '. In classes all the members by default are private but in structure members are public by default.\r\n\r\nThere is no term like constructor and destructor for structs, but for class compiler creates default if you don''t provide.\r\n\r\nSizeof empty structure is 0 Bytes wer as Sizeof empty class is 1 Byte The struct default access type is public. A struct should typically be used for grouping data.\r\n\r\nThe class default access type is private, and the default mode for inheritance is private. A class should be used for grouping data and methods that operate on that data.\r\n\r\nIn short, the convention is to use struct when the purpose is to group data, and use classes when we require data abstraction and, perhaps inheritance.\r\n\r\nIn C++ structures and classes are passed by value, unless explicitly de-referenced. In other languages classes and structures may have distinct semantics - ie. objects (instances of classes) may be passed by reference and structures may be passed by value. Note: There are comments associated with this question. See the discussion page to add to the conversation.', 1),
(598, 206, 'Not in the specification, no. The main difference is in programmer expectations when they read your code in 2 years. structs are often assumed to be POD. Structs are also used in template metaprogramming when you''re defining a type for purposes other than defining objects.', 'Not in the specification, no. The main difference is in programmer expectations when they read your code in 2 years. structs are often assumed to be POD. Structs are also used in template metaprogramming when you''re defining a type for purposes other than defining objects.', 1),
(599, 206, ')The members of a structure are public by default, the members of class are private by default. 2)Default inheritance for Structure from another structure or class is public.Default inheritance for class from another structure or class is private.\r\n\r\nclass A{    \r\npublic:    \r\n    int i;      \r\n};\r\n\r\nclass A2:A{    \r\n};\r\n\r\nstruct A3:A{    \r\n};\r\n\r\n\r\nstruct abc{    \r\n    int i;\r\n};\r\n\r\nstruct abc2:abc{    \r\n};\r\n\r\nclass abc3:abc{\r\n};\r\n\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{    \r\n    abc2 objabc;\r\n    objabc.i = 10;\r\n\r\n    A3 ob;\r\n    ob.i = 10;\r\n\r\n    //A2 obja; //privately inherited\r\n    //obja.i = 10;\r\n\r\n    //abc3 obss;\r\n    //obss.i = 10;\r\n}', ')The members of a structure are public by default, the members of class are private by default. 2)Default inheritance for Structure from another structure or class is public.Default inheritance for class from another structure or class is private.\r\n\r\nclass A{    \r\npublic:    \r\n    int i;      \r\n};\r\n\r\nclass A2:A{    \r\n};\r\n\r\nstruct A3:A{    \r\n};\r\n\r\n\r\nstruct abc{    \r\n    int i;\r\n};\r\n\r\nstruct abc2:abc{    \r\n};\r\n\r\nclass abc3:abc{\r\n};\r\n\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{    \r\n    abc2 objabc;\r\n    objabc.i = 10;\r\n\r\n    A3 ob;\r\n    ob.i = 10;\r\n\r\n    //A2 obja; //privately inherited\r\n    //obja.i = 10;\r\n\r\n    //abc3 obss;\r\n    //obss.i = 10;\r\n}', 1),
(600, 205, 'his Java tutorial may be of some use to you.\r\n\r\nModifier    | Class | Package | Subclass | World\r\n————————————+———————+—————————+——————————+———————\r\npublic      |  y    |    y    |    y     |   y\r\n————————————+———————+—————————+——————————+———————\r\nprotected   |  y    |    y    |    y     |   n\r\n————————————+———————+—————————+——————————+———————\r\nno modifier |  y    |    y    |    n     |   n    **also known as package-private**\r\n————————————+———————+—————————+——————————+———————\r\nprivate     |  y    |    n    |    n     |   n\r\n\r\ny: accessible\r\nn: not accessible', 'his Java tutorial may be of some use to you.\r\n\r\nModifier    | Class | Package | Subclass | World\r\n————————————+———————+—————————+——————————+———————\r\npublic      |  y    |    y    |    y     |   y\r\n————————————+———————+—————————+——————————+———————\r\nprotected   |  y    |    y    |    y     |   n\r\n————————————+———————+—————————+——————————+———————\r\nno modifier |  y    |    y    |    n     |   n    **also known as package-private**\r\n————————————+———————+—————————+——————————+———————\r\nprivate     |  y    |    n    |    n     |   n\r\n\r\ny: accessible\r\nn: not accessible', 1),
(601, 205, 'Private\r\n\r\nLike you''d think, only the class in which it is declared can see it.\r\n\r\nPackage Private\r\n\r\nCan only be seen and used by the package in which it was declared. This is the default in Java (which some see as a mistake).\r\n\r\nProtected\r\n\r\nPackage Private + can be seen by subclasses or package member.\r\n\r\nPublic\r\n\r\nEveryone can see it.\r\n\r\nPublished\r\n\r\nVisible outside the code I control. (While not Java syntax, it is important for this discussion).\r\n\r\nC++ defines an additional level called "friend" and the less you know about that the better.\r\n\r\nWhen should you use what? The whole idea is encapsulation to hide information. As much as possible you want to hide the detail of how something is done from your users. Why? Because then you can change them later and not break anybody''s code. This lets you optimize, refactor, redesign and fix bugs without worry that someone was using that code you just overhauled.\r\n\r\nSo, rule of thumb is to make things only as visible as they have to be. Start with private and only add more visibility as needed. Only make public that which is absolutely necessary for the user to know, every detail you make public cramps your ability to redesign the system.\r\n\r\nIf you want users to be able to customize behaviors, rather than making internals public so they can override them, it''s often a better idea to shove those guts into an object and make that interface public. That way they can simply plug in a new object. For example, if you were writing a CD player and wanted the "go find info about this CD" bit customizable, rather than make those methods public you''d put all that functionality into its own object and make just your object getter/setter public. In this way being stingy about exposing your guts encourages good composition and separation of concerns\r\n\r\nPersonally, I stick with just "private" and "public". Many OO languages just have that. "Protected" can be handy, but it''s really a cheat. Once an interface is more than private it''s outside of your control and you have to go looking in other people''s code to find uses.\r\n\r\nThis is where the idea of "published" comes in. Changing an interface (refactoring it) requires that you find all the code which is using it and change that, too. If the interface is private, well no problem. If it''s protected you have to go find all your subclasses. If it''s public you have to go find all the code which uses your code. Sometimes this is possible, for example if you''re working on corporate code that''s for internal use only it doesn''t matter if an interface is public. You can grab all the code out of the corporate repository. But if an interface is "published", if there is code using it outside your control, then you''re hosed. You must support that interface or risk breaking code. Even protected interfaces can be considered published (which is why I don''t bother with protected).\r\n\r\nMany languages find the hierarchical nature of public/protected/private to be too limiting and not in line with reality. To that end there is the concept of a trait class, but that''s another show.', 'Private\r\n\r\nLike you''d think, only the class in which it is declared can see it.\r\n\r\nPackage Private\r\n\r\nCan only be seen and used by the package in which it was declared. This is the default in Java (which some see as a mistake).\r\n\r\nProtected\r\n\r\nPackage Private + can be seen by subclasses or package member.\r\n\r\nPublic\r\n\r\nEveryone can see it.\r\n\r\nPublished\r\n\r\nVisible outside the code I control. (While not Java syntax, it is important for this discussion).\r\n\r\nC++ defines an additional level called "friend" and the less you know about that the better.\r\n\r\nWhen should you use what? The whole idea is encapsulation to hide information. As much as possible you want to hide the detail of how something is done from your users. Why? Because then you can change them later and not break anybody''s code. This lets you optimize, refactor, redesign and fix bugs without worry that someone was using that code you just overhauled.\r\n\r\nSo, rule of thumb is to make things only as visible as they have to be. Start with private and only add more visibility as needed. Only make public that which is absolutely necessary for the user to know, every detail you make public cramps your ability to redesign the system.\r\n\r\nIf you want users to be able to customize behaviors, rather than making internals public so they can override them, it''s often a better idea to shove those guts into an object and make that interface public. That way they can simply plug in a new object. For example, if you were writing a CD player and wanted the "go find info about this CD" bit customizable, rather than make those methods public you''d put all that functionality into its own object and make just your object getter/setter public. In this way being stingy about exposing your guts encourages good composition and separation of concerns\r\n\r\nPersonally, I stick with just "private" and "public". Many OO languages just have that. "Protected" can be handy, but it''s really a cheat. Once an interface is more than private it''s outside of your control and you have to go looking in other people''s code to find uses.\r\n\r\nThis is where the idea of "published" comes in. Changing an interface (refactoring it) requires that you find all the code which is using it and change that, too. If the interface is private, well no problem. If it''s protected you have to go find all your subclasses. If it''s public you have to go find all the code which uses your code. Sometimes this is possible, for example if you''re working on corporate code that''s for internal use only it doesn''t matter if an interface is public. You can grab all the code out of the corporate repository. But if an interface is "published", if there is code using it outside your control, then you''re hosed. You must support that interface or risk breaking code. Even protected interfaces can be considered published (which is why I don''t bother with protected).\r\n\r\nMany languages find the hierarchical nature of public/protected/private to be too limiting and not in line with reality. To that end there is the concept of a trait class, but that''s another show.', 0),
(602, 205, 'Easy rule. Start with declaring everything private. And then progress towards public as the needs arises and design warrant it.\r\n\r\nWhen exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce to much dependencies on the actual representation rather than it''s observable behavior.\r\n\r\nAs a general rule I try to avoid overriding method implementations by sub-classing, it''s to easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.\r\n\r\nAlso use the @Override annotation when overriding to keep things from breaking when you refactor.', 'Easy rule. Start with declaring everything private. And then progress towards public as the needs arises and design warrant it.\r\n\r\nWhen exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce to much dependencies on the actual representation rather than it''s observable behavior.\r\n\r\nAs a general rule I try to avoid overriding method implementations by sub-classing, it''s to easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.\r\n\r\nAlso use the @Override annotation when overriding to keep things from breaking when you refactor.', 0),
(603, 205, 'It''s actually a bit more complicated than a simple grid shows. The grid tells you whether an access is allowed, but what exactly constitutes an access? Also, access levels interact with nested classes and inheritance in complex ways.\r\n\r\nThe "default" access (specified by the absence of a keyword) is also called package-private. Exception: in an interface, no modifier means public access; modifiers other than public are forbidden. Enum constants are always public.', 'It''s actually a bit more complicated than a simple grid shows. The grid tells you whether an access is allowed, but what exactly constitutes an access? Also, access levels interact with nested classes and inheritance in complex ways.\r\n\r\nThe "default" access (specified by the absence of a keyword) is also called package-private. Exception: in an interface, no modifier means public access; modifiers other than public are forbidden. Enum constants are always public.', 0),
(604, 205, '                | highest precedence <---------> lowest precedence\r\n*———————————————+————————————————+———————————+———————————————+———————\r\n \\ xCanBeSeenBy | this           | any class | this subclass | any\r\n  \\             | class          | in same   | in another    | class\r\n   \\—————————\\  | nonsubbed      | package   | package       |    \r\nModifier of x \\ |                |           |               |       \r\n————————————————*————————————————+———————————+———————————————+———————\r\npublic          |       ?        |    ?      |    ?          |   ?   \r\n————————————————+————————————————+———————————+———————————————+———————\r\nprotected       |       ?        |    ?      |    ?          |   ?   \r\n————————————————+————————————————+———————————+———————————————+———————\r\npackage-private |                |           |               |\r\n(no modifier)   |       ?        |    ?      |    ?          |   ?   \r\n————————————————+————————————————+———————————+———————————————+———————\r\nprivate         |       ?        |    ?      |    ?          |    ?   ', '                | highest precedence <---------> lowest precedence\r\n*———————————————+————————————————+———————————+———————————————+———————\r\n \\ xCanBeSeenBy | this           | any class | this subclass | any\r\n  \\             | class          | in same   | in another    | class\r\n   \\—————————\\  | nonsubbed      | package   | package       |    \r\nModifier of x \\ |                |           |               |       \r\n————————————————*————————————————+———————————+———————————————+———————\r\npublic          |       ?        |    ?      |    ?          |   ?   \r\n————————————————+————————————————+———————————+———————————————+———————\r\nprotected       |       ?        |    ?      |    ?          |   ?   \r\n————————————————+————————————————+———————————+———————————————+———————\r\npackage-private |                |           |               |\r\n(no modifier)   |       ?        |    ?      |    ?          |   ?   \r\n————————————————+————————————————+———————————+———————————————+———————\r\nprivate         |       ?        |    ?      |    ?          |    ?   ', 1),
(605, 205, 'In very short\r\n\r\nPublic are accessible from everywhere.\r\nProtected are accessible by the classes of the same package and the subclasses residing in any package.\r\nDefault are accessible by the classes of the same package.\r\nprivate are accessible within the same class only.', 'In very short\r\n\r\nPublic are accessible from everywhere.\r\nProtected are accessible by the classes of the same package and the subclasses residing in any package.\r\nDefault are accessible by the classes of the same package.\r\nprivate are accessible within the same class only.', 1),
(606, 205, 'As a rule of thumb:\r\n\r\nprivate: class scope.\r\ndefault (or package-private): package scope\r\nprotected: package scope + child (like pakage, but we can subclass it from different pakages). The protected modifier always keeps the "parent-child" relationship.\r\npublic : everywhere.\r\nAs a result, if we divide access right into three rights:\r\n\r\n(D)irect (invoke from a method inside the same class)\r\n(R)eference (invoke a method using a reference to the class, or via "dot" syntax)\r\n(I)nheritance (via subclassing)', 'As a rule of thumb:\r\n\r\nprivate: class scope.\r\ndefault (or package-private): package scope\r\nprotected: package scope + child (like pakage, but we can subclass it from different pakages). The protected modifier always keeps the "parent-child" relationship.\r\npublic : everywhere.\r\nAs a result, if we divide access right into three rights:\r\n\r\n(D)irect (invoke from a method inside the same class)\r\n(R)eference (invoke a method using a reference to the class, or via "dot" syntax)\r\n(I)nheritance (via subclassing)', 0),
(607, 205, 'Private\r\n\r\nMethods,Variables and Constructors\r\nMethods, Variables and Constructors that are declared private can only be accessed within the declared class itself.\r\n\r\nClass and Interface\r\nPrivate access modifier is the most restrictive access level. Class and interfaces cannot be private.\r\n\r\nNote\r\n\r\nVariables that are declared private can be accessed outside the class if public getter methods are present in the class. Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members'' class.\r\n\r\nProtected\r\n\r\nClass and Interface\r\nThe protected access modifier cannot be applied to class and interfaces.\r\n\r\nMethods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.\r\n\r\nNote\r\n\r\nProtected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.\r\n\r\n\r\nPublic\r\n\r\nA class, method, constructor, interface etc declared public can be accessed from any other class.\r\n\r\nTherefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java Universe.\r\n\r\nDifferent Packages\r\nHowever if the public class we are trying to access is in a different package, then the public class still need to be imported.\r\n\r\nBecause of class inheritance, all public methods and variables of a class are inherited by its subclasses.\r\n\r\n\r\nDefault -No keyword:\r\n\r\nDefault access modifier means we do not explicitly declare an access modifier for a class, field, method, etc.\r\n\r\nWithin the same Packages\r\nA variable or method declared without any access control modifier is available to any other class in the same package. The fields in an interface are implicitly public static final and the methods in an interface are by default public.\r\n\r\nNote\r\n\r\nWe cannot Override the Static fields.if you try to override it does not show any error but it doesnot work what we except.\r\n\r\n', 'Private\r\n\r\nMethods,Variables and Constructors\r\nMethods, Variables and Constructors that are declared private can only be accessed within the declared class itself.\r\n\r\nClass and Interface\r\nPrivate access modifier is the most restrictive access level. Class and interfaces cannot be private.\r\n\r\nNote\r\n\r\nVariables that are declared private can be accessed outside the class if public getter methods are present in the class. Variables, methods and constructors which are declared protected in a superclass can be accessed only by the subclasses in other package or any class within the package of the protected members'' class.\r\n\r\nProtected\r\n\r\nClass and Interface\r\nThe protected access modifier cannot be applied to class and interfaces.\r\n\r\nMethods, fields can be declared protected, however methods and fields in a interface cannot be declared protected.\r\n\r\nNote\r\n\r\nProtected access gives the subclass a chance to use the helper method or variable, while preventing a nonrelated class from trying to use it.\r\n\r\n\r\nPublic\r\n\r\nA class, method, constructor, interface etc declared public can be accessed from any other class.\r\n\r\nTherefore fields, methods, blocks declared inside a public class can be accessed from any class belonging to the Java Universe.\r\n\r\nDifferent Packages\r\nHowever if the public class we are trying to access is in a different package, then the public class still need to be imported.\r\n\r\nBecause of class inheritance, all public methods and variables of a class are inherited by its subclasses.\r\n\r\n\r\nDefault -No keyword:\r\n\r\nDefault access modifier means we do not explicitly declare an access modifier for a class, field, method, etc.\r\n\r\nWithin the same Packages\r\nA variable or method declared without any access control modifier is available to any other class in the same package. The fields in an interface are implicitly public static final and the methods in an interface are by default public.\r\n\r\nNote\r\n\r\nWe cannot Override the Static fields.if you try to override it does not show any error but it doesnot work what we except.\r\n\r\nRelated Answers', 1),
(608, 205, 'David''s answer provides the meaning of each access modifier. As for when to use each, I''d suggest making public all classes and the methods of each class that are meant for external use (it''s API), and everything else private. You''ll develop over time a sense for when to make some classes package-private and when to declare certain methods protected for use in subclasses.', 'David''s answer provides the meaning of each access modifier. As for when to use each, I''d suggest making public all classes and the methods of each class that are meant for external use (it''s API), and everything else private. You''ll develop over time a sense for when to make some classes package-private and when to declare certain methods protected for use in subclasses.', 0),
(609, 205, 'Public Protected Default and private are access modifiers.\r\n\r\nThey are meant for encapsulation, or hiding and showing contents of the class.\r\n\r\nClass can be public or default\r\nClass members can be public, protected, default or private.\r\nPrivate is not accessible outside the class Default is accessible only in the package. Protected in package as well as any class which extends it. Public is open for all.\r\n\r\nNormally, member variables are defined private, but member methods are public.', 'Public Protected Default and private are access modifiers.\r\n\r\nThey are meant for encapsulation, or hiding and showing contents of the class.\r\n\r\nClass can be public or default\r\nClass members can be public, protected, default or private.\r\nPrivate is not accessible outside the class Default is accessible only in the package. Protected in package as well as any class which extends it. Public is open for all.\r\n\r\nNormally, member variables are defined private, but member methods are public.', 1),
(610, 205, 'The difference can be found in the links already provided but which one to use usually comes down to the "Principle of Least Knowledge". Only allow the least visibility that is needed.', 'The difference can be found in the links already provided but which one to use usually comes down to the "Principle of Least Knowledge". Only allow the least visibility that is needed.', 0),
(611, 205, 'Easy rule. Start with declaring everything private. And then progress towards public as the needs arises and design warrant it.\r\n\r\nWhen exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce to much dependencies on the actual representation rather than it''s observable behavior.\r\n\r\nAs a general rule I try to avoid overriding method implementations by sub-classing, it''s to easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.\r\n\r\nAlso use the @Override annotation when overriding to keep things from breaking when you refactor.', 'Easy rule. Start with declaring everything private. And then progress towards public as the needs arises and design warrant it.\r\n\r\nWhen exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce to much dependencies on the actual representation rather than it''s observable behavior.\r\n\r\nAs a general rule I try to avoid overriding method implementations by sub-classing, it''s to easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.\r\n\r\nAlso use the @Override annotation when overriding to keep things from breaking when you refactor.', 0),
(612, 204, 'Aside from all the excellent responses above I found there is another reason to remove deprecated API calls.\r\n\r\nBe researching why a call is deprecated I often find myself learning interesting things about the Java/the API/the Framework. There is often a good reason why a method is being deprecated and understanding these reasons leads to deeper insights.\r\n\r\nSo from a learning/growing perspective, it is also a worthwhile effort', 'Aside from all the excellent responses above I found there is another reason to remove deprecated API calls.\r\n\r\nBe researching why a call is deprecated I often find myself learning interesting things about the Java/the API/the Framework. There is often a good reason why a method is being deprecated and understanding these reasons leads to deeper insights.\r\n\r\nSo from a learning/growing perspective, it is also a worthwhile effort', 0);
INSERT INTO `response` (`r_id`, `q_id`, `resp`, `resp_disp`, `classify`) VALUES
(613, 204, 'Not in the specification, no. The main difference is in programmer expectations when they read your code in 2 years. structs are often assumed to be POD. Structs are also used in template metaprogramming when you''re defining a type for purposes other than defining objects.', 'Not in the specification, no. The main difference is in programmer expectations when they read your code in 2 years. structs are often assumed to be POD. Structs are also used in template metaprogramming when you''re defining a type for purposes other than defining objects.', 1),
(614, 204, 'Of course not - since the whole Java is getting @Deprecated :-) you can feel free to use them for as long as Java lasts. Not going to notice any diff anyway, unless it''s something really broken. Meaning - have to read about it and then decide.\n\nIn .Net however, when something is declared [Obsolete], go and read about it immediately even if you never used it before - you have about 50% chance that it''s more efficient and/or easier to use than replacement :-))\n\nSo in general, it can be quite beneficial to be techno-conservative these days, but you have to do your reading chore first.', 'Of course not - since the whole Java is getting @Deprecated :-) you can feel free to use them for as long as Java lasts. Not going to notice any diff anyway, unless it''s something really broken. Meaning - have to read about it and then decide.\n\nIn .Net however, when something is declared [Obsolete], go and read about it immediately even if you never used it before - you have about 50% chance that it''s more efficient and/or easier to use than replacement :-))\n\nSo in general, it can be quite beneficial to be techno-conservative these days, but you have to do your reading chore first.', 1),
(615, 204, 'It certainly doesn''t create a performance issue -- deprecated means in the future it''s likely that function won''t be part of the library anymore, so you should avoid using it in new code and change your old code to stop using it, so you don''t run into problems one day when you upgrade struts and find that function is no longer present\r\n', 'It certainly doesn''t create a performance issue -- deprecated means in the future it''s likely that function won''t be part of the library anymore, so you should avoid using it in new code and change your old code to stop using it, so you don''t run into problems one day when you upgrade struts and find that function is no longer present\r\n', 0),
(616, 204, 'You may have heard the term, "self-deprecating humor". That is humor that minimizes your importance. A deprecated class or method is like that. It is no longer important. It is so unimportant, in fact, that it should no longer be used at all, as it will probably cease to exist in the future.\r\n', 'You may have heard the term, "self-deprecating humor". That is humor that minimizes your importance. A deprecated class or method is like that. It is no longer important. It is so unimportant, in fact, that it should no longer be used at all, as it will probably cease to exist in the future.\r\n', 0),
(617, 204, 'Generally no, it''s not absolutely wrong to use deprecated methods as long as you have a good contingency plan to avoid any problems if/when those methods disappear from the library you''re using. With Java API itself this never happens but with just about anything else it means that it''s going to be removed. If you specifically plan not to upgrade (although you most likely should in the long run) your software''s supporting libraries then there''s no problem in using deprecated methods.', 'Generally no, it''s not absolutely wrong to use deprecated methods as long as you have a good contingency plan to avoid any problems if/when those methods disappear from the library you''re using. With Java API itself this never happens but with just about anything else it means that it''s going to be removed. If you specifically plan not to upgrade (although you most likely should in the long run) your software''s supporting libraries then there''s no problem in using deprecated methods.', 1),
(618, 204, 'It''s not wrong, it''s just not recommended. It generally means that at this point there is a better way of doing things and you''d do good if you use the new improved way. Some deprecated stuff are really dangerous and should be avoided altogether. The new way can yield better performance than the deprecated one, but it''s not always the case.\r\n', 'It''s not wrong, it''s just not recommended. It generally means that at this point there is a better way of doing things and you''d do good if you use the new improved way. Some deprecated stuff are really dangerous and should be avoided altogether. The new way can yield better performance than the deprecated one, but it''s not always the case.\r\n', 1),
(619, 204, 'It is not wrong, but some of the deprecated methods are removed in the future versions of the software, so you will possibly end up with not working code.\r\n', 'It is not wrong, but some of the deprecated methods are removed in the future versions of the software, so you will possibly end up with not working code.\r\n', 1),
(620, 204, 'Is it wrong to use Deprecated methods or classes in Java?"\r\nNot wrong as such but it can save you some trouble. Here is an example where it''s strongly discouraged to use a deprecated method:\r\n\r\nhttp://java.sun.com/j2se/1.4.2/docs/guide/misc/threadPrimitiveDeprecation.html\r\n\r\nWhy is Thread.stop deprecated?\r\n\r\nBecause it is inherently unsafe. Stopping a thread causes it to unlock all the monitors that it has locked. (The monitors are unlocked as the ThreadDeath exception propagates up the stack.) If any of the objects previously protected by these monitors were in an inconsistent state, other threads may now view these objects in an inconsistent state. Such objects are said to be damaged. When threads operate on damaged objects, arbitrary behavior can result. This behavior may be subtle and difficult to detect, or it may be pronounced. Unlike other unchecked exceptions, ThreadDeath kills threads silently; thus, the user has no warning that his program may be corrupted. The corruption can manifest itself at any time after the actual damage occurs, even hours or days in the future.', 'Is it wrong to use Deprecated methods or classes in Java?"\r\nNot wrong as such but it can save you some trouble. Here is an example where it''s strongly discouraged to use a deprecated method:\r\n\r\nhttp://java.sun.com/j2se/1.4.2/docs/guide/misc/threadPrimitiveDeprecation.html\r\n\r\nWhy is Thread.stop deprecated?\r\n\r\nBecause it is inherently unsafe. Stopping a thread causes it to unlock all the monitors that it has locked. (The monitors are unlocked as the ThreadDeath exception propagates up the stack.) If any of the objects previously protected by these monitors were in an inconsistent state, other threads may now view these objects in an inconsistent state. Such objects are said to be damaged. When threads operate on damaged objects, arbitrary behavior can result. This behavior may be subtle and difficult to detect, or it may be pronounced. Unlike other unchecked exceptions, ThreadDeath kills threads silently; thus, the user has no warning that his program may be corrupted. The corruption can manifest itself at any time after the actual damage occurs, even hours or days in the future.', 1),
(621, 204, 'You can still use deprecated code without performance being changed, but the whole point of deprecating a method/class is to let users know there''s now a better way of using it, and that in a future release the deprecated code is likely to be removed.', 'You can still use deprecated code without performance being changed, but the whole point of deprecating a method/class is to let users know there''s now a better way of using it, and that in a future release the deprecated code is likely to be removed.', 1),
(622, 204, 'In Java it''s @Deprecated, in C# it''s [Obsolete].\r\n\r\nI think I prefer C#''s terminology. It just means it''s obsolete. You can still use it if you want to, but there''s probably a better way.\r\n\r\nIt''s like using Windows 3.1 instead of Windows 7 if you believe that Windows 3.1 is obsolete. You can still use it, but there''s probably better features in a future version, plus the future versions will probably be supported - the obsolete one won''t be.\r\n\r\nSame for Java''s @Deprecated - you can still use the method, but at your own risk - in future, it might have better alternatives, and might not even be supported.\r\n\r\nIf you are using code that is deprecated, it''s usually fine, as long as you don''t have to upgrade to a newer API - the deprecated code might not exist there. I suggest if you see something that is using deprecated code, to update to use the newer alternatives (this is usually pointed out on the annotation or in a Javadoc deprecated comment).\r\n\r\nEdit: And as pointed out by Michael, if the reason for deprecation is due to a flaw in the functionality (or because the functionality should not even exist), then obviously, one shouldn''t use the deprecated code.', 'In Java it''s @Deprecated, in C# it''s [Obsolete].\r\n\r\nI think I prefer C#''s terminology. It just means it''s obsolete. You can still use it if you want to, but there''s probably a better way.\r\n\r\nIt''s like using Windows 3.1 instead of Windows 7 if you believe that Windows 3.1 is obsolete. You can still use it, but there''s probably better features in a future version, plus the future versions will probably be supported - the obsolete one won''t be.\r\n\r\nSame for Java''s @Deprecated - you can still use the method, but at your own risk - in future, it might have better alternatives, and might not even be supported.\r\n\r\nIf you are using code that is deprecated, it''s usually fine, as long as you don''t have to upgrade to a newer API - the deprecated code might not exist there. I suggest if you see something that is using deprecated code, to update to use the newer alternatives (this is usually pointed out on the annotation or in a Javadoc deprecated comment).\r\n\r\nEdit: And as pointed out by Michael, if the reason for deprecation is due to a flaw in the functionality (or because the functionality should not even exist), then obviously, one shouldn''t use the deprecated code.', 1),
(623, 204, 'Yes, it is wrong.\r\n\r\nDeprecated methods or classes will be removed in future versions of Java and should not be used. In each case, there should be an alternative available. Use that.\r\n\r\nThere are a couple of cases when you have to use a deprecated class or method in order to meet a project goal. In this case, you really have no choice but to use it. Future versions of Java may break that code, but if it''s a requirement you have to live with that. It probably isn''t the first time you had to do something wrong in order to meet a project requirement, and it certainly won''t be the last.\r\n\r\nWhen you upgrade to a new version of Java or some other library, sometimes a method or a class you were using becomes deprecated. Deprecated methods are not supported, but shouldn''t produce unexpected results. That doesn''t mean that they won''t, though, so switch your code ASAP.\r\n\r\nThe deprecation process is there to make sure that authors have enough time to change their code over from an old API to a new API. Make use of this time. Change your code over ASAP.', 'Yes, it is wrong.\r\n\r\nDeprecated methods or classes will be removed in future versions of Java and should not be used. In each case, there should be an alternative available. Use that.\r\n\r\nThere are a couple of cases when you have to use a deprecated class or method in order to meet a project goal. In this case, you really have no choice but to use it. Future versions of Java may break that code, but if it''s a requirement you have to live with that. It probably isn''t the first time you had to do something wrong in order to meet a project requirement, and it certainly won''t be the last.\r\n\r\nWhen you upgrade to a new version of Java or some other library, sometimes a method or a class you were using becomes deprecated. Deprecated methods are not supported, but shouldn''t produce unexpected results. That doesn''t mean that they won''t, though, so switch your code ASAP.\r\n\r\nThe deprecation process is there to make sure that authors have enough time to change their code over from an old API to a new API. Make use of this time. Change your code over ASAP.', 0),
(624, 202, '  == tests for reference equality.  .equals() tests for value equality.  Consequently, if you actually want to test whether two strings have the same value you should use .equals().  There are however a few situations where you can guarantee that two strings with the same value will be represented by the same object because of String interning. Those cases are specified by the Java Language Specification.  == is for testing whether two strings are the same object.  // These two have the same value new String(test).equals(test) // --&gt; true   // ... but they are not the same object new String(test) == test // --&gt; false   // ... neither are these new String(test) == new String(test) // --&gt; false   // ... but these are because literals are interned by  // the compiler and thus refer to the same object test == test // --&gt; true   // concatenation of string literals happens at compile time, // also resulting in the same object test == te + st // --&gt; true  // but .substring() is invoked at runtime, generating distinct objects test == !test.substring(1) // --&gt; false  // interned strings can also be recalled by calling .intern() test == !test.substring(1).intern() // --&gt; true   It is important to note that == is a bit cheaper than equals() (a single reference comparison instead of a method call), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. However, these situations are rare.  More information here: What&#39;s wrong with using == to compare floats in Java?     ', '<div class=###post-text### itemprop=###text###>  <p><code>==</code> tests for reference equality.</p>  <p><code>.equals()</code> tests for value equality.</p>  <p>Consequently, if you actually want to test whether two strings have the same value you should use <code>.equals()</code>.</p>  <p>There are however a few situations where you can guarantee that two strings with the same value will be represented by the same object because of <a href=###http://en.wikipedia.org/wiki/String_intern_pool###>String interning</a>. Those cases are specified by the <a href=###http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.5###>Java Language Specification</a>.</p>  <p><code>==</code> is for testing whether two strings are the same <em>object</em>.</p>  <pre><code>// These two have the same value new String(###test###).equals(###test###) // --&gt; true   // ... but they are not the same object new String(###test###) == ###test### // --&gt; false   // ... neither are these new String(###test###) == new String(###test###) // --&gt; false   // ... but these are because literals are interned by  // the compiler and thus refer to the same object ###test### == ###test### // --&gt; true   // concatenation of string literals happens at compile time, // also resulting in the same object ###test### == ###te### + ###st### // --&gt; true  // but .substring() is invoked at runtime, generating distinct objects ###test### == ###!test###.substring(1) // --&gt; false  // interned strings can also be recalled by calling .intern() ###test### == ###!test###.substring(1).intern() // --&gt; true </code></pre>  <p>It is important to note that <code>==</code> is a bit cheaper than <code>equals()</code> (a single reference comparison instead of a method call), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. <b>However, these situations are rare.</b></p>  <p>More information here: <a href=###http://stackoverflow.com/questions/1088216/whats-wrong-with-using-to-compare-floats-in-java###>What&#39;s wrong with using == to compare floats in Java?</a></p>     </div>', 1),
(625, 202, '  == tests object references, .equals() tests the string values.    Sometimes it looks as if == compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.  For example:    String fooString1 = new String(foo); String fooString2 = new String(foo);  // Evaluates to false fooString1 == fooString2;  // Evaluates to true fooString1.equals(fooString2);  // Evaluates to true, because Java uses the same object bar == bar;   But beware of nulls!    == handles null strings fine, but calling .equals() from a null string will cause an exception:    String nullString1 = null; String nullString2 = null;  // Evaluates to true nullString1 == nullString2;  // Throws an Exception nullString1.equals(nullString2);      ', '<div class=###post-text### itemprop=###text###>  <p><code>==</code> tests object references, <code>.equals()</code> tests the string values.  </p>  <p>Sometimes it looks as if <code>==</code> compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.</p>  <p>For example:  </p>  <pre><code>String fooString1 = new String(###foo###); String fooString2 = new String(###foo###);  // Evaluates to false fooString1 == fooString2;  // Evaluates to true fooString1.equals(fooString2);  // Evaluates to true, because Java uses the same object ###bar### == ###bar###; </code></pre>  <p><strong>But beware of nulls!</strong>  </p>  <p><code>==</code> handles <code>null</code> strings fine, but calling <code>.equals()</code> from a null string will cause an exception:  </p>  <pre><code>String nullString1 = null; String nullString2 = null;  // Evaluates to true nullString1 == nullString2;  // Throws an Exception nullString1.equals(nullString2); </code></pre>     </div>', 1),
(626, 202, '  == compares Object reference  .equals() compares String value  Sometimes == gives illusions of comparing String values, in following cases  String a=Test; String b=Test; if(a==b) ===&gt; true   This is a because when you create any String literal, JVM first searches for that literal in String pool, if it matches, same reference will be given to that new String, because of this we are getting   (a==b) ===> true                         String Pool      b -----------------&gt; test &lt;-----------------a   == fails in following case  String a=test; String b=new String(test); if (a==b) ===&gt; false   in this case for new String(test) the statement new String will be created in heap that reference will be given to b, so b will be given reference in heap not in String Pool. Now a is pointing to String in String pool while b is pointing to String in heap, because of that we are getting    if(a==b) ===> false.                  String Pool      test &lt;-------------------- a                     Heap      test &lt;-------------------- b   While .equals() always compares value of String so it gives true in both cases  String a=Test; String b=Test; if(a.equals(b)) ===&gt; true  String a=test; String b=new String(test); if(a.equals(b)) ===&gt; true   So using .equals() is awalys better.  Hope this will help.     ', '<div class=###post-text### itemprop=###text###>  <p><code>==</code> compares Object reference</p>  <p><code>.equals()</code> compares String value</p>  <p>Sometimes <code>==</code> gives illusions of comparing String values, in following cases</p>  <pre><code>String a=###Test###; String b=###Test###; if(a==b) ===&gt; true </code></pre>  <p>This is a because when you create any String literal, JVM first searches for that literal in String pool, if it matches, same reference will be given to that new String, because of this we are getting </p>  <p><strong>(a==b) ===> true</strong></p>  <pre><code>                       String Pool      b -----------------&gt; ###test### &lt;-----------------a </code></pre>  <p><code>==</code> fails in following case</p>  <pre><code>String a=###test###; String b=new String(###test###); if (a==b) ===&gt; false </code></pre>  <p>in this case for <code>new String(###test###)</code> the statement new String will be created in heap that reference will be given to <code>b</code>, so <code>b</code> will be given reference in heap not in String Pool. Now <code>a</code> is pointing to String in String pool while <code>b</code> is pointing to String in heap, because of that we are getting  </p>  <p><strong>if(a==b) ===> false.</strong></p>  <pre><code>                String Pool      ###test### &lt;-------------------- a                     Heap      ###test### &lt;-------------------- b </code></pre>  <p>While <code>.equals()</code> always compares value of String so it gives true in both cases</p>  <pre><code>String a=###Test###; String b=###Test###; if(a.equals(b)) ===&gt; true  String a=###test###; String b=new String(###test###); if(a.equals(b)) ===&gt; true </code></pre>  <p>So using <code>.equals()</code> is awalys better.</p>  <p>Hope this will help.</p>     </div>', 1),
(627, 202, '  The == operator checks to see if the two strings are exactly the same object.  The .equals() method will check if the two strings have the same value.     ', '<div class=###post-text### itemprop=###text###>  <p>The <code>==</code> operator checks to see if the two strings are exactly the same object.</p>  <p>The <code>.equals()</code> method will check if the two strings have the same value.</p>     </div>', 0),
(628, 202, '  String in java are immutable that means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.  When using == operator for string comparison you are not comparing the contents of the string but are actually comparing the memory address, if they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.  So the question is if all the strings are cached in the system how come == returns false whereas equals return true. Well this is possible. If you make a new string like String str = new String(Testing) you end up creating a new string in the cache even if the cache already contains a string having the same content. In short MyString == new String(MyString) will always return false.  Java also talks about the function intern() that can be used on a string to make it part of the cache so MyString == new String(MyString).intern() will return true.  Note: == operator is much faster that equals just because you are comparing two memory addresses, but you need to be sure that the code isnt creating new String instances in the code otherwise you will encounter bugs.     ', '<div class=###post-text### itemprop=###text###>  <p>String in java are immutable that means whenever you try to change/modify the string you get a new instance. You cannot change the original string. This has been done so that these string instances can be cached. A typical program contains a lot of string references and caching these instances can decrease the memory footprint and increase the performance of the program.</p>  <p>When using == operator for string comparison you are not comparing the contents of the string but are actually comparing the memory address, if they are both equal it will return true and false otherwise. Whereas equals in string compares the string contents.</p>  <p>So the question is if all the strings are cached in the system how come == returns false whereas equals return true. Well this is possible. If you make a new string like <code>String str = new String(###Testing###)</code> you end up creating a new string in the cache even if the cache already contains a string having the same content. In short <code>###MyString### == new String(###MyString###)</code> will always return false.</p>  <p>Java also talks about the function intern() that can be used on a string to make it part of the cache so <code>###MyString### == new String(###MyString###).intern()</code> will return true.</p>  <p>Note: == operator is much faster that equals just because you are comparing two memory addresses, but you need to be sure that the code isn&&&t creating new String instances in the code otherwise you will encounter bugs.</p>     </div>', 0),
(629, 202, '  String a = new String(foo); String b = new String(foo); System.out.println(a == b); // prints false System.out.println(a.equals(b)); // prints true   Make sure you understand why.  Its because the == comparison only compares references; the equals() method does a character-by-character comparison of the contents.  When you call new for a and b, each one gets a new reference that points to the foo in the string table.  The references are different, but the content is the same.     ', '<div class=###post-text### itemprop=###text###>  <pre><code>String a = new String(###foo###); String b = new String(###foo###); System.out.println(a == b); // prints false System.out.println(a.equals(b)); // prints true </code></pre>  <p>Make sure you understand why.  It&&&s because the <code>==</code> comparison only compares references; the <code>equals()</code> method does a character-by-character comparison of the contents.</p>  <p>When you call new for <code>a</code> and <code>b</code>, each one gets a new reference that points to the <code>###foo###</code> in the string table.  The references are different, but the content is the same.</p>     </div>', 0),
(630, 202, '  Java is having a String pool under which java manages the memory allocation for the String objects. See String Pools in java  What happens is when you check(compare) two objects using == operator it compares the address equality into the string-pool. If two String objects having same address references then it returns true otherwise false. But if you want to compare the contents of two String objects then you must override equals method.  equals is actually the method of Object class but is Overridden into the String class and new definition is given which compares the contents of object.   Example:     stringObjectOne.equals(stringObjectTwo);   But mind it respects the case of String. If you want Case insensitive compare then you must go for equalsIgnoreCase method of the String class.   Lets See:  String one   = HELLO;  String two   = HELLO;  String three = new String(HELLO);  String four  = hello;   one == two;   // TRUE one == three; // FALSE one == four;  // FALSE  one.equals(two);            // TRUE one.equals(three);          // TRUE one.equals(four);           // FALSE one.equalsIgnoreCase(four); // TRUE      ', '<div class=###post-text### itemprop=###text###>  <p>Java is having a String pool under which java manages the memory allocation for the String objects. See <a href=###http://stackoverflow.com/questions/3801343/what-is-string-pool-in-java###><strong>String Pools in java</strong></a></p>  <p>What happens is when you check(compare) two objects using <code>==</code> operator it compares the address equality into the string-pool. If two String objects having same address references then it returns <code>true</code> otherwise <code>false</code>. But if you want to compare the contents of two String objects then you must override <code>equals</code> method.</p>  <p><code>equals</code> is actually the method of Object class but is Overridden into the String class and new definition is given which compares the contents of object. </p>  <pre><code>Example:     stringObjectOne.equals(stringObjectTwo); </code></pre>  <p>But mind it respects the case of String. If you want Case insensitive compare then you must go for equalsIgnoreCase method of the String class. </p>  <pre><code>Lets See:  String one   = ###HELLO###;  String two   = ###HELLO###;  String three = new String(###HELLO###);  String four  = ###hello###;   one == two;   // TRUE one == three; // FALSE one == four;  // FALSE  one.equals(two);            // TRUE one.equals(three);          // TRUE one.equals(four);           // FALSE one.equalsIgnoreCase(four); // TRUE </code></pre>     </div>', 1),
(631, 202, '  Yea, its bad...  == means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.  Equals does the real comparison for you.      ', '<div class=###post-text### itemprop=###text###>  <p>Yea, it&&&s bad...</p>  <p>###==### means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.</p>  <p>Equals does the real comparison for you. </p>     </div>', 0),
(632, 202, '  == compares object references in Java, and that is no exception for String objects.  For comparing the actual contents of objects (including String), one must use the equals method.  If a comparison of two String objects using == turns out to be true, that is because the String objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of String. One should not expect that comparing one String object containing the same contents as another String object using == to evaluate as true.     ', '<div class=###post-text### itemprop=###text###>  <p><strong><code>==</code> compares object references in Java</strong>, and that is no exception for <code>String</code> objects.</p>  <p><strong>For comparing the actual contents of objects (including <code>String</code>), one must use the <code>equals</code> method</strong>.</p>  <p>If a comparison of two <code>String</code> objects using <code>==</code> turns out to be <code>true</code>, that is because the <code>String</code> objects were interned, and the Java Virtual Machine is having multiple references point to the same instance of <code>String</code>. One should not expect that comparing one <code>String</code> object containing the same contents as another <code>String</code> object using <code>==</code> to evaluate as <code>true</code>.</p>     </div>', 0),
(633, 202, '  == performs a reference equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.  The equals() method will check if the contents or the states of 2 objects are the same.  Obviously == is faster, but will (might) give false results in many cases if you just want to tell if 2 strings hold the same text.  Definitely the use of equals() method is recommended.  Dont worry about the performance. Some things to encourage using String.equals():   Implementation of String.equals() first checks for reference equality (using ==), and if the 2 strings are the same by reference, no further calculation is performed! If the 2 string references are not the same, String.equals() will next check the lengths of the strings. This is also a fast operation because the String class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal. Only if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a different character (at the same position in the 2 strings), no further characters will be checked.   When all is said and done, even if we have guarantee that the strings are interns, using the equals() method is still not that overhead that one might think, definitely the recommended way. If you want efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).     ', '<div class=###post-text### itemprop=###text###>  <p><code>==</code> performs a <strong>reference</strong> equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.</p>  <p>The <code>equals()</code> method will check if the <strong>contents</strong> or the <strong>states</strong> of 2 objects are the same.</p>  <p>Obviously <code>==</code> is faster, but will (might) give false results in many cases if you just want to tell if 2 strings hold the same text.</p>  <p>Definitely the use of <code>equals()</code> method is recommended.</p>  <p>Don&&&t worry about the performance. Some things to encourage using <code>String.equals()</code>:</p>  <ol> <li>Implementation of <code>String.equals()</code> first checks for reference equality (using <code>==</code>), and if the 2 strings are the same by reference, no further calculation is performed!</li> <li>If the 2 string references are not the same, <code>String.equals()</code> will next check the lengths of the strings. This is also a fast operation because the String class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal.</li> <li>Only if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a different character (at the same position in the 2 strings), no further characters will be checked.</li> </ol>  <p>When all is said and done, even if we have guarantee that the strings are interns, using the <code>equals()</code> method is still not that overhead that one might think, definitely the recommended way. If you want efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).</p>     </div>', 0),
(634, 202, '  .equals() compares the data in a class (assuming the function is implemented). == compares pointer locations (location of the object in memory).  == returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance. .equals() returns true if the two objects contain the same data equals() Versus == in Java  That may help you.     ', '<div class=###post-text### itemprop=###text###>  <p><code>.equals()</code> compares the data in a class (assuming the function is implemented). <code>==</code> compares pointer locations (location of the object in memory).</p>  <p><code>==</code> returns true if both objects (NOT TALKING ABOUT PRIMITIVES) point to the SAME object instance. <code>.equals()</code> returns true if the two objects contain the same data <a href=###http://www.java-samples.com/showtutorial.php?tutorialid=221### rel=###nofollow###><code>equals()</code> Versus <code>==</code> in Java</a></p>  <p>That may help you.</p>     </div>', 0),
(635, 202, '  Yes, == is bad for comparing Strings (any objects really, unless you know theyre canonical).  == just compares object references.  .equals() tests for equality. For Strings, often theyll be the same but as youve discovered, thats not guaranteed always.     ', '<div class=###post-text### itemprop=###text###>  <p>Yes, <code>==</code> is bad for comparing Strings (any objects really, unless you know they&&&re canonical).  <code>==</code> just compares object references.  <code>.equals()</code> tests for equality. For Strings, often they&&&ll be the same but as you&&&ve discovered, that&&&s not guaranteed always.</p>     </div>', 1),
(636, 202, '  I agree with the answer from zacherates.  But what you can do is to call intern() on your non-literal strings.  From zacherates example:  // ... but they are not the same object new String(test) == test ==&gt; false    If you intern the non-literal String equality is true  new String(test).intern() == test ==&gt; true       ', '<div class=###post-text### itemprop=###text###>  <p>I agree with the answer from zacherates.</p>  <p>But what you can do is to call intern() on your non-literal strings.</p>  <p>From zacherates example:</p>  <pre><code>// ... but they are not the same object new String(###test###) == ###test### ==&gt; false  </code></pre>  <p>If you intern the non-literal String equality is true</p>  <pre><code>new String(###test###).intern() == ###test### ==&gt; true  </code></pre>     </div>', 1),
(637, 202, '  If youre like me, when I first started using Java, I wanted to use the == operator to test whether two String instances were equal, but for better or worse, thats not the correct way to do it in Java.  In this tutorial Ill demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial Ill also discuss why the == operator doesnt work when comparing Java strings.  Option 1: Java String comparison with the equals method Most of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:  if (string1.equals(string2))   This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.  Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):  String string1 = foo; String string2 = FOO;  if (string1.equals(string2)) { // this line will not print because the // java string equals method returns false: System.out.println(The two strings are the same.) }   But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:  String string1 = foo; String string2 = foo;   // test for equality with the java string equals method if (string1.equals(string2)) {  // this line WILL print  System.out.println(The two strings are the same.)  }   Option 2: String comparison with the equalsIgnoreCase method  In some string comparison tests youll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:  String string1 = foo; String string2 = FOO;   // java string compare while ignoring case  if (string1.equalsIgnoreCase(string2))  {  // this line WILL print  System.out.println(Ignoring case, the two strings are the same.)  }   Option 3: Java String comparison with the compareTo method  There is also a third, less common way to compare Java strings, and thats with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Heres a quick example of what this String comparison approach looks like:  String string1 = foo bar; String string2 = foo bar;  // java string compare example if (string1.compareTo(string2) == 0) { // this line WILL print  System.out.println(The two strings are the same.)  }   While Im writing about this concept of equality in Java, its important to note that the Java language includes an equals method in the base Java Object class. Whenever youre creating your own objects and you want to provide a means to see if two instances of your object are equal, you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).  You may want to have a look at this ==, .equals(), compareTo(), and compare()     ', '<div class=###post-text### itemprop=###text###>  <p>If you&&&re like me, when I first started using Java, I wanted to use the ###==### operator to test whether two String instances were equal, but for better or worse, that&&&s not the correct way to do it in Java.</p>  <p>In this tutorial I&&&ll demonstrate several different ways to correctly compare Java strings, starting with the approach I use most of the time. At the end of this Java String comparison tutorial I&&&ll also discuss why the ###==### operator doesn&&&t work when comparing Java strings.</p>  <p><strong>Option 1: Java String comparison with the equals method</strong> Most of the time (maybe 95% of the time) I compare strings with the equals method of the Java String class, like this:</p>  <pre><code>if (string1.equals(string2)) </code></pre>  <p>This String equals method looks at the two Java strings, and if they contain the exact same string of characters, they are considered equal.</p>  <p>Taking a look at a quick String comparison example with the equals method, if the following test were run, the two strings would not be considered equal because the characters are not the exactly the same (the case of the characters is different):</p>  <pre><code>String string1 = ###foo###; String string2 = ###FOO###;  if (string1.equals(string2)) { // this line will not print because the // java string equals method returns false: System.out.println(###The two strings are the same.###) } </code></pre>  <p>But, when the two strings contain the exact same string of characters, the equals method will return true, as in this example:</p>  <pre><code>String string1 = ###foo###; String string2 = ###foo###;   // test for equality with the java string equals method if (string1.equals(string2)) {  // this line WILL print  System.out.println(###The two strings are the same.###)  } </code></pre>  <p><strong>Option 2: String comparison with the equalsIgnoreCase method</strong></p>  <p>In some string comparison tests you&&&ll want to ignore whether the strings are uppercase or lowercase. When you want to test your strings for equality in this case-insensitive manner, use the equalsIgnoreCase method of the String class, like this:</p>  <pre><code>String string1 = ###foo###; String string2 = ###FOO###;   // java string compare while ignoring case  if (string1.equalsIgnoreCase(string2))  {  // this line WILL print  System.out.println(###Ignoring case, the two strings are the same.###)  } </code></pre>  <p><strong>Option 3: Java String comparison with the compareTo method</strong></p>  <p>There is also a third, less common way to compare Java strings, and that&&&s with the String class compareTo method. If the two strings are exactly the same, the compareTo method will return a value of 0 (zero). Here&&&s a quick example of what this String comparison approach looks like:</p>  <pre><code>String string1 = ###foo bar###; String string2 = ###foo bar###;  // java string compare example if (string1.compareTo(string2) == 0) { // this line WILL print  System.out.println(###The two strings are the same.###)  } </code></pre>  <p>While I&&&m writing about this concept of equality in Java, it&&&s important to note that the Java language includes an equals method in the base Java Object class. Whenever you&&&re creating your own objects and you want to provide a means to see if two instances of your object are ###equal###, you should override (and implement) this equals method in your class (in the same way the Java language provides this equality/comparison behavior in the String equals method).</p>  <p>You may want to have a look at this <a href=###http://www.ensta-paristech.fr/~diam/java/online/notes-java/data/expressions/22compareobjects.html###>==, .equals(), compareTo(), and compare()</a></p>     </div>', 0),
(638, 202, '  Function:  // word-by-word fixed-cut similarity  public static float simple_similarity (String u, String v) {     String [] a = u.split( );     String [] b = v.split( );      long correct = 0;     int minLen = Math.min(a.length,b.length);      for (int i=0; i&lt;minLen; i++)     {         for (int j=0; j&lt;Math.min(a[i].size(),b[i].size()); i++)         {             if (a[i][j] == b[i][j])             {                 correct++;             }         }     }      return (float)(((double)correct)/Math.max(u.size(),v.size())); }   Test:  String a = This is the first string.;  String b = this is not 1st string!;  // for exact string comparison, use .equals  boolean exact = a.equals(b);  // For similarity check, there are libraries for this // Here Ill try a simple example I wrote  float similarity = simple_similarity(a,b);      ', '<div class=###post-text### itemprop=###text###>  <p>Function:</p>  <pre><code>// word-by-word fixed-cut similarity  public static float simple_similarity (String u, String v) {     String [] a = u.split(### ###);     String [] b = v.split(### ###);      long correct = 0;     int minLen = Math.min(a.length,b.length);      for (int i=0; i&lt;minLen; i++)     {         for (int j=0; j&lt;Math.min(a[i].size(),b[i].size()); i++)         {             if (a[i][j] == b[i][j])             {                 correct++;             }         }     }      return (float)(((double)correct)/Math.max(u.size(),v.size())); } </code></pre>  <p>Test:</p>  <pre><code>String a = ###This is the first string.###;  String b = ###this is not 1st string!###;  // for exact string comparison, use .equals  boolean exact = a.equals(b);  // For similarity check, there are libraries for this // Here I&&&ll try a simple example I wrote  float similarity = simple_similarity(a,b); </code></pre>     </div>', 1),
(639, 202, '  == compares the reference value of objects whereas the equals() method present in the java.lang.String class compares the contents of the String object (to another object).     ', '<div class=###post-text### itemprop=###text###>  <p><code>==</code> compares the reference value of objects whereas the <code>equals()</code> method present in the <code>java.lang.String</code> class compares the contents of the <code>String</code> object (to another object).</p>     </div>', 0),
(640, 202, '  always == operator meant for object reference comparison,where as String class .equals() method is overridden for content comparison  String s1= new String(abc); String s2= new String(abc); System.out.println(s1 == s2);//It prints false(reference comparison) System.out.println(s1.equals(s2));//It prints true (content comparison)      ', '<div class=###post-text### itemprop=###text###>  <p>always <em>==</em> operator meant for <strong>object reference comparison</strong>,where as String class <em>.equals()</em> method is overridden for <strong>content comparison</strong></p>  <pre><code>String s1= new String(###abc###); String s2= new String(###abc###); System.out.println(s1 == s2);//It prints false(reference comparison) System.out.println(s1.equals(s2));//It prints true (content comparison) </code></pre>     </div>', 1),
(641, 202, '  I think that when you define a String you define an object. So you need to use .equals(). When you use primitive data types you use == but with String (and any object) you must use .equals().     ', '<div class=###post-text### itemprop=###text###>  <p>I think that when you define a <code>String</code> you define an object. So you need to use <code>.equals()</code>. When you use primitive data types you use <code>==</code> but with <code>String</code> (and any object) you must use <code>.equals()</code>.</p>     </div>', 1),
(642, 202, '  == operator check if the two references point to the same object or not. .equals() check for the actual string content(value).   Note that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.  Case1) String s1 = StackOverflow; String s2 = StackOverflow; s1 == s2;      //true s1.equals(s2); //true Reason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool. Case2) String s1 = new String(StackOverflow); String s2 = new String(StackOverflow); s1 == s2;      //false s1.equals(s2); //true Reason: If you create String object using new keyword separate space is allocated to it on heap.      ', '<div class=###post-text### itemprop=###text###>  <pre><code>== operator check if the two references point to the same object or not. .equals() check for the actual string content(value). </code></pre>  <p>Note that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.</p>  <pre><code>Case1) String s1 = ###StackOverflow###; String s2 = ###StackOverflow###; s1 == s2;      //true s1.equals(s2); //true Reason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool. Case2) String s1 = new String(###StackOverflow###); String s2 = new String(###StackOverflow###); s1 == s2;      //false s1.equals(s2); //true Reason: If you create String object using new keyword separate space is allocated to it on heap. </code></pre>     </div>', 1);
INSERT INTO `response` (`r_id`, `q_id`, `resp`, `resp_disp`, `classify`) VALUES
(643, 202, '  equals() method is present in the java.lang.Object class and it is expected to check for the equivalence of the state of objects!. That means, the contents of the objects. Whereas the == operator is expected to check the actual object instances are same or not.  Example  Consider two different reference variables str1 and str2 \r\n  str1 = new String(abc); str2 = new String(abc);   if you use the equals()  System.out.println((str1.equals(str2))?TRUE:FALSE);   You will get the output as TRUE  if you use ==  System.out.println((str1==str2)?TRUE:FALSE);   Now you will get the FALSE as output because both str1 and str2 are pointing to two different objects even though both of them share the same string content. It is because of new String() everytime a new object is created.     ', '<div class=###post-text### itemprop=###text###>  <p><code>equals()</code> method is present in the <code>java.lang.Object</code> class and it is expected to check for the equivalence of the state of objects!. That means, the contents of the objects. Whereas the <code>==</code> operator is expected to check the actual object instances are same or not.</p>  <p><em>Example</em></p>  <p>Consider two different reference variables <code>str1</code> and <code>str2</code> <br></p>  <pre><code>str1 = new String(###abc###); str2 = new String(###abc###); </code></pre>  <p>if you use the <code>equals()</code></p>  <pre><code>System.out.println((str1.equals(str2))?###TRUE###:###FALSE###); </code></pre>  <p>You will get the output as <code>TRUE</code></p>  <p>if you use <code>==</code></p>  <pre><code>System.out.println((str1==str2)?###TRUE###:###FALSE###); </code></pre>  <p>Now you will get the <code>FALSE</code> as output because both <code>str1</code> and <code>str2</code> are pointing to two different objects even though both of them share the same string content. It is because of <code>new String()</code> everytime a new object is created.</p>     </div>', 0),
(644, 202, '  In Java, when the “==” operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location.   The Java String class actually overrides the default equals() implementation in the Object class – and it overrides the method so that it checks only the values of the strings, not their locations in memory.  This means that if you call the equals() method to compare 2 String objects, then as long as the actual sequence of characters is equal, both objects are considered equal.     The == operator checks if the two strings are exactly the same object.      The .equals() method  check if the two strings have the same value.      ', '<div class=###post-text### itemprop=###text###>  <p>In Java, when the <strong>“==”</strong> operator is used to compare 2 objects, it checks to see if the objects refer to the same place in memory. In other words, it checks to see if the 2 object names are basically references to the same memory location. </p>  <p>The Java String class actually overrides the default equals() implementation in the Object class – and it overrides the method so that it checks only the values of the strings, not their locations in memory.  This means that if you call the equals() method to compare 2 String objects, then as long as the actual sequence of characters is equal, both objects are considered equal.</p>  <blockquote>   <p>The <code>==</code> operator checks if the two strings are exactly the same object.</p>      <p>The <code>.equals()</code> method  check if the two strings have the same value.</p> </blockquote>     </div>', 0),
(645, 202, '  You can also use compareTo() method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal.   The == compares the references and does not compare the actual strings. If you did create every string using new String(somestring).intern() then you can use the == operator to compare two strings, otherwise equals() or compareTo methods can only be used.     ', '<div class=###post-text### itemprop=###text###>  <p>You can also use <code>compareTo()</code> method to compare two Strings. If the compareTo result is 0, then the two strings are equal, otherwise the strings being compared are not equal. </p>  <p>The <code>==</code> compares the references and does not compare the actual strings. If you did create every string using <code>new String(somestring).intern()</code> then you can use the <code>==</code> operator to compare two strings, otherwise equals() or compareTo methods can only be used.</p>     </div>', 0),
(646, 202, '  All objects are guaranteed to have a .equals() method since Object contains a method .equals() that returns a boolean. It is the subclass job to override this method if a further defining definition is required.  Without it(i.e. using ==) only memory addresses are checked between two objects for equality.   String overrides this .equals() method and instead of using the memory address it returns the comparison of strings at the character level for equality.   A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the StringBuilder classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same == would be a fine way to go. Strings themselves do not.     ', '<div class=###post-text### itemprop=###text###>  <p>All objects are guaranteed to have a <code>.equals()</code> method since Object contains a method <code>.equals()</code> that returns a boolean. It is the subclass&&& job to override this method if a further defining definition is required.  Without it(i.e. using <code>==</code>) only memory addresses are checked between two objects for equality.   String overrides this <code>.equals()</code> method and instead of using the memory address it returns the comparison of strings at the character level for equality. </p>  <p>A key note is that strings are stored in one lump pool so once a string is created it is forever stored in a program at the same address. Strings do not change, they are immutable. This is why it is a bad idea to use regular string concatenation if you have a serious of amount of string processing to do. Instead you would use the <code>StringBuilder</code> classes provided. Remember the pointers to this string can change and if you were interested to see if two pointers were the same <code>==</code> would be a fine way to go. Strings themselves do not.</p>     </div>', 0),
(647, 104, 'A plugin can be a third-party software for your program, which allows some enhanced features for it. For example, someone could develop a plugin for your web browser to change the visual theme.', 'A plugin can be a third-party software for your program, which allows some enhanced features for it. For example, someone could develop a plugin for your web browser to change the visual theme.', 1),
(648, 104, 'A plugin can be a third-party software.', 'A plugin can be a third-party software.', 1),
(649, 104, 'A plug-in is an additional bit of code that changes the way the software works. \r\n\r\nIf you develop a piece of software you might make it do something and then someone else comes along and thinks well I want this software to do this but it doesn''t. \r\n\r\nA plug-in asks the original piece of software for various information which the software sends to it, in return the plugin processes the information it receives and passes it back to the main program so the main program can deal with it, or sometimes does something and sends a "true" value back to the program to tell the main program it''s done what it needed to do successfully (or false if it failed). Some examples of plug-ins \r\n\r\nExport plugins - many programs have export plugins - Office has numerous ones, so does GIMP, and Photoshop. In GIMP JPEG export is a plugin - GIMP doesn''t know anything about the JPEG format, GIMP only knows one format - RAW (even XCF is actually a plugin), all other formats are plugins - so if someone clicks Export As... and types JPEG GIMP then sends all the image data in RAW format to the JPEG plugin, the JPEG plugin then takes that data and runs it through a process inside which turns the RAW format into JPEG format, which it might either return to the program and allow the programs save process to write it to the disc, or handle the saving functionality all itself (it would be more efficient to pass it back to the main program as then it means each plugin doesn''t have all the "save" code wrote in to it). \r\n\r\nCMS Plugins - many content management systems have various plugins - Joomla has a JEvents plugin - Joomla itself has no calendar functionality, JEvents creates a database table, and allows the administrator to input calendar dates, and stores them in the database. It passes HTML back to Joomla so it can generate a website showing calender events, even though the main Joomla program isn''t programmed at all to recognise the calendar format or anything - to the main Joomla program it''s just HTML. \r\n\r\nSo this is what a plugin does - \r\n\r\n<main program> \r\nUser clicks export as \r\nUser chooses to export to JPEG \r\nProgram passes control to JPEG plugin \r\n----->JPEG Plugin uses it''s code to turn RAW data into JPEG \r\n----->JPEG Plugin returns JPEG data to main program telling it that data is to be saved \r\nProgram receives data back from JPEG Plugin \r\nProgram writes data to disc \r\nProgram has no knowledge of what JPEG format is but has just wrote JPEG file.', 'A plug-in is an additional bit of code that changes the way the software works. \r\n\r\nIf you develop a piece of software you might make it do something and then someone else comes along and thinks well I want this software to do this but it doesn''t. \r\n\r\nA plug-in asks the original piece of software for various information which the software sends to it, in return the plugin processes the information it receives and passes it back to the main program so the main program can deal with it, or sometimes does something and sends a "true" value back to the program to tell the main program it''s done what it needed to do successfully (or false if it failed). Some examples of plug-ins \r\n\r\nExport plugins - many programs have export plugins - Office has numerous ones, so does GIMP, and Photoshop. In GIMP JPEG export is a plugin - GIMP doesn''t know anything about the JPEG format, GIMP only knows one format - RAW (even XCF is actually a plugin), all other formats are plugins - so if someone clicks Export As... and types JPEG GIMP then sends all the image data in RAW format to the JPEG plugin, the JPEG plugin then takes that data and runs it through a process inside which turns the RAW format into JPEG format, which it might either return to the program and allow the programs save process to write it to the disc, or handle the saving functionality all itself (it would be more efficient to pass it back to the main program as then it means each plugin doesn''t have all the "save" code wrote in to it). \r\n\r\nCMS Plugins - many content management systems have various plugins - Joomla has a JEvents plugin - Joomla itself has no calendar functionality, JEvents creates a database table, and allows the administrator to input calendar dates, and stores them in the database. It passes HTML back to Joomla so it can generate a website showing calender events, even though the main Joomla program isn''t programmed at all to recognise the calendar format or anything - to the main Joomla program it''s just HTML. \r\n\r\nSo this is what a plugin does - \r\n\r\n<main program> \r\nUser clicks export as \r\nUser chooses to export to JPEG \r\nProgram passes control to JPEG plugin \r\n----->JPEG Plugin uses it''s code to turn RAW data into JPEG \r\n----->JPEG Plugin returns JPEG data to main program telling it that data is to be saved \r\nProgram receives data back from JPEG Plugin \r\nProgram writes data to disc \r\nProgram has no knowledge of what JPEG format is but has just wrote JPEG file.', 1),
(650, 104, 'A plugin can be a third-party software for your program, which allows some enhanced features for it.', 'A plugin can be a third-party software for your program, which allows some enhanced features for it.', 1),
(651, 104, 'Its like an add on from my understanding. Depends on what it''s for. Minecraft server plugin allows extra features to be enabled on the server.', 'Its like an add on from my understanding. Depends on what it''s for. Minecraft server plugin allows extra features to be enabled on the server.', 0),
(652, 104, 'Plugin is a third party tool.', 'Plugin is a third party tool.', 1),
(653, 104, 'It''s a software component that adds a specific feature to an existing software application. When an application supports plug-ins, it enables customization. The common examples are the plug-ins used in web browsers to add new features such as search-engines, virus scanners, or the ability to utilize a new file type such as a new video format. Well-known browser plug-ins include the Adobe Flash Player, the QuickTime Player, and the Java plug-in, which can launch a user-activated Java applet on a web page to its execution on a local Java virtual machine.', 'It''s a software component that adds a specific feature to an existing software application. When an application supports plug-ins, it enables customization. The common examples are the plug-ins used in web browsers to add new features such as search-engines, virus scanners, or the ability to utilize a new file type such as a new video format. Well-known browser plug-ins include the Adobe Flash Player, the QuickTime Player, and the Java plug-in, which can launch a user-activated Java applet on a web page to its execution on a local Java virtual machine.', 0),
(654, 104, 'it''s a 3rd-party tool, you can use many plugins for your website to get many features', 'it''s a 3rd-party tool, you can use many plugins for your website to get many features', 1),
(655, 104, 'Seriously dude? You know what a outlit is, so a plug in is something that gets plugged into a out lit. Like at the end of a coord on a vacuum or T.V. Is a plug in. Get it now? If you don''t I don''t think you ever wil. And I seriously hope you are just joking and are bored. Quick question... How old are you?', 'Seriously dude? You know what a outlit is, so a plug in is something that gets plugged into a out lit. Like at the end of a coord on a vacuum or T.V. Is a plug in. Get it now? If you don''t I don''t think you ever wil. And I seriously hope you are just joking and are bored. Quick question... How old are you?', 1),
(656, 104, 'A 3rd party software', 'A 3rd party software', 1),
(657, 104, 'A type of module and hooking technique that goes beyond my knowledge of computers. It goes so far beyond that it is documented on paper somewhere.', 'A type of module and hooking technique that goes beyond my knowledge of computers. It goes so far beyond that it is documented on paper somewhere.', 0),
(658, 104, 'Plug-in applications are programs that can easily be installed and used as part of your Web browser. Plug-in used for improvement of website performance.', 'Plug-in applications are programs that can easily be installed and used as part of your Web browser. Plug-in used for improvement of website performance.', 0),
(659, 105, 'Unix and Linux are modular operating systems. Unix, created at Bell Labs, is historically important. It was the first multi-platform OS and is the OS - or family of OSes - on which Modern Computer Science was created. \r\n\r\nLinux is the kernel of an operating system. It was written originally to let Windows machines run Unix programs, however whether it is a Unix is open to discussion - there are subtle differences in security which make Linux easier to use but provoke debates. All that said look them up and look up the GNU tools.', 'Unix and Linux are modular operating systems. Unix, created at Bell Labs, is historically important. It was the first multi-platform OS and is the OS - or family of OSes - on which Modern Computer Science was created. \r\n\r\nLinux is the kernel of an operating system. It was written originally to let Windows machines run Unix programs, however whether it is a Unix is open to discussion - there are subtle differences in security which make Linux easier to use but provoke debates. All that said look them up and look up the GNU tools.', 1),
(660, 105, 'Unix was a mainframe OS that was developed in he 70''s. Linux is, for all practical purposes a clone of it. All DVR (set top boxes), most web servers, most banks, most ATM, most bank card terminals, and most all supercomputers run it. Anyplace were security and long term stability are needed you will find Linux. Everyone uses Linux every day, they just do not know it. \r\n\r\nLinux was not intended for the desktop, but it still sees a lot of use. Max OS is very similar, and also comes from Unix, via a different branch of the tree (so to speak). \r\n\r\nLinux is considered much more secure than Windows, mainly because security was built in from day one, and its roots are in Unix that has been around twice as long as Windows. \r\n\r\nMicrosoft made its own "unix" back in the 80''s. It was called Xenix. \r\n\r\nChrome, Android, Sun OS, OS-X, iOS, and others are cousins or outright copies of Linux.', 'Unix was a mainframe OS that was developed in he 70''s. Linux is, for all practical purposes a clone of it. All DVR (set top boxes), most web servers, most banks, most ATM, most bank card terminals, and most all supercomputers run it. Anyplace were security and long term stability are needed you will find Linux. Everyone uses Linux every day, they just do not know it. \r\n\r\nLinux was not intended for the desktop, but it still sees a lot of use. Max OS is very similar, and also comes from Unix, via a different branch of the tree (so to speak). \r\n\r\nLinux is considered much more secure than Windows, mainly because security was built in from day one, and its roots are in Unix that has been around twice as long as Windows. \r\n\r\nMicrosoft made its own "unix" back in the 80''s. It was called Xenix. \r\n\r\nChrome, Android, Sun OS, OS-X, iOS, and others are cousins or outright copies of Linux.', 1),
(661, 105, 'Linux is an open source, free to use operating system widely used for computer hardware and software, game development, tablet PCS, mainframes etc. Unix is an operating system commonly used in internet servers, workstations and PCs by Solaris, Intel, HP etc.', 'Linux is an open source, free to use operating system widely used for computer hardware and software, game development, tablet PCS, mainframes etc. Unix is an operating system commonly used in internet servers, workstations and PCs by Solaris, Intel, HP etc.', 1),
(662, 105, 'Linux is OS And Unix Language', 'Linux is OS And Unix Language', 1),
(663, 105, 'linux and unix , both are opening source code system, so they are free, linux is based on unix, there are some differences between their kernel, and windows do not open source code, so it need cost to use windows .', 'linux and unix , both are opening source code system, so they are free, linux is based on unix, there are some differences between their kernel, and windows do not open source code, so it need cost to use windows .', 1),
(664, 105, 'Wikipedia explains what Unix is fairly well. \r\n\r\nhttp://en.m.wikipedia.org/wiki/Unix ', 'Wikipedia explains what Unix is fairly well. \r\n\r\nhttp://en.m.wikipedia.org/wiki/Unix ', 1),
(665, 105, 'linux is another operating system \r\nfor example . windows 8 is a operating sytem \r\nuse google to do research dude. thats what google was made for', 'linux is another operating system \r\nfor example . windows 8 is a operating sytem \r\nuse google to do research dude. thats what google was made for', 1),
(666, 105, 'it powerful and secure system that also offer to sell programming', 'it powerful and secure system that also offer to sell programming', 1),
(667, 105, 'http://tinyurl.com/neqg5sw', 'http://tinyurl.com/neqg5sw', 1),
(668, 105, 'linux and unix , both are opening source code system, so they are free, linux is based on unix, there are some differences between their kernel, and windows do not open source code, so it need cost to use windows .', 'linux and unix , both are opening source code system, so they are free, linux is based on unix, there are some differences between their kernel, and windows do not open source code, so it need cost to use windows .', 1),
(669, 105, 'Linux is an open source, free to use operating system widely used for computer hardware and software, game development, tablet PCS, mainframes etc. Unix is an operating system commonly used in workstations by IBM and PCs by Solaris, Intel, HP etc.', 'Linux is an open source, free to use operating system widely used for computer hardware and software, game development, tablet PCS, mainframes etc. Unix is an operating system commonly used in workstations by IBM and PCs by Solaris, Intel, HP etc.', 1),
(670, 106, 'Java is a programming language. It''s widely used in all kinds of electronics. It''s used on websites, applications, handheld devices, some cars even have Java programs controlling certain things. \r\n\r\nA big reason it''s so popular is becasue it allows people to write smaller programs, which allows Java to be used on devices with less memory or disk space. The programs are smaller becasue they don''t include the libraries needed to run within the actual executable, instead anyone who uses a Java application or visits a website that uses Java needs to have Java installed on their system. \r\n\r\nWhen you run a Java app, it looks for the libraries on your local computer, which is why Java programs tend to take a long time to load, they are compiled at run time. This is great for portablility, but some people don''t like the extra time it takes to load. \r\n\r\nI don''t care to write in Java, mainly becasue it does too much stuff for you and gives you less access to certain functions other languages let you use. It''s easy and does a lot of stuff for you so lots of new programmers like it.', 'Java is a programming language. It''s widely used in all kinds of electronics. It''s used on websites, applications, handheld devices, some cars even have Java programs controlling certain things. \r\n\r\nA big reason it''s so popular is becasue it allows people to write smaller programs, which allows Java to be used on devices with less memory or disk space. The programs are smaller becasue they don''t include the libraries needed to run within the actual executable, instead anyone who uses a Java application or visits a website that uses Java needs to have Java installed on their system. \r\n\r\nWhen you run a Java app, it looks for the libraries on your local computer, which is why Java programs tend to take a long time to load, they are compiled at run time. This is great for portablility, but some people don''t like the extra time it takes to load. \r\n\r\nI don''t care to write in Java, mainly becasue it does too much stuff for you and gives you less access to certain functions other languages let you use. It''s easy and does a lot of stuff for you so lots of new programmers like it.', 1),
(671, 106, 'Sakthi Software Solutions Pvt Ltd, Offers Best Java Training in Chennai with Placements. \r\n\r\nhttp://www.sssedu.in/java-training-in-ch...\r\nSource(s):\r\nhttp://www.sssedu.in/java-training-in-ch...', 'Sakthi Software Solutions Pvt Ltd, Offers Best Java Training in Chennai with Placements. \r\n\r\nhttp://www.sssedu.in/java-training-in-ch...\r\nSource(s):\r\nhttp://www.sssedu.in/java-training-in-ch...', 1),
(672, 106, 'Java is a object-oriented language that used for the gaming application by using J2ME Stantard (Java to Mobile Enterprise).', 'Java is a object-oriented language that used for the gaming application by using J2ME Stantard (Java to Mobile Enterprise).', 1),
(673, 106, 'I''ve made a course on Java. Check it out below. You get HD videos, quizzes, and pdf''s of the code. It''s free to join. http://www.masterskills.net/java-course/', 'I''ve made a course on Java. Check it out below. You get HD videos, quizzes, and pdf''s of the code. It''s free to join. http://www.masterskills.net/java-course/', 1),
(674, 106, 'Java web services will help in building a web program.Learn how to built a java web program in an effective way. \r\n\r\nWeb services are client and server applications that communicate over the World Wide Web’s (WWW) HyperText Transfer Protocol (HTTP). As described by the World Wide Web Consortium (W3C), web services provide a standard means of interoperating between software applications running on a variety of platforms and frameworks. Web services are characterized by their great interoperability and extensibility, as well as their machine-processable descriptions, thanks to the use of XML. Web services can be combined in a loosely coupled way to achieve complex operations. Programs providing simple services can interact with each other to deliver sophisticated added-value services.t''s free to join. http://www.masterskills.net/java-course/', 'Java web services will help in building a web program.Learn how to built a java web program in an effective way. \r\n\r\nWeb services are client and server applications that communicate over the World Wide Web’s (WWW) HyperText Transfer Protocol (HTTP). As described by the World Wide Web Consortium (W3C), web services provide a standard means of interoperating between software applications running on a variety of platforms and frameworks. Web services are characterized by their great interoperability and extensibility, as well as their machine-processable descriptions, thanks to the use of XML. Web services can be combined in a loosely coupled way to achieve complex operations. Programs providing simple services can interact with each other to deliver sophisticated added-value services. free to join. http://www.masterskills.net/java-course/', 1),
(675, 106, 'Java is a programming language. The main thing that sets java apart from other languages is you can develop web applets.', 'Java is a programming language. The main thing that sets java apart from other languages is you can develop web applets.', 1),
(676, 106, 'Java it is very useful language programing, in my opinion it is the best language , later Oracle bought Sun which is the original company of Java , and now they update its feature always', 'Java it is very useful language programing, in my opinion it is the best language , later Oracle bought Sun which is the original company of Java , and now they update its feature always', 1),
(677, 106, 'java is used to develop severs. \r\njava is in a lot of comercial commpany. \r\njava is uesed by a lot of developers more than c language. \r\njava is used to develop a lot of industrial and game applications.', 'java is used to develop severs. \r\njava is in a lot of comercial commpany. \r\njava is uesed by a lot of developers more than c language. \r\njava is used to develop a lot of industrial and game applications.', 1),
(678, 106, 'Java is a programming language that has many uses. Please refer to the link for complete description. ', 'Java is a programming language that has many uses. Please refer to the link for complete description. ', 1),
(679, 106, 'yeah thats is', 'yeah thats is', 1),
(680, 106, 'Java is a computer language developed at Sun Microsystems in the 1990s. It is similar to the C and C++ programming languages in syntax, but unlike them, it is not compiled to object code. Instead, it renders to something called P-code, which is then interpreted by a virtual machine on the computer it runs on. It was designed to be completely independent of platform, so that a Java program written on a Sun Worstation should run on a Microsoft Windows PC or an Apple Mac without having to be recompiled.\r\n\r\nJava lends itself particularly well to Web applications in part because of this independence, and in part because it has some nice features for distributed and client/server programming.', 'Java is a computer language developed at Sun Microsystems in the 1990s. It is similar to the C and C++ programming languages in syntax, but unlike them, it is not compiled to object code. Instead, it renders to something called P-code, which is then interpreted by a virtual machine on the computer it runs on. It was designed to be completely independent of platform, so that a Java program written on a Sun Worstation should run on a Microsoft Windows PC or an Apple Mac without having to be recompiled.\r\n\r\nJava lends itself particularly well to Web applications in part because of this independence, and in part because it has some nice features for distributed and client/server programming.', 1),
(681, 106, 'Java is a programming language. It''s widely used in all kinds of electronics. It''s used on websites, applications, handheld devices, some cars even have Java programs controlling certain things.\r\n \r\nA big reason it''s so popular is becasue it allows people to write smaller programs, which allows Java to be used on devices with less memory or disk space. The programs are smaller becasue they don''t include the libraries needed to run within the actual executable, instead anyone who uses a Java application or visits a website that uses Java needs to have Java installed on their system.', 'Java is a programming language. It''s widely used in all kinds of electronics. It''s used on websites, applications, handheld devices, some cars even have Java programs controlling certain things.\r\n \r\nA big reason it''s so popular is becasue it allows people to write smaller programs, which allows Java to be used on devices with less memory or disk space. The programs are smaller becasue they don''t include the libraries needed to run within the actual executable, instead anyone who uses a Java application or visits a website that uses Java needs to have Java installed on their system.', 1),
(682, 106, 'Java as in coffee or Java as in computer programming?', 'Java as in coffee or Java as in computer programming?', 1),
(683, 107, ' XML and HTML are both document markup languages. HTML focuses on markup suitable for the web, while XML is a neutral markup language. \r\n\r\nInaccuracies in other answers: \r\n\r\n"HTML was designed to display data and to focus on how data looks." \r\nNo. HTML isn''t really focused on presentation. It''s used to indicate the structural meanings of parts of a document. Example, a heading, a hyperlink, a paragraph. How it actually looks in a web browser, or whatever medium is used, is up to the agent. You should control presentational attributes through CSS. \r\n\r\n"XML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose." \r\n\r\nThat''s a bit misleading. XML and HTML are really subsets of SGML. SGML is so vague and broad in scope, that it isn''t really usable for something like webpages. In fact, HTML is used for richly structured documents over the web, and not XML. XML is a neutral markup language. XHTML is an XML conforming HTML file intended for web use. HTML does not necessarily conform to XML standards. \r\n\r\n"XML is used for representation of data. \r\nhtml is used for presentation of data." \r\nNo! They are both structural markup languages. HTML is *not* used for presentation. It''s used to give semantic and structural meanings to various parts of the document.', ' XML and HTML are both document markup languages. HTML focuses on markup suitable for the web, while XML is a neutral markup language. \r\n\r\nInaccuracies in other answers: \r\n\r\n"HTML was designed to display data and to focus on how data looks." \r\nNo. HTML isn''t really focused on presentation. It''s used to indicate the structural meanings of parts of a document. Example, a heading, a hyperlink, a paragraph. How it actually looks in a web browser, or whatever medium is used, is up to the agent. You should control presentational attributes through CSS. \r\n\r\n"XML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose." \r\n\r\nThat''s a bit misleading. XML and HTML are really subsets of SGML. SGML is so vague and broad in scope, that it isn''t really usable for something like webpages. In fact, HTML is used for richly structured documents over the web, and not XML. XML is a neutral markup language. XHTML is an XML conforming HTML file intended for web use. HTML does not necessarily conform to XML standards. \r\n\r\n"XML is used for representation of data. \r\nhtml is used for presentation of data." \r\nNo! They are both structural markup languages. HTML is *not* used for presentation. It''s used to give semantic and structural meanings to various parts of the document.', 1),
(684, 107, 'HTML is an abbreviation for HyperText Markup Language while XML stands for eXtensible Markup Language.The differences are as follows:- \r\n\r\n1.HTML was designed to display data with focus on how data looks while XML was designed to be a software and hardware independent tool used to transport and store data, with focus on what data is. \r\n\r\n2.HTML is a markup language itself while XML provides a framework for defining markup languages. \r\n\r\n3.HTML is a presentation language while XML is neither a programming language nor a presentation language. \r\n\r\n4.HTML is case insensitive while XML is case sensitive. \r\n\r\n5.HTML is used for designing a web-page to be rendered on the client side while XML is used basically to transport data between the application and the database. \r\n\r\n6.HTML has it own predefined tags while what makes XML flexible is that custom tags can be defined and the tags are invented by the author of the XML document. \r\n\r\n7.HTML is not strict if the user does not use the closing tags but XML makes it mandatory for the user the close each tag that has been used. \r\n\r\n8.HTML does not preserve white space while XML does. \r\n\r\n9.HTML is about displaying data,hence static but XML is about carrying information,hence dynamic. \r\n\r\nThus,it can be said that HTML and XML are not competitors but rather complement to each other \r\nand clearly serving altogether different purposes. ', 'HTML is an abbreviation for HyperText Markup Language while XML stands for eXtensible Markup Language.The differences are as follows:- \r\n\r\n1.HTML was designed to display data with focus on how data looks while XML was designed to be a software and hardware independent tool used to transport and store data, with focus on what data is. \r\n\r\n2.HTML is a markup language itself while XML provides a framework for defining markup languages. \r\n\r\n3.HTML is a presentation language while XML is neither a programming language nor a presentation language. \r\n\r\n4.HTML is case insensitive while XML is case sensitive. \r\n\r\n5.HTML is used for designing a web-page to be rendered on the client side while XML is used basically to transport data between the application and the database. \r\n\r\n6.HTML has it own predefined tags while what makes XML flexible is that custom tags can be defined and the tags are invented by the author of the XML document. \r\n\r\n7.HTML is not strict if the user does not use the closing tags but XML makes it mandatory for the user the close each tag that has been used. \r\n\r\n8.HTML does not preserve white space while XML does. \r\n\r\n9.HTML is about displaying data,hence static but XML is about carrying information,hence dynamic. \r\n\r\nThus,it can be said that HTML and XML are not competitors but rather complement to each other \r\nand clearly serving altogether different purposes. ', 1),
(685, 107, 'In HTML, both the tag semantics and the tag set are fixed. XML specifies neither semantics nor a tag set. \r\n\r\nXML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose.', 'In HTML, both the tag semantics and the tag set are fixed. XML specifies neither semantics nor a tag set. \r\n\r\nXML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose.', 1),
(686, 107, 'I guess that you are trying to learn xml now. There are various ways to see the difference between html and xml. Best way is to see the differences during initial phase as \r\nusage: \r\nHtml: to display contents on browser \r\nxml: Structured way to store and transfer/exchange data. \r\nSyntax: \r\nhtml: they have a set of pre defined tag names that can be used, Ex html, image,table,. Ideally all opening tags should have a closed tag but this is not mandatory. \r\nxml: you can use any tag name Ex root, xyz. All opening tags must be closed compulsorily. \r\n\r\nIn simple terms all well formed html( every opened tag having a closed tag) is a xml. \r\n\r\nExample \r\nHtml \r\n<html> \r\n<body> \r\nThis is a html <br> This is not a xml \r\n</body> \r\n</html> \r\n\r\nps: notice that "br" tag does not have a closing tag \r\n___________________ \r\n_ \r\nXML: \r\n<root> \r\n<parent> \r\n<child> This is a xml</child> \r\n</parent> \r\n</root> \r\n\r\n_________________ \r\nXML and HTML \r\n<html> \r\n<body> \r\nThis is a html and XML \r\n</body> \r\n</html> \r\n\r\nAfter some days once you have worked with xml and html you will find these differences trivial and will think in different ways. and have other questions. For now, good luck with your xml and html.', 'I guess that you are trying to learn xml now. There are various ways to see the difference between html and xml. Best way is to see the differences during initial phase as \r\nusage: \r\nHtml: to display contents on browser \r\nxml: Structured way to store and transfer/exchange data. \r\nSyntax: \r\nhtml: they have a set of pre defined tag names that can be used, Ex html, image,table,. Ideally all opening tags should have a closed tag but this is not mandatory. \r\nxml: you can use any tag name Ex root, xyz. All opening tags must be closed compulsorily. \r\n\r\nIn simple terms all well formed html( every opened tag having a closed tag) is a xml. \r\n\r\nExample \r\nHtml \r\n<html> \r\n<body> \r\nThis is a html <br> This is not a xml \r\n</body> \r\n</html> \r\n\r\nps: notice that "br" tag does not have a closing tag \r\n___________________ \r\n_ \r\nXML: \r\n<root> \r\n<parent> \r\n<child> This is a xml</child> \r\n</parent> \r\n</root> \r\n\r\n_________________ \r\nXML and HTML \r\n<html> \r\n<body> \r\nThis is a html and XML \r\n</body> \r\n</html> \r\n\r\nAfter some days once you have worked with xml and html you will find these differences trivial and will think in different ways. and have other questions. For now, good luck with your xml and html.', 1),
(687, 107, 'XML is a markup language for documents containing structured information. Structured information contains both content (words, pictures, etc.) and some indication of what role that content plays. \r\n\r\nIn HTML, both the tag semantics and the tag set are fixed. XML specifies neither semantics nor a tag set. \r\n\r\nXML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose. \r\n\r\nBasically, HTML comes bound with a set of semantics and does not provide arbitrary structure. ', 'XML is a markup language for documents containing structured information. Structured information contains both content (words, pictures, etc.) and some indication of what role that content plays. \r\n\r\nIn HTML, both the tag semantics and the tag set are fixed. XML specifies neither semantics nor a tag set. \r\n\r\nXML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose. \r\n\r\nBasically, HTML comes bound with a set of semantics and does not provide arbitrary structure. ', 1),
(688, 107, 'html is "hyper text mark-up language" and it''s the language of the internet, it''s all the codes that make up each website and web page. like <a> </a> and it translates to colors and the whole formatting of the website or page. XML is really a meta-language for describing markup languages. In other words, XML provides a facility to define tags and the structural relationships between them.', 'html is "hyper text mark-up language" and it''s the language of the internet, it''s all the codes that make up each website and web page. like <a> </a> and it translates to colors and the whole formatting of the website or page. XML is really a meta-language for describing markup languages. In other words, XML provides a facility to define tags and the structural relationships between them.', 1),
(689, 107, 'The Extensible Markup Language (XML) is a W3C-recommended general-purpose markup language that supports a wide variety of applications. XML languages or ''dialects'' are easy to design and to process. XML is also designed to be reasonably human-legible, and to this end, terseness was not considered essential in its structure. XML is a simplified subset of Standard Generalized Markup Language (SGML). Its primary purpose is to facilitate the sharing of data across different information systems, particularly systems connected via the Internet. Formally defined languages based on XML (such as RSS, MathML, XHTML, Scalable Vector Graphics, MusicXML and thousands of other examples) allow diverse software reliably to understand information formatted and passed in these languages. \r\n\r\n\r\nHyperText Markup Language (HTML) is the predominant markup language for the creation of web pages. It provides a means to describe the structure of text-based information in a document — by denoting certain text as headings, paragraphs, lists, and so on — and to supplement that text with interactive forms, embedded images, and other objects. HTML can also describe, to some degree, the appearance and semantics of a document, and can provide additional cues, such as embedded scripting language code, that can affect the behavior of web browsers and other HTML processors.', 'The Extensible Markup Language (XML) is a W3C-recommended general-purpose markup language that supports a wide variety of applications. XML languages or ''dialects'' are easy to design and to process. XML is also designed to be reasonably human-legible, and to this end, terseness was not considered essential in its structure. XML is a simplified subset of Standard Generalized Markup Language (SGML). Its primary purpose is to facilitate the sharing of data across different information systems, particularly systems connected via the Internet. Formally defined languages based on XML (such as RSS, MathML, XHTML, Scalable Vector Graphics, MusicXML and thousands of other examples) allow diverse software reliably to understand information formatted and passed in these languages. \r\n\r\n\r\nHyperText Markup Language (HTML) is the predominant markup language for the creation of web pages. It provides a means to describe the structure of text-based information in a document — by denoting certain text as headings, paragraphs, lists, and so on — and to supplement that text with interactive forms, embedded images, and other objects. HTML can also describe, to some degree, the appearance and semantics of a document, and can provide additional cues, such as embedded scripting language code, that can affect the behavior of web browsers and other HTML processors.', 1),
(690, 107, 'The main difference between XML and HTML \r\n\r\nXML is not a replacement for HTML. \r\nXML and HTML were designed with different goals: \r\n\r\nXML was designed to describe data and to focus on what data is. \r\nHTML was designed to display data and to focus on how data looks. \r\n\r\nHTML is about displaying information, XML is about describing information.', 'The main difference between XML and HTML \r\n\r\nXML is not a replacement for HTML. \r\nXML and HTML were designed with different goals: \r\n\r\nXML was designed to describe data and to focus on what data is. \r\nHTML was designed to display data and to focus on how data looks. \r\n\r\nHTML is about displaying information, XML is about describing information.', 1),
(691, 107, 'XML is used for representation of data. \r\nhtml is used for presentation of data.', 'XML is used for representation of data. \r\nhtml is used for presentation of data.', 1),
(692, 107, 'HTML is programming language while XML is like a database', 'HTML is programming language while XML is like a database', 1),
(693, 107, 'You can find the answer here https://in.answers.yahoo.com/question/index?qid=20061229085607AACEijM&page=2', 'You can find the answer here https://in.answers.yahoo.com/question/index?qid=20061229085607AACEijM&page=2', 1);
INSERT INTO `response` (`r_id`, `q_id`, `resp`, `resp_disp`, `classify`) VALUES
(694, 107, 'Simply XML was designed to describe data, with focus on what data is whereas HTML was designed to display data, with focus on how data looks. \r\n\r\n\r\nXML is the acronym from Extensible Markup Language (meta-language of noting/marking). XML is a resembling language with HTML. It was developed for describing data. \r\nThe XML tags are not pre-defined in XML. You will have to create tags according to your needs. \r\nXML is self descriptive. \r\nXML uses DDT principle (Defining the Document Type) to formally describe the data. \r\nThe main difference between XML and HTML: XML is not a substitute for HTML. \r\n\r\nXML was developed to describe data and to focalize on what the data represent. \r\nHTML was developed to display data about to focalize on the way that data looks. \r\nHTML is about displaying data, XML is about describing information. \r\nXML is extensible. \r\n\r\n\r\nThe tags used to mark the documents and the structures of documents in HTML are pre-defined. The author of HTML documents can use only tags that were previously defined in HTML. The Standard XML gives you the possibility to define personal structures and tags. \r\n\r\nIt is important to understand that XML is not a substitute for HTML. In the future development of the Web, XML will be the main language to describe the structure and the Web data, and the HTML language will be responsible for displaying the data. \r\n\r\nWe participated to the evolution of XML since its appearance. It is amazing to observe its rapid evolution, and how fast it was adopted by the majority of software developers. We strongly believe that XML will become as important as HTML for the future web evolution, especially when it comes to data manipulation. \r\n\r\nXML can store data separately from HTML. \r\nXML can be used to store data inside the HTML documents. \r\nXML can be used as a format for exchanging information. \r\nXML can be used to store data in files and databases. \r\n\r\n\r\nThe HTML pages are used to display data. The data are sometimes stored in the interior of HTML pages. Using XML, you can store data in a separated file. This way, you can easily concentrate on using HTML for formatting and displaying, and you can also be certain that the modifications won’t bring any modifications to any HTML code. \r\n\r\nXML can also store data inside the HTML documents. The XML data will store data in HTML documents as “data islands.” You can concentrate on HTML to format and display data. \r\n\r\nIn the real world, the calculation systems and the databases are containing data in incompatible formats. One of the most soliciting provocations for developers was exchanging data between incompatible systems over the internet. Converting XML data can reduce the complexity, and it can also create data that are easy to read by any kind of application. \r\n\r\nXML can be used to store data in files or databases. You can write applications to store and recover information from the hard disks, and you can write generic application to display certain types of data.', 'Simply XML was designed to describe data, with focus on what data is whereas HTML was designed to display data, with focus on how data looks. \r\n\r\n\r\nXML is the acronym from Extensible Markup Language (meta-language of noting/marking). XML is a resembling language with HTML. It was developed for describing data. \r\nThe XML tags are not pre-defined in XML. You will have to create tags according to your needs. \r\nXML is self descriptive. \r\nXML uses DDT principle (Defining the Document Type) to formally describe the data. \r\nThe main difference between XML and HTML: XML is not a substitute for HTML. \r\n\r\nXML was developed to describe data and to focalize on what the data represent. \r\nHTML was developed to display data about to focalize on the way that data looks. \r\nHTML is about displaying data, XML is about describing information. \r\nXML is extensible. \r\n\r\n\r\nThe tags used to mark the documents and the structures of documents in HTML are pre-defined. The author of HTML documents can use only tags that were previously defined in HTML. The Standard XML gives you the possibility to define personal structures and tags. \r\n\r\nIt is important to understand that XML is not a substitute for HTML. In the future development of the Web, XML will be the main language to describe the structure and the Web data, and the HTML language will be responsible for displaying the data. \r\n\r\nWe participated to the evolution of XML since its appearance. It is amazing to observe its rapid evolution, and how fast it was adopted by the majority of software developers. We strongly believe that XML will become as important as HTML for the future web evolution, especially when it comes to data manipulation. \r\n\r\nXML can store data separately from HTML. \r\nXML can be used to store data inside the HTML documents. \r\nXML can be used as a format for exchanging information. \r\nXML can be used to store data in files and databases. \r\n\r\n\r\nThe HTML pages are used to display data. The data are sometimes stored in the interior of HTML pages. Using XML, you can store data in a separated file. This way, you can easily concentrate on using HTML for formatting and displaying, and you can also be certain that the modifications won’t bring any modifications to any HTML code. \r\n\r\nXML can also store data inside the HTML documents. The XML data will store data in HTML documents as “data islands.” You can concentrate on HTML to format and display data. \r\n\r\nIn the real world, the calculation systems and the databases are containing data in incompatible formats. One of the most soliciting provocations for developers was exchanging data between incompatible systems over the internet. Converting XML data can reduce the complexity, and it can also create data that are easy to read by any kind of application. \r\n\r\nXML can be used to store data in files or databases. You can write applications to store and recover information from the hard disks, and you can write generic application to display certain types of data.', 1);

-- --------------------------------------------------------

--
-- Table structure for table `training`
--

CREATE TABLE IF NOT EXISTS `training` (
`t_id` int(11) NOT NULL,
  `q_id` int(11) NOT NULL,
  `resp` longtext NOT NULL,
  `class` varchar(11) NOT NULL
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=90 ;

--
-- Dumping data for table `training`
--

INSERT INTO `training` (`t_id`, `q_id`, `resp`, `class`) VALUES
(1, 207, 'String is used to manipulate character strings that cannot be changed (read-only and immutable).\n\nStringBuffer is used to represent characters that can be modified.\n\nPerformance wise, StringBuffer is faster when performing concatenations. This is because when you concatenate a String, you are creating a new object (internally) every time since String is immutable.\n\nYou can also use StringBuilder which is similar to StringBuffer except it is not synchronized. The maximum size for either of these is Integer.MAX_VALUE (231 - 1 = 2,147,483,647) or maximum heap size divided by 2 (see how many characters can a Java string have?). More information here.', 'ans'),
(2, 207, ' While I understand that this is not a major differentiating factor, I noticed today that StringBuffer(and StringBuilder) provides some interesting methods that String doesn\\''t.\n\nreverse()\nsetCharAt()', 'non'),
(3, 207, 'String is immutable. \nWhy? Check here.\n\nStringBuffer is not. It is thread safe. \nFurther questions like when to use which and other concepts can be figured out following this.\n\nHope this helps.', 'non'),
(5, 202, '== tests for reference equality.\r\n\r\n.equals() tests for value equality.\r\n\r\nConsequently, if you actually want to test whether two strings have the same value you should use .equals().\r\n\r\nThere are however a few situations where you can guarantee that two strings with the same value will be represented by the same object because of String interning. Those cases are specified by the Java Language Specification.\r\n\r\n== is for testing whether two strings are the same object.\r\n\r\n// These two have the same value\r\nnew String("test").equals("test") // --> true \r\n\r\n// ... but they are not the same object\r\nnew String("test") == "test" // --> false \r\n\r\n// ... neither are these\r\nnew String("test") == new String("test") // --> false \r\n\r\n// ... but these are because literals are interned by \r\n// the compiler and thus refer to the same object\r\n"test" == "test" // --> true \r\n\r\n// concatenation of string literals happens at compile time,\r\n// also resulting in the same object\r\n"test" == "te" + "st" // --> true\r\n\r\n// but .substring() is invoked at runtime, generating distinct objects\r\n"test" == "!test".substring(1) // --> false\r\n\r\n// interned strings can also be recalled by calling .intern()\r\n"test" == "!test".substring(1).intern() // --> true\r\nIt is important to note that == is a bit cheaper than equals() (a single reference comparison instead of a method call), thus, in situations where it is applicable (i.e. you can guarantee that you are only dealing with interned strings) it can present an important performance improvement. However, these situations are rare.\r\n\r\nMore information here: What''s wrong with using == to compare floats in Java?', 'ans'),
(6, 202, '== tests object references, .equals() tests the string values.\r\n\r\nSometimes it looks as if == compares values, because Java does some behind-the-scenes stuff to make sure identical in-line strings are actually the same object.\r\n\r\nFor example:\r\n\r\nString fooString1 = new String("foo");\r\nString fooString2 = new String("foo");\r\n\r\n// Evaluates to false\r\nfooString1 == fooString2;\r\n\r\n// Evaluates to true\r\nfooString1.equals(fooString2);\r\n\r\n// Evaluates to true, because Java uses the same object\r\n"bar" == "bar";\r\nBut beware of nulls!\r\n\r\n== handles null strings fine, but calling .equals() from a null string will cause an exception:\r\n\r\nString nullString1 = null;\r\nString nullString2 = null;\r\n\r\n// Evaluates to true\r\nnullString1 == nullString2;\r\n\r\n// Throws an Exception\r\nnullString1.equals(nullString2);', 'ans'),
(7, 202, '== compares Object reference\r\n\r\n.equals() compares String value\r\n\r\nSometimes == gives illusions of comparing String values, in following cases\r\n\r\nString a="Test";\r\nString b="Test";\r\nif(a==b) ===> true\r\nThis is a because when you create any String literal, JVM first searches for that literal in String pool, if it matches, same reference will be given to that new String, because of this we are getting\r\n\r\n(a==b) ===> true\r\n\r\n                       String Pool\r\n     b -----------------> "test" <-----------------a\r\n== fails in following case\r\n\r\nString a="test";\r\nString b=new String("test");\r\nif (a==b) ===> false\r\nin this case for new String("test") the statement new String will be created in heap that reference will be given to b, so b will be given reference in heap not in String Pool. Now a is pointing to String in String pool while b is pointing to String in heap, because of that we are getting\r\n\r\nif(a==b) ===> false.\r\n\r\n                String Pool\r\n     "test" <-------------------- a\r\n\r\n                   Heap\r\n     "test" <-------------------- b\r\nWhile .equals() always compares value of String so it gives true in both cases\r\n\r\nString a="Test";\r\nString b="Test";\r\nif(a.equals(b)) ===> true\r\n\r\nString a="test";\r\nString b=new String("test");\r\nif(a.equals(b)) ===> true\r\nSo using .equals() is awalys better.\r\n\r\nHope this will help.', 'ans'),
(8, 202, 'String a = new String("foo");\r\nString b = new String("foo");\r\nSystem.out.println(a == b); // prints false\r\nSystem.out.println(a.equals(b)); // prints true\r\nMake sure you understand why. It''s because the == comparison only compares references; the equals() method does a character-by-character comparison of the contents.\r\n\r\nWhen you call new for a and b, each one gets a new reference that points to the "foo" in the string table. The references are different, but the content is the same.', 'non'),
(9, 202, 'Yea, it''s bad...\r\n\r\n"==" means that your two string references are exactly the same object. You may have heard that this is the case because Java keeps sort of a literal table (which it does), but that is not always the case. Some strings are loaded in different ways, constructed from other strings, etc., so you must never assume that two identical strings are stored in the same location.\r\n\r\nEquals does the real comparison for you.', 'non'),
(10, 202, '== performs a reference equality check, whether the 2 objects (strings in this case) refer to the same object in the memory.\r\n\r\nThe equals() method will check if the contents or the states of 2 objects are the same.\r\n\r\nObviously == is faster, but will (might) give false results in many cases if you just want to tell if 2 strings hold the same text.\r\n\r\nDefinitely the use of equals() method is recommended.\r\n\r\nDon''t worry about the performance. Some things to encourage using String.equals():\r\n\r\nImplementation of String.equals() first checks for reference equality (using ==), and if the 2 strings are the same by reference, no further calculation is performed!\r\nIf the 2 string references are not the same, String.equals() will next check the lengths of the strings. This is also a fast operation because the String class stores the length of the string, no need to count the characters or code points. If the lengths differ, no further check is performed, we know they cannot be equal.\r\nOnly if we got this far will the contents of the 2 strings be actually compared, and this will be a short-hand comparison: not all the characters will be compared, if we find a different character (at the same position in the 2 strings), no further characters will be checked.\r\nWhen all is said and done, even if we have guarantee that the strings are interns, using the equals() method is still not that overhead that one might think, definitely the recommended way. If you want efficient reference check, then use enums where it is guaranteed by the language specification and implementation that the same enum value will be the same object (by reference).', 'non'),
(11, 203, 'This code separates a string into tokens and stores them in an array of strings, and then compares a variable with the first home ... why isn''t it working?\r\n\r\npublic static void main(String...aArguments) throws IOException {\r\n\r\n    String usuario = "Jorman";\r\n    String password = "14988611";\r\n\r\n    String strDatos = "Jorman 14988611";\r\n    StringTokenizer tokens = new StringTokenizer(strDatos, " ");\r\n    int nDatos = tokens.countTokens();\r\n    String[] datos = new String[nDatos];\r\n    int i = 0;\r\n\r\n    while (tokens.hasMoreTokens()) {\r\n        String str = tokens.nextToken();\r\n        datos[i] = str;\r\n        i++;\r\n    }\r\n\r\n    //System.out.println (usuario);\r\n\r\n    if ((datos[0] == usuario)) {\r\n        System.out.println("WORKING");\r\n    }\r\n}', 'ans'),
(12, 203, 'Use the string.equals(String other) function to compare strings, not the == operator.\r\n\r\nThe function checks the actual contents of the string, the == operator checks whether the references to the objects are equal. Note that string constants are usually "interned" such that two constants with the same value can actually be compared with ==, but it''s better not to rely on that.\r\n\r\nif (usuario.equals(datos[0])) {\r\n    ...\r\n}\r\nNB: the compare is done on ''usuario'' because that''s guaranteed non-null in your code, although you should still check that you''ve actually got some tokens in the datos array otherwise you''ll get an array-out-of-bounds exception.', 'ans'),
(13, 203, '== operator check if the two references point to the same object or not.\r\n.equals() check for the actual string content(value).\r\nNote that .equals() method belongs to Class Object(Super class of all classes). You need to override it as per you class requirement but for String it is already implemented and it checks whether two string have same value or not.\r\n\r\nCase1)\r\nString s1 = "StackOverflow";\r\nString s2 = "StackOverflow";\r\ns1 == s1;      //true\r\ns1.equals(s2); //true\r\nReason:  String literals created without null are stores in String pool in permgen area of heap. So both s1 and s2 point to same object in the pool.\r\nCase2)\r\nString s1 = new String("StackOverflow");\r\nString s2 = new String("StackOverflow");\r\ns1 == s1;      //false\r\ns1.equals(s2); //true\r\nReason: If you create String object using new keyword separate space is allocated to it on heap.', 'ans'),
(14, 203, 'Someone said on a post higher up that == is used for int and for checking nulls. It may also be used to check for Boolean operations and char types.\r\n\r\nBe very careful though and double check that you are using a char and not a String. for example\r\n\r\n    String strType = "a";\r\n    char charType = ''a'';\r\nfor strings you would then check This would be correct\r\n\r\n    if(strType.equals("a")\r\n        do something\r\nbut\r\n\r\n    if(charType.equals(''a'')\r\n        do something else\r\nwould be incorrect, you would need to do the following\r\n\r\n    if(charType == ''a'')\r\n         do something else', 'non'),
(15, 203, 'The .equals() will check if the two strings have the same value and return the boolean value where as the == operator checks to see if the two strings are the same object.', 'non'),
(16, 203, 'Use Split rather than tokenizer,it will surely provide u exact output for E.g:\r\n\r\nstring name="Harry";\r\nstring salary="25000";\r\nstring namsal="Harry 25000";\r\nstring[] s=namsal.split(" ");\r\nfor(int i=0;i<s.length;i++)\r\n{\r\nSystem.out.println(s[i]);\r\n}\r\nif(s[0].equals("Harry"))\r\n{\r\nSystem.out.println("Task Complete");\r\n}\r\nAfter this I am sure you will get better results.....', 'non'),
(17, 5, 'Hello, \r\n\r\nI am trying to boost my router range by using my notebook as a repeater. \r\nSince I only have only 1 wireless adapter on my notebook, maybe this is the reason I am getting this error, though I know this can be achieved and from what I read on this site people have managed it. \r\nI am running window 7 x64 and have a HP dv6 pavilion 2100 notebook with a broadcom wireless adapter. \r\nEach time I try to start the server I get the following error: \r\nThe group or resource is not in the correct state to perform the requested operation\r\nPlease advise! \r\n\r\nThank you', 'non'),
(18, 5, 'Hey,\r\n\r\nI found the reason I was having this problem.\r\nThe Microsoft Virtual WiFi Miniport Adapter wasn''t working.\r\nTo make sure it''s working do the following:\r\n1) Open an elevated Command Prompt window\r\n2) type: \r\nnetsh wlan set hostednetwork mode=allow', 'ans'),
(19, 5, 'Helle,\r\n\r\ni''m using an DELL Presision M4700 with Windows 7 Prof x64. Have the same problem. Service is running but after start getting the given error.\r\n\r\n(Using actual version 1.0, downloaded today)\r\n\r\nThank''s', 'non'),
(20, 5, '__Hello Virtual WIFI users. Heres the TRUE solution and I hope this would work \r\nand if it works please follow my little favor. (My pc is windows 7) \r\n__ \r\nStep 1: Click Open Network and Sharing Center on the connection status area. \r\n\r\nStep 2: Click Change Adapter Setting (hint: at the left side). \r\n\r\nStep 3: Find the Maryfi Connection. \r\n\r\nStep 4: Right click it and click Enable. \r\n\r\n\r\nSo simple, so my favor is... \r\n\r\nfollow me on Instagram,Facebook,Kik \r\nInstagram: www.instagram.com/wenxiewenz \r\nKik: wenxiewenz \r\nFacebook: www.facebook.com/wenxie.wenz \r\n\r\n\r\nThank You hope it Help.', 'ans'),
(21, 5, 'Solution video : http://www.youtube.com/watch?v=kr5nKTqa1vk', 'non'),
(22, 5, 'it was quite the headache until I found YMatrix''s suggestion, which did the trick for me. I''m on Win8. EDIT:It would be convenient if the command was integrated into Virtual Router. hey! follow mine...look below', 'non'),
(23, 101, 'There are several differences between HashMap and Hashtable in Java:\r\n\r\nHashtable is synchronized, whereas HashMap is not. This makes HashMap better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.\r\n\r\nHashtable does not allow null keys or values.  HashMap allows one null key and any number of null values.\r\n\r\nOne of HashMap''s subclasses is LinkedHashMap, so in the event that you''d want predictable iteration order (which is insertion order by default), you could easily swap out the HashMap for a LinkedHashMap. This wouldn''t be as easy if you were using Hashtable.\r\n\r\nSince synchronization is not an issue for you, I''d recommend HashMap. If synchronization becomes an issue, you may also look at ConcurrentHashMap.', 'ans'),
(24, 101, 'This question is often asked in interview to check whether candidate understands correct usage of collection classes and is aware of alternative solutions available.\r\n\r\nThe HashMap class is roughly equivalent to Hashtable, except that it is non synchronized and permits nulls. (HashMap allows null values as key and value whereas Hashtable doesn''t allow nulls).\r\nHashMap does not guarantee that the order of the map will remain constant over time.\r\nHashMap is non synchronized whereas Hashtable is synchronized.\r\nIterator in the HashMap is fail-safe while the enumerator for the Hashtable is not and throw ConcurrentModificationException if any other Thread modifies the map structurally by adding or removing any element except Iterator''s own remove() method. But this is not a guaranteed behavior and will be done by JVM on best effort.\r\nNote on Some Important Terms\r\n\r\nSynchronized means only one thread can modify a hash table at one point of time. Basically, it means that any thread before performing an update on a hashtable will have to acquire a lock on the object while others will wait for lock to be released.\r\nFail-safe is relevant from the context of iterators. If an iterator has been created on a collection object and some other thread tries to modify the collection object "structurally", a concurrent modification exception will be thrown. It is possible for other threads though to invoke "set" method since it doesn''t modify the collection "structurally". However, if prior to calling "set", the collection has been modified structurally, "IllegalArgumentException" will be thrown.\r\nStructurally modification means deleting or inserting element which could effectively change the structure of map.\r\nHashMap can be synchronized by\r\n\r\nMap m = Collections.synchronizeMap(hashMap);\r\n\r\nMap provides Collection views instead of direct support for iteration via Enumeration objects. Collection views greatly enhance the expressiveness of the interface, as discussed later in this section. Map allows you to iterate over keys, values, or key-value pairs; Hashtable does not provide the third option. Map provides a safe way to remove entries in the midst of iteration; Hashtable did not. Finally, Map fixes a minor deficiency in the Hashtable interface. Hashtable has a method called contains, which returns true if the Hashtable contains a given value. Given its name, you''d expect this method to return true if the Hashtable contained a given key, because the key is the primary access mechanism for a Hashtable. The Map interface eliminates this source of confusion by renaming the method containsValue. Also, this improves the interface''s consistency — containsValue parallels containsKey.\r\n\r\nThe Map Interface', 'ans'),
(25, 101, 'Hashtable is similar to the HashMap and has a similar interface. It is recommended that you use HashMap, unless you require support for legacy applications or you need synchronisation, as the Hashtables methods are synchronised. So in your case as you are not multi-threading, HashMaps are your best bet.', 'ans'),
(26, 101, 'Beside all the other important aspects already mentioned here, Collections API (e.g. Map interface) is being modified all the time to conform to the "latest and greatest" additions to Java spec.\n\nFor example, compare Java 5 Map iterating:\n\nfor (Elem elem : map.keys()) {\n  elem.doSth();\n}\nversus the old Hashtable approach:\n\nfor (Enumeration en = htable.keys(); en.hasMoreElements(); ) {\n  Elem elem = (Elem) en.nextElement();\n  elem.doSth();\n}\nIn Java 1.8 we are also promised to be able to construct and access HashMaps like in good old scripting languages:\n\nMap<String,Integer> map = { "orange" : 12, "apples" : 15 };\nmap["apples"];\nUpdate: No, they won''t land in 1.8... :(\n\nAre Project Coin''s collection enhancements going to be in JDK8?', 'non'),
(27, 101, 'Note, that a lot of the answers state that Hashtable is synchronised. In practice this buys you very little. The synchronization is on the accessor / mutator methods will stop two threads adding or removing from the map concurrently, but in the real world you will often need additional synchronisation.\r\n\r\nA very common idiom is to "check then put" - i.e. look for an entry in the Map, and add it if it does not already exist. This is not in any way an atomic operation whether you use Hashtable or HashMap.\r\n\r\nAn equivalently synchronised HashMap can be obtained by:\r\n\r\nCollections.synchronizedMap(myMap);\r\nBut to correctly implement this logic you need additional synchronisation of the form:\r\n\r\nsynchronized(myMap) {\r\n    if (!myMap.containsKey("tomato"))\r\n        myMap.put("tomato", "red");\r\n}\r\nEven iterating over a Hashtable''s entries (or a HashMap obtained by Collections.synchronizedMap) is not thread safe unless you also guard the Map from being modified through additional synchronization.\r\n\r\nImplementations of the ConcurrentMap interface (for example ConcurrentHashMap) solve some of this by including thread safe check-then-act semantics such as:\r\n\r\nConcurrentMap.putIfAbsent(key, value);', 'non'),
(28, 101, 'Based on the info here, I''d recommend going with HashMap. I think the biggest advantage is that Java will prevent you from modifying it while you are iterating over it, unless you do it through the iterator.', 'non'),
(29, 102, 'So pretend you''re building a house. The first thing you would need is to create a frame for the house - the doors, the windows, the rooms, the hallways, etc. That''s basically what HTML does - it sets up the site. HTML is also used whenever you write a page or post on your website - it''s the language you primarily use to type in. \r\n\r\nGoing back to the same analogy, whenever you paint a room in your house or add a piece of furniture or decor, that relates to CSS. CSS changes the colors, fonts, etc of the site and makes it more elegant. \r\n\r\nJavaScript doesn''t have quite as big of a role as CSS or HTML in web design (the majority of websites tend to use something called PHP instead of JavaScript), but if you do use JavaScript it''s probably to make clickable elements on your site.', 'ans'),
(30, 102, 'CSS stands for Cascading Style Sheets, and is used in programming to allow a set of similar pages to look the same and with the same format. HTML is the basic programming language used to code and design homepages and things like that. In Google Chrome, if you right click something and then click on ''inspect element'' it will actually display the HTML coding of that specific page and specific item. I don''t know about JavaScript, but there are many books availible to learn what it is and how to code it such as ''JavaScript for dummies''. I hope this was helpful.', 'ans'),
(31, 102, 'Cascading Style Sheets (CSS) is a style sheet language used for describing the look and formatting of a document written in a markup language. \r\n\r\nJavaScript is the programming language of HTML and the Web. Programming makes computers do what you want them to do. This tutorial will teach you JavaScript from basic to advanced. \r\n\r\n\r\nHTML is the language that describes the structure and the semantic content of a web document. Content within a web page is tagged with HTML elements such as <img> , <title> , <p> , <div> , <picture> , and so forth. These elements form the building blocks of a website.', 'ans'),
(32, 102, 'its very easy, in general its a three different of web developing languages. html is basically what the web contain the text the links the , the CSS is the Style Sheet, it place everything in the order you want, also colors fonts and backgrounds. the java script make the website more interactive.', 'non'),
(33, 102, 'These are basic languages used in website designing.', 'non'),
(34, 102, 'Make the effort of visiting w3schools.com and read about all of them. \r\nYou will learn more than you can do here.', 'non'),
(35, 103, 'Do not hurry software/CD to install your printer into your Laptop. Just go control panel you click printers/devices and select Add Printer.Then if you connect to a network you provide IP address of the Printer. If local connections required you install your printer directly with the actual printer cable from computer to printer as manual method.', 'ans'),
(36, 103, 'Here''s the HP link that should help. Be sure to save the file and make a copy on a CD or flash drive in case you need to re-install the driver again. \r\n\r\nhttp://support.hp.com/us-en/drivers/', 'ans'),
(37, 103, 'Just download the installation program from HP''s website. It''s probably a newer version than what was on the CD, anyway, so why do you want to bother with the CD?', 'ans'),
(38, 103, 'Best option download online', 'non'),
(39, 103, 'No worry dear, download cd online . . .', 'non'),
(40, 103, 'print it on a USB and go to bestbuy', 'non'),
(41, 103, 'Did you get it working///????', 'non'),
(42, 206, 'Here is a good explanation: http://carcino.gen.nz/tech/cpp/struct_vs_class.php', 'non'),
(43, 206, 'What''s the difference between the keywords struct and class?\r\n\r\nThe members and base classes of a struct are public by default, while in class, they default to private. Note: you should make your base classes explicitly public, private, or protected, rather than relying on the defaults.\r\n\r\nStruct and class are otherwise functionally equivalent.\r\n\r\nOK, enough of that squeaky clean techno talk. Emotionally, most developers make a strong distinction between a class and a struct. A struct simply feels like an open pile of bits with very little in the way of encapsulation or functionality. A class feels like a living and responsible member of society with intelligent services, a strong encapsulation barrier, and a well defined interface. Since that''s the connotation most people already have, you should probably use the struct keyword if you have a class that has very few methods and has public data (such things do exist in well designed systems!), but otherwise you should probably use the class keyword.', 'ans'),
(44, 206, 'It''s worth remembering C++''s origins in, and compatibility with, C.\r\n\r\nC has structs, it has no concept of encapsulation, so everything is public.\r\n\r\nBeing public by default is generally considered a bad idea when taking an object-oriented approach, so in making a form of C that is natively conducive to OOP (you can do OO in C, but it won''t help you) which was the idea in C++ (originally "C With Classes"), it makes sense to make members private by default.\r\n\r\nOn the other hand, if Stroustrup had changed the semantics of struct so that its members where private by default, it would have broken compatibility (it is no longer as often true as the standards diverged, but all valid C programs were also valid C++ programs, which had a big effect on giving C++ a foothold).\r\n\r\nSo a new keyword, class was introduced to be exactly like a struct, but private by default.\r\n\r\nIf C++ had come from scratch, with no history, then it would probably have only one such keyword. It also probably wouldn''t have made the impact it made.\r\n\r\nIn general, people will tend to use struct when they are doing something like how structs are used in C; public members, no constructor (as long as it isn''t in a union, you can have constructors in structs, just like with classes, but people tend not to), no virtual methods, etc. Since languages are as much to communicate with people reading the code as to instruct machines (or else we''d stick with assembly and raw VM opcodes) it''s a good idea to stick with that.', 'non'),
(45, 206, 'Class'' members are private by default. Struct''s members are public by default. Besides that there are no other differences.', 'ans'),
(46, 206, 'STRUCT is a type of Abstract Data Type that divides up a given chunk of memory according to the structure specification. Structs are particularly useful in file serialization/deserialization as the structure can often be written to the file verbatim. (i.e. Obtain a pointer to the struct, use the SIZE macro to compute the number of bytes to copy, then move the data in or out of the struct.)\r\n\r\nClasses are a different type of abstract data type that attempt to ensure information hiding. Internally, there can be a variety of machinations, methods, temp variables, state variables. etc. that are all used to present a consistent API to any code which wishes to use the class.\r\n\r\nIn effect, structs are about data, classes are about code.\r\n\r\nHowever, you do need to understand that these are merely abstractions. It''s perfectly possible to create structs that look a lot like classes and classes that look a lot like structs. In fact, the earliest C++ compilers were merely pre-compilers that translates C++ code to C. Thus these abstractions are a benefit to logical thinking, not necessarily an asset to the computer itself.\r\n\r\nBeyond the fact that each is a different type of abstraction, Classes provide solutions to the C code naming puzzle. Since you can''t have more than one function exposed with the same name, developers used to follow a pattern of _(). e.g. mathlibextreme_max(). By grouping APIs into classes, similar functions (here we call them "methods") can be grouped together and protected from the naming of methods in other classes. This allows the programmer to organize his code better and increase code reuse. In theory, at least.', 'ans'),
(47, 206, 'The only other difference is the default inheritance of classes and structs, which, unsurprisingly, is private and public respectively.', 'ans'),
(48, 206, ' In classes all the members by default are private but in structure members are public by default.\r\n\r\nThere is no term like constructor and destructor for structs, but for class compiler creates default if you don''t provide.\r\n\r\nSizeof empty structure is 0 Bytes wer as Sizeof empty class is 1 Byte The struct default access type is public. A struct should typically be used for grouping data.\r\n\r\nThe class default access type is private, and the default mode for inheritance is private. A class should be used for grouping data and methods that operate on that data.\r\n\r\nIn short, the convention is to use struct when the purpose is to group data, and use classes when we require data abstraction and, perhaps inheritance.\r\n\r\nIn C++ structures and classes are passed by value, unless explicitly de-referenced. In other languages classes and structures may have distinct semantics - ie. objects (instances of classes) may be passed by reference and structures may be passed by value. Note: There are comments associated with this question. See the discussion page to add to the conversation.', 'ans'),
(49, 205, 'David''s answer provides the meaning of each access modifier. As for when to use each, I''d suggest making public all classes and the methods of each class that are meant for external use (it''s API), and everything else private. You''ll develop over time a sense for when to make some classes package-private and when to declare certain methods protected for use in subclasses.', 'non'),
(50, 205, 'The difference can be found in the links already provided but which one to use usually comes down to the "Principle of Least Knowledge". Only allow the least visibility that is needed.', 'non'),
(51, 205, 'Access Modifiers are there to restrict access at several level.\r\n\r\nPublic : it is basically as simple as you can access from any class either that is in same package or not.\r\n\r\nTo access if you are in same package you can access directly but if you are in other package then you can create object of class.\r\n\r\nDefault : it is accessible in same package from any of the class of package.\r\n\r\nto access you can create object of class. but you can not access this variable outside of the package.\r\n\r\nProtected : you can access variables in same package as well as subclass in any other package. so basically it is default + Inherited behavior.\r\n\r\nTo access protected field defined in base class you can create object of child class.\r\n\r\nPrivate : it can be access in same class.\r\n\r\nIn non-static methods you can access directly because of this reference (also in constructors)but to access in static methods you need to create object of the class.', 'ans'),
(52, 205, 'This Java tutorial may be of some use to you.\r\n\r\nModifier    | Class | Package | Subclass | World\r\n————————————+———————+—————————+——————————+———————\r\npublic      |  y    |    y    |    y     |   y\r\n————————————+———————+—————————+——————————+———————\r\nprotected   |  y    |    y    |    y     |   n\r\n————————————+———————+—————————+——————————+———————\r\nno modifier |  y    |    y    |    n     |   n    **also known as package-private**\r\n————————————+———————+—————————+——————————+———————\r\nprivate     |  y    |    n    |    n     |   n\r\n\r\ny: accessible\r\nn: not accessible', 'ans'),
(53, 205, 'Public Protected Default and private are access modifiers.\r\n\r\nThey are meant for encapsulation, or hiding and showing contents of the class.\r\n\r\nClass can be public or default\r\nClass members can be public, protected, default or private.\r\nPrivate is not accessible outside the class Default is accessible only in the package. Protected in package as well as any class which extends it. Public is open for all.\r\n\r\nNormally, member variables are defined private, but member methods are public.', 'ans'),
(54, 205, 'Easy rule. Start with declaring everything private. And then progress towards public as the needs arises and design warrant it.\r\n\r\nWhen exposing members ask yourself if you are exposing representation choices or abstraction choices. The first is something you want to avoid as it will introduce to much dependencies on the actual representation rather than it''s observable behavior.\r\n\r\nAs a general rule I try to avoid overriding method implementations by sub-classing, it''s to easy to screw up the logic. Declare abstract protected methods if you intend for it to be overridden.\r\n\r\nAlso use the @Override annotation when overriding to keep things from breaking when you refactor.', 'non'),
(55, 204, 'You can still use deprecated code without performance being changed, but the whole point of deprecating a method/class is to let users know there''s now a better way of using it, and that in a future release the deprecated code is likely to be removed.', 'ans'),
(56, 204, 'It''s not wrong, it''s just not recommended. It generally means that at this point there is a better way of doing things and you''d do good if you use the new improved way. Some deprecated stuff are really dangerous and should be avoided altogether. The new way can yield better performance than the deprecated one, but it''s not always the case.', 'ans'),
(57, 204, 'Aside from all the excellent responses above I found there is another reason to remove deprecated API calls.\r\n\r\nBe researching why a call is deprecated I often find myself learning interesting things about the Java/the API/the Framework. There is often a good reason why a method is being deprecated and understanding these reasons leads to deeper insights.\r\n\r\nSo from a learning/growing perspective, it is also a worthwhile effort', 'non'),
(58, 204, 't certainly doesn''t create a performance issue -- deprecated means in the future it''s likely that function won''t be part of the library anymore, so you should avoid using it in new code and change your old code to stop using it, so you don''t run into problems one day when you upgrade struts and find that function is no longer present', 'non'),
(59, 204, 'It''s not wrong, it''s just not recommended. It generally means that at this point there is a better way of doing things and you''d do good if you use the new improved way. Some deprecated stuff are really dangerous and should be avoided altogether. The new way can yield better performance than the deprecated one, but it''s not always the case.', 'ans'),
(60, 204, 'Yes, it is wrong.\r\n\r\nDeprecated methods or classes will be removed in future versions of Java and should not be used. In each case, there should be an alternative available. Use that.\r\n\r\nThere are a couple of cases when you have to use a deprecated class or method in order to meet a project goal. In this case, you really have no choice but to use it. Future versions of Java may break that code, but if it''s a requirement you have to live with that. It probably isn''t the first time you had to do something wrong in order to meet a project requirement, and it certainly won''t be the last.\r\n\r\nWhen you upgrade to a new version of Java or some other library, sometimes a method or a class you were using becomes deprecated. Deprecated methods are not supported, but shouldn''t produce unexpected results. That doesn''t mean that they won''t, though, so switch your code ASAP.\r\n\r\nThe deprecation process is there to make sure that authors have enough time to change their code over from an old API to a new API. Make use of this time. Change your code over ASAP.', 'non'),
(61, 104, 'A plugin can be a third-party software for your program, which allows some enhanced features for it. For example, someone could develop a plugin for your web browser to change the visual theme.', 'ans'),
(62, 104, 'A plugin can be a third-party software for your program, which allows some enhanced features for it. For example, someone could develop a plugin for your web browser to change the visual theme.', 'ans'),
(63, 104, 'A plug-in is an additional bit of code that changes the way the software works. \r\n\r\nIf you develop a piece of software you might make it do something and then someone else comes along and thinks well I want this software to do this but it doesn''t. \r\n\r\nA plug-in asks the original piece of software for various information which the software sends to it, in return the plugin processes the information it receives and passes it back to the main program so the main program can deal with it, or sometimes does something and sends a "true" value back to the program to tell the main program it''s done what it needed to do successfully (or false if it failed). Some examples of plug-ins \r\n\r\nExport plugins - many programs have export plugins - Office has numerous ones, so does GIMP, and Photoshop. In GIMP JPEG export is a plugin - GIMP doesn''t know anything about the JPEG format, GIMP only knows one format - RAW (even XCF is actually a plugin), all other formats are plugins - so if someone clicks Export As... and types JPEG GIMP then sends all the image data in RAW format to the JPEG plugin, the JPEG plugin then takes that data and runs it through a process inside which turns the RAW format into JPEG format, which it might either return to the program and allow the programs save process to write it to the disc, or handle the saving functionality all itself (it would be more efficient to pass it back to the main program as then it means each plugin doesn''t have all the "save" code wrote in to it). \r\n\r\nCMS Plugins - many content management systems have various plugins - Joomla has a JEvents plugin - Joomla itself has no calendar functionality, JEvents creates a database table, and allows the administrator to input calendar dates, and stores them in the database. It passes HTML back to Joomla so it can generate a website showing calender events, even though the main Joomla program isn''t programmed at all to recognise the calendar format or anything - to the main Joomla program it''s just HTML. \r\n\r\nSo this is what a plugin does - \r\n\r\n<main program> \r\nUser clicks export as \r\nUser chooses to export to JPEG \r\nProgram passes control to JPEG plugin \r\n----->JPEG Plugin uses it''s code to turn RAW data into JPEG \r\n----->JPEG Plugin returns JPEG data to main program telling it that data is to be saved \r\nProgram receives data back from JPEG Plugin \r\nProgram writes data to disc \r\nProgram has no knowledge of what JPEG format is but has just wrote JPEG file.', 'ans'),
(64, 104, 'Plugins are one of two ways to mediate a KP''s access to system resources. The KP''s restricted execution (rexec) environment can also be extended to allow in-process access to resources. The extension mechanism, called rexec proxies, is not documented at this time.', 'non'),
(65, 104, 'Seriously dude? You know what a outlit is, so a plug in is something that gets plugged into a out lit. Like at the end of a coord on a vacuum or T.V. Is a plug in. Get it now? If you don''t I don''t think you ever wil. And I seriously hope you are just joking and are bored. Quick question... How old are you?', 'ans'),
(66, 104, 'Its like an add on from my understanding. Depends on what it''s for. Minecraft server plugin allows extra features to be enabled on the server.', 'non'),
(67, 105, 'Unix and Linux are modular operating systems. Unix, created at Bell Labs, is historically important. It was the first multi-platform OS and is the OS - or family of OSes - on which Modern Computer Science was created. \r\n\r\nLinux is the kernel of an operating system. It was written originally to let Windows machines run Unix programs, however whether it is a Unix is open to discussion - there are subtle differences in security which make Linux easier to use but provoke debates. All that said look them up and look up the GNU tools.', 'ans'),
(68, 105, 'This is a simplified explanation.... \r\n\r\nUnix was a mainframe OS that was developed in he 70''s. Linux is, for all practical purposes a clone of it. All DVR (set top boxes), most web servers, most banks, most ATM, most bank card terminals, and most all supercomputers run it. Anyplace were security and long term stability are needed you will find Linux. Everyone uses Linux every day, they just do not know it. \r\n\r\nLinux was not intended for the desktop, but it still sees a lot of use. Max OS is very similar, and also comes from Unix, via a different branch of the tree (so to speak). \r\n\r\nLinux is considered much more secure than Windows, mainly because security was built in from day one, and its roots are in Unix that has been around twice as long as Windows. \r\n\r\nMicrosoft made its own "unix" back in the 80''s. It was called Xenix. \r\n\r\nChrome, Android, Sun OS, OS-X, iOS, and others are cousins or outright copies of Linux.', 'ans'),
(69, 105, 'Linux is an open source, free to use operating system widely used for computer hardware and software, game development, tablet PCS, mainframes etc. Unix is an operating system commonly used in internet servers, workstations and PCs by Solaris, Intel, HP etc.', 'ans'),
(70, 105, 'Linux is OS And Unix Language', 'non'),
(71, 105, 'Wikipedia explains what Unix is fairly well. \r\n\r\nhttp://en.m.wikipedia.org/wiki/Unix \r\n\r\nOS X is the most popular Unix operating system out there right now.', 'non'),
(72, 105, 'linux is another operating system \r\nfor example . windows 8 is a operating sytem \r\nuse google to do research dude. thats what google was made for', 'non'),
(73, 105, 'http://tinyurl.com/neqg5sw', 'non'),
(74, 106, 'Java is a computer language developed at Sun Microsystems in the 1990s. It is similar to the C and C++ programming languages in syntax, but unlike them, it is not compiled to object code. Instead, it renders to something called P-code, which is then interpreted by a virtual machine on the computer it runs on. It was designed to be completely independent of platform, so that a Java program written on a Sun Worstation should run on a Microsoft Windows PC or an Apple Mac without having to be recompiled.\r\n\r\nJava lends itself particularly well to Web applications in part because of this independence, and in part because it has some nice features for distributed and client/server programming.\r\n\r\nMicrosoft''s .NET initiative was devised to compete with Java. It has similar features, but it''s not as open.', 'ans'),
(75, 106, 'Java is a programming language. It''s widely used in all kinds of electronics. It''s used on websites, applications, handheld devices, some cars even have Java programs controlling certain things. \r\n\r\nA big reason it''s so popular is becasue it allows people to write smaller programs, which allows Java to be used on devices with less memory or disk space. The programs are smaller becasue they don''t include the libraries needed to run within the actual executable, instead anyone who uses a Java application or visits a website that uses Java needs to have Java installed on their system. \r\n\r\nWhen you run a Java app, it looks for the libraries on your local computer, which is why Java programs tend to take a long time to load, they are compiled at run time. This is great for portablility, but some people don''t like the extra time it takes to load. \r\n\r\nI don''t care to write in Java, mainly becasue it does too much stuff for you and gives you less access to certain functions other languages let you use. It''s easy and does a lot of stuff for you so lots of new programmers like it.', 'ans'),
(76, 106, 'Sakthi Software Solutions Pvt Ltd, Offers Best Java Training in Chennai with Placements. \r\n\r\nhttp://www.sssedu.in/java-training-in-ch...\r\nSource(s):\r\nhttp://www.sssedu.in/java-training-in-ch...', 'non'),
(77, 106, 'Java is a object-oriented language that used for the gaming application by using J2ME Stantard (Java to Mobile Enterprise).', 'ans'),
(78, 106, 'I''ve made a course on Java. Check it out below. You get HD videos, quizzes, and pdf''s of the code. It''s free to join. http://www.masterskills.net/java-course/', 'non'),
(79, 106, 'Java web services will help in building a web program.Learn how to built a java web program in an effective way. \r\n\r\nWeb services are client and server applications that communicate over the World Wide Web’s (WWW) HyperText Transfer Protocol (HTTP). As described by the World Wide Web Consortium (W3C), web services provide a standard means of interoperating between software applications running on a variety of platforms and frameworks. Web services are characterized by their great interoperability and extensibility, as well as their machine-processable descriptions, thanks to the use of XML. Web services can be combined in a loosely coupled way to achieve complex operations. Programs providing simple services can interact with each other to deliver sophisticated added-value services.', 'ans'),
(80, 106, 'java is used to develop severs. \r\njava is in a lot of comercial commpany. \r\njava is uesed by a lot of developers more than c language. \r\njava is used to develop a lot of industrial and game applications.', 'ans'),
(81, 106, 'yeah thats is', 'non'),
(82, 107, 'Simply XML was designed to describe data, with focus on what data is whereas HTML was designed to display data, with focus on how data looks. \r\n\r\n\r\nXML is the acronym from Extensible Markup Language (meta-language of noting/marking). XML is a resembling language with HTML. It was developed for describing data. \r\nThe XML tags are not pre-defined in XML. You will have to create tags according to your needs. \r\nXML is self descriptive. \r\nXML uses DDT principle (Defining the Document Type) to formally describe the data. \r\nThe main difference between XML and HTML: XML is not a substitute for HTML. \r\n\r\nXML was developed to describe data and to focalize on what the data represent. \r\nHTML was developed to display data about to focalize on the way that data looks. \r\nHTML is about displaying data, XML is about describing information. \r\nXML is extensible. \r\n\r\n\r\nThe tags used to mark the documents and the structures of documents in HTML are pre-defined. The author of HTML documents can use only tags that were previously defined in HTML. The Standard XML gives you the possibility to define personal structures and tags. \r\n\r\nIt is important to understand that XML is not a substitute for HTML. In the future development of the Web, XML will be the main language to describe the structure and the Web data, and the HTML language will be responsible for displaying the data. \r\n\r\nWe participated to the evolution of XML since its appearance. It is amazing to observe its rapid evolution, and how fast it was adopted by the majority of software developers. We strongly believe that XML will become as important as HTML for the future web evolution, especially when it comes to data manipulation. \r\n\r\nXML can store data separately from HTML. \r\nXML can be used to store data inside the HTML documents. \r\nXML can be used as a format for exchanging information. \r\nXML can be used to store data in files and databases. \r\n\r\n\r\nThe HTML pages are used to display data. The data are sometimes stored in the interior of HTML pages. Using XML, you can store data in a separated file. This way, you can easily concentrate on using HTML for formatting and displaying, and you can also be certain that the modifications won’t bring any modifications to any HTML code. \r\n\r\nXML can also store data inside the HTML documents. The XML data will store data in HTML documents as “data islands.” You can concentrate on HTML to format and display data. \r\n\r\nIn the real world, the calculation systems and the databases are containing data in incompatible formats. One of the most soliciting provocations for developers was exchanging data between incompatible systems over the internet. Converting XML data can reduce the complexity, and it can also create data that are easy to read by any kind of application. \r\n\r\nXML can be used to store data in files or databases. You can write applications to store and recover information from the hard disks, and you can write generic application to display certain types of data.', 'ans');
INSERT INTO `training` (`t_id`, `q_id`, `resp`, `class`) VALUES
(83, 107, ' XML and HTML are both document markup languages. HTML focuses on markup suitable for the web, while XML is a neutral markup language. \r\n\r\nInaccuracies in other answers: \r\n\r\n"HTML was designed to display data and to focus on how data looks." \r\nNo. HTML isn''t really focused on presentation. It''s used to indicate the structural meanings of parts of a document. Example, a heading, a hyperlink, a paragraph. How it actually looks in a web browser, or whatever medium is used, is up to the agent. You should control presentational attributes through CSS. \r\n\r\n"XML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose." \r\n\r\nThat''s a bit misleading. XML and HTML are really subsets of SGML. SGML is so vague and broad in scope, that it isn''t really usable for something like webpages. In fact, HTML is used for richly structured documents over the web, and not XML. XML is a neutral markup language. XHTML is an XML conforming HTML file intended for web use. HTML does not necessarily conform to XML standards. \r\n\r\n"XML is used for representation of data. \r\nhtml is used for presentation of data." \r\nNo! They are both structural markup languages. HTML is *not* used for presentation. It''s used to give semantic and structural meanings to various parts of the document.', 'ans'),
(84, 107, 'HTML is programming language while XML is like a database', 'non'),
(85, 107, 'You can find the answer here https://in.answers.yahoo.com/question/index?qid=20061229085607AACEijM&page=2', 'non'),
(86, 107, 'HTML is an abbreviation for HyperText Markup Language while XML stands for eXtensible Markup Language.The differences are as follows:- \r\n\r\n1.HTML was designed to display data with focus on how data looks while XML was designed to be a software and hardware independent tool used to transport and store data, with focus on what data is. \r\n\r\n2.HTML is a markup language itself while XML provides a framework for defining markup languages. \r\n\r\n3.HTML is a presentation language while XML is neither a programming language nor a presentation language. \r\n\r\n4.HTML is case insensitive while XML is case sensitive. \r\n\r\n5.HTML is used for designing a web-page to be rendered on the client side while XML is used basically to transport data between the application and the database. \r\n\r\n6.HTML has it own predefined tags while what makes XML flexible is that custom tags can be defined and the tags are invented by the author of the XML document. \r\n\r\n7.HTML is not strict if the user does not use the closing tags but XML makes it mandatory for the user the close each tag that has been used. \r\n\r\n8.HTML does not preserve white space while XML does. \r\n\r\n9.HTML is about displaying data,hence static but XML is about carrying information,hence dynamic. \r\n\r\nThus,it can be said that HTML and XML are not competitors but rather complement to each other \r\nand clearly serving altogether different purposes', 'ans'),
(87, 107, 'I guess that you are trying to learn xml now. There are various ways to see the difference between html and xml. Best way is to see the differences during initial phase as \r\nusage: \r\nHtml: to display contents on browser \r\nxml: Structured way to store and transfer/exchange data. \r\nSyntax: \r\nhtml: they have a set of pre defined tag names that can be used, Ex html, image,table,. Ideally all opening tags should have a closed tag but this is not mandatory. \r\nxml: you can use any tag name Ex root, xyz. All opening tags must be closed compulsorily. \r\n\r\nIn simple terms all well formed html( every opened tag having a closed tag) is a xml. \r\n\r\nExample \r\nHtml \r\n<html> \r\n<body> \r\nThis is a html <br> This is not a xml \r\n</body> \r\n</html> \r\n\r\nps: notice that "br" tag does not have a closing tag \r\n___________________ \r\n_ \r\nXML: \r\n<root> \r\n<parent> \r\n<child> This is a xml</child> \r\n</parent> \r\n</root> \r\n\r\n_________________ \r\nXML and HTML \r\n<html> \r\n<body> \r\nThis is a html and XML \r\n</body> \r\n</html> \r\n\r\nAfter some days once you have worked with xml and html you will find these differences trivial and will think in different ways. and have other questions. For now, good luck with your xml and html.', 'ans'),
(88, 107, 'The Extensible Markup Language (XML) is a W3C-recommended general-purpose markup language that supports a wide variety of applications. XML languages or ''dialects'' are easy to design and to process. XML is also designed to be reasonably human-legible, and to this end, terseness was not considered essential in its structure. XML is a simplified subset of Standard Generalized Markup Language (SGML). Its primary purpose is to facilitate the sharing of data across different information systems, particularly systems connected via the Internet. Formally defined languages based on XML (such as RSS, MathML, XHTML, Scalable Vector Graphics, MusicXML and thousands of other examples) allow diverse software reliably to understand information formatted and passed in these languages. \r\n\r\n\r\nHyperText Markup Language (HTML) is the predominant markup language for the creation of web pages. It provides a means to describe the structure of text-based information in a document — by denoting certain text as headings, paragraphs, lists, and so on — and to supplement that text with interactive forms, embedded images, and other objects. HTML can also describe, to some degree, the appearance and semantics of a document, and can provide additional cues, such as embedded scripting language code, that can affect the behavior of web browsers and other HTML processors.', 'ans'),
(89, 107, 'XML is a markup language for documents containing structured information. Structured information contains both content (words, pictures, etc.) and some indication of what role that content plays. \r\n\r\nIn HTML, both the tag semantics and the tag set are fixed. XML specifies neither semantics nor a tag set. \r\n\r\nXML was created so that richly structured documents could be used over the web. The only viable alternatives, HTML and SGML, are not practical for this purpose. \r\n\r\nBasically, HTML comes bound with a set of semantics and does not provide arbitrary structure. ', 'ans');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `question`
--
ALTER TABLE `question`
 ADD PRIMARY KEY (`q_id`);

--
-- Indexes for table `response`
--
ALTER TABLE `response`
 ADD PRIMARY KEY (`r_id`);

--
-- Indexes for table `training`
--
ALTER TABLE `training`
 ADD PRIMARY KEY (`t_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `question`
--
ALTER TABLE `question`
MODIFY `q_id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=208;
--
-- AUTO_INCREMENT for table `response`
--
ALTER TABLE `response`
MODIFY `r_id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=695;
--
-- AUTO_INCREMENT for table `training`
--
ALTER TABLE `training`
MODIFY `t_id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=90;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
